/*!
 * Krig.io
 * Krig.io webpage, using the fastshell boilerplate.
 * https://krig.io
 * @author Krig.io
 * @version 0.0.1
 * Copyright 2018. UNLICENSED licensed.
 */
!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(e,t,n){"use strict";(function(e){var n,r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(t,n){"object"===i(e)&&"object"===i(e.exports)?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:void 0,function(o,s){function a(e,t){t=t||ae;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function u(e){var t=!!e&&"length"in e&&e.length,n=be.type(e);return"function"!==n&&!be.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function c(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function l(e,t,n){return be.isFunction(t)?be.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?be.grep(e,function(e){return e===t!==n}):"string"!=typeof t?be.grep(e,function(e){return de.call(t,e)>-1!==n}):Ae.test(t)?be.filter(t,e,n):(t=be.filter(t,e),be.grep(e,function(e){return de.call(t,e)>-1!==n&&1===e.nodeType}))}function f(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function d(e){var t={};return be.each(e.match(Oe)||[],function(e,n){t[n]=!0}),t}function p(e){return e}function h(e){throw e}function g(e,t,n,r){var i;try{e&&be.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&be.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function y(){ae.removeEventListener("DOMContentLoaded",y),o.removeEventListener("load",y),be.ready()}function v(){this.expando=be.expando+v.uid++}function m(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:_e.test(e)?JSON.parse(e):e)}function x(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Xe,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n=m(n)}catch(i){}Be.set(e,t,n)}else n=void 0;return n}function b(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return be.css(e,t,"")},u=a(),c=n&&n[3]||(be.cssNumber[t]?"":"px"),l=(be.cssNumber[t]||"px"!==c&&+u)&&Ye.exec(be.css(e,t));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+u||1;do o=o||".5",l/=o,be.style(e,t,l+c);while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function w(e){var t,n=e.ownerDocument,r=e.nodeName,i=Qe[r];return i?i:(t=n.body.appendChild(n.createElement(r)),i=be.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),Qe[r]=i,i)}function T(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)r=e[o],r.style&&(n=r.style.display,t?("none"===n&&(i[o]=$e.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Ve(r)&&(i[o]=w(r))):"none"!==n&&(i[o]="none",$e.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function C(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&c(e,t)?be.merge([e],n):n}function S(e,t){for(var n=0,r=e.length;n<r;n++)$e.set(e[n],"globalEval",!t||$e.get(t[n],"globalEval"))}function k(e,t,n,r,i){for(var o,s,a,u,c,l,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if(o=e[p],o||0===o)if("object"===be.type(o))be.merge(d,o.nodeType?[o]:o);else if(tt.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(Ke.exec(o)||["",""])[1].toLowerCase(),u=et[a]||et._default,s.innerHTML=u[1]+be.htmlPrefilter(o)+u[2],l=u[0];l--;)s=s.lastChild;be.merge(d,s.childNodes),s=f.firstChild,s.textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(r&&be.inArray(o,r)>-1)i&&i.push(o);else if(c=be.contains(o.ownerDocument,o),s=C(f.appendChild(o),"script"),c&&S(s),n)for(l=0;o=s[l++];)Ze.test(o.type||"")&&n.push(o);return f}function E(){return!0}function D(){return!1}function N(){try{return ae.activeElement}catch(e){}}function j(e,t,n,r,o,s){var a,u;if("object"===("undefined"==typeof t?"undefined":i(t))){"string"!=typeof n&&(r=r||n,n=void 0);for(u in t)j(e,u,n,r,t[u],s);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),o===!1)o=D;else if(!o)return e;return 1===s&&(a=o,o=function(e){return be().off(e),a.apply(this,arguments)},o.guid=a.guid||(a.guid=be.guid++)),e.each(function(){be.event.add(this,t,o,r,n)})}function A(e,t){return c(e,"table")&&c(11!==t.nodeType?t:t.firstChild,"tr")?be(">tbody",e)[0]||e:e}function H(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function L(e){var t=ct.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function q(e,t){var n,r,i,o,s,a,u,c;if(1===t.nodeType){if($e.hasData(e)&&(o=$e.access(e),s=$e.set(t,o),c=o.events)){delete s.handle,s.events={};for(i in c)for(n=0,r=c[i].length;n<r;n++)be.event.add(t,i,c[i][n])}Be.hasData(e)&&(a=Be.access(e),u=be.extend({},a),Be.set(t,u))}}function M(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Je.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function P(e,t,n,r){t=le.apply([],t);var i,o,s,u,c,l,f=0,d=e.length,p=d-1,h=t[0],g=be.isFunction(h);if(g||d>1&&"string"==typeof h&&!me.checkClone&&ut.test(h))return e.each(function(i){var o=e.eq(i);g&&(t[0]=h.call(this,i,o.html())),P(o,t,n,r)});if(d&&(i=k(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=be.map(C(i,"script"),H),u=s.length;f<d;f++)c=i,f!==p&&(c=be.clone(c,!0,!0),u&&be.merge(s,C(c,"script"))),n.call(e[f],c,f);if(u)for(l=s[s.length-1].ownerDocument,be.map(s,L),f=0;f<u;f++)c=s[f],Ze.test(c.type||"")&&!$e.access(c,"globalEval")&&be.contains(l,c)&&(c.src?be._evalUrl&&be._evalUrl(c.src):a(c.textContent.replace(lt,""),l))}return e}function O(e,t,n){for(var r,i=t?be.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||be.cleanData(C(r)),r.parentNode&&(n&&be.contains(r.ownerDocument,r)&&S(C(r,"script")),r.parentNode.removeChild(r));return e}function F(e,t,n){var r,i,o,s,a=e.style;return n=n||pt(e),n&&(s=n.getPropertyValue(t)||n[t],""!==s||be.contains(e.ownerDocument,e)||(s=be.style(e,t)),!me.pixelMarginRight()&&dt.test(s)&&ft.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function R(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function I(e){if(e in xt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=mt.length;n--;)if(e=mt[n]+t,e in xt)return e}function W(e){var t=be.cssProps[e];return t||(t=be.cssProps[e]=I(e)||e),t}function $(e,t,n){var r=Ye.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function B(e,t,n,r,i){var o,s=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(s+=be.css(e,n+Ue[o],!0,i)),r?("content"===n&&(s-=be.css(e,"padding"+Ue[o],!0,i)),"margin"!==n&&(s-=be.css(e,"border"+Ue[o]+"Width",!0,i))):(s+=be.css(e,"padding"+Ue[o],!0,i),"padding"!==n&&(s+=be.css(e,"border"+Ue[o]+"Width",!0,i)));return s}function _(e,t,n){var r,i=pt(e),o=F(e,t,i),s="border-box"===be.css(e,"boxSizing",!1,i);return dt.test(o)?o:(r=s&&(me.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),o=parseFloat(o)||0,o+B(e,t,n||(s?"border":"content"),r,i)+"px")}function X(e,t,n,r,i){return new X.prototype.init(e,t,n,r,i)}function z(){wt&&(ae.hidden===!1&&o.requestAnimationFrame?o.requestAnimationFrame(z):o.setTimeout(z,be.fx.interval),be.fx.tick())}function Y(){return o.setTimeout(function(){bt=void 0}),bt=be.now()}function U(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=Ue[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function V(e,t,n){for(var r,i=(J.tweeners[t]||[]).concat(J.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function G(e,t,n){var r,i,o,s,a,u,c,l,f="width"in t||"height"in t,d=this,p={},h=e.style,g=e.nodeType&&Ve(e),y=$e.get(e,"fxshow");n.queue||(s=be._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,be.queue(e,"fx").length||s.empty.fire()})}));for(r in t)if(i=t[r],Tt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}p[r]=y&&y[r]||be.style(e,r)}if(u=!be.isEmptyObject(t),u||!be.isEmptyObject(p)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=y&&y.display,null==c&&(c=$e.get(e,"display")),l=be.css(e,"display"),"none"===l&&(c?l=c:(T([e],!0),c=e.style.display||c,l=be.css(e,"display"),T([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===be.css(e,"float")&&(u||(d.done(function(){h.display=c}),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in p)u||(y?"hidden"in y&&(g=y.hidden):y=$e.access(e,"fxshow",{display:c}),o&&(y.hidden=!g),g&&T([e],!0),d.done(function(){g||T([e]),$e.remove(e,"fxshow");for(r in p)be.style(e,r,p[r])})),u=V(g?y[r]:0,r,d),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}}function Q(e,t){var n,r,i,o,s;for(n in e)if(r=be.camelCase(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=be.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function J(e,t,n){var r,i,o=0,s=J.prefilters.length,a=be.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=bt||Y(),n=Math.max(0,c.startTime+c.duration-t),r=n/c.duration||0,o=1-r,s=0,u=c.tweens.length;s<u;s++)c.tweens[s].run(o);return a.notifyWith(e,[c,o,n]),o<1&&u?n:(u||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:be.extend({},t),opts:be.extend(!0,{specialEasing:{},easing:be.easing._default},n),originalProperties:t,originalOptions:n,startTime:bt||Y(),duration:n.duration,tweens:[],createTween:function(t,n){var r=be.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),l=c.props;for(Q(l,c.opts.specialEasing);o<s;o++)if(r=J.prefilters[o].call(c,e,l,c.opts))return be.isFunction(r.stop)&&(be._queueHooks(c.elem,c.opts.queue).stop=be.proxy(r.stop,r)),r;return be.map(l,V,c),be.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),be.fx.timer(be.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}function K(e){var t=e.match(Oe)||[];return t.join(" ")}function Z(e){return e.getAttribute&&e.getAttribute("class")||""}function ee(e,t,n,r){var o;if(Array.isArray(t))be.each(t,function(t,o){n||qt.test(e)?r(e,o):ee(e+"["+("object"===("undefined"==typeof o?"undefined":i(o))&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==be.type(t))r(e,t);else for(o in t)ee(e+"["+o+"]",t[o],n,r)}function te(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Oe)||[];if(be.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function ne(e,t,n,r){function i(a){var u;return o[a]=!0,be.each(e[a]||[],function(e,a){var c=a(t,n,r);return"string"!=typeof c||s||o[c]?s?!(u=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),u}var o={},s=e===zt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function re(e,t){var n,r,i=be.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&be.extend(!0,e,r),e}function ie(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}function oe(e,t,n,r){var i,o,s,a,u,c={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=c[u+" "+o]||c["* "+o],!s)for(i in c)if(a=i.split(" "),a[1]===o&&(s=c[u+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[i]:c[i]!==!0&&(o=a[0],l.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}var se=[],ae=o.document,ue=Object.getPrototypeOf,ce=se.slice,le=se.concat,fe=se.push,de=se.indexOf,pe={},he=pe.toString,ge=pe.hasOwnProperty,ye=ge.toString,ve=ye.call(Object),me={},xe="3.2.1",be=function en(e,t){return new en.fn.init(e,t)},we=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,Te=/^-ms-/,Ce=/-([a-z])/g,Se=function(e,t){return t.toUpperCase()};be.fn=be.prototype={jquery:xe,constructor:be,length:0,toArray:function(){return ce.call(this)},get:function(e){return null==e?ce.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=be.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return be.each(this,e)},map:function(e){return this.pushStack(be.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ce.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:fe,sort:se.sort,splice:se.splice},be.extend=be.fn.extend=function(){var e,t,n,r,o,s,a=arguments[0]||{},u=1,c=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[u]||{},u++),"object"===("undefined"==typeof a?"undefined":i(a))||be.isFunction(a)||(a={}),u===c&&(a=this,u--);u<c;u++)if(null!=(e=arguments[u]))for(t in e)n=a[t],r=e[t],a!==r&&(l&&r&&(be.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,s=n&&Array.isArray(n)?n:[]):s=n&&be.isPlainObject(n)?n:{},a[t]=be.extend(l,s,r)):void 0!==r&&(a[t]=r));return a},be.extend({expando:"jQuery"+(xe+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===be.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=be.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==he.call(e))&&(!(t=ue(e))||(n=ge.call(t,"constructor")&&t.constructor,"function"==typeof n&&ye.call(n)===ve))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"===("undefined"==typeof e?"undefined":i(e))||"function"==typeof e?pe[he.call(e)]||"object":"undefined"==typeof e?"undefined":i(e)},globalEval:function(e){a(e)},camelCase:function(e){return e.replace(Te,"ms-").replace(Ce,Se)},each:function(e,t){var n,r=0;if(u(e))for(n=e.length;r<n&&t.call(e[r],r,e[r])!==!1;r++);else for(r in e)if(t.call(e[r],r,e[r])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(we,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(u(Object(e))?be.merge(n,"string"==typeof e?[e]:e):fe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:de.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;o<s;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(u(e))for(r=e.length;o<r;o++)i=t(e[o],o,n),null!=i&&s.push(i);else for(o in e)i=t(e[o],o,n),null!=i&&s.push(i);return le.apply([],s)},guid:1,proxy:function tn(e,t){var n,r,tn;if("string"==typeof t&&(n=e[t],t=e,e=n),be.isFunction(e))return r=ce.call(arguments,2),tn=function(){return e.apply(t||this,r.concat(ce.call(arguments)))},tn.guid=e.guid=e.guid||be.guid++,tn},now:Date.now,support:me}),"function"==typeof Symbol&&(be.fn[Symbol.iterator]=se[Symbol.iterator]),be.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){pe["[object "+t+"]"]=t.toLowerCase()});var ke=function(e){function t(e,t,n,r){var i,o,s,a,u,c,l,d=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:$)!==q&&L(t),t=t||q,P)){if(11!==h&&(u=ve.exec(e)))if(i=u[1]){if(9===h){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(d&&(s=d.getElementById(i))&&I(t,s)&&s.id===i)return n.push(s),n}else{if(u[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&T.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(T.qsa&&!Y[e+" "]&&(!O||!O.test(e))){if(1!==h)d=t,l=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(we,Te):t.setAttribute("id",a=W),c=E(e),o=c.length;o--;)c[o]="#"+a+" "+p(c[o]);l=c.join(","),d=me.test(e)&&f(t.parentNode)||t}if(l)try{return K.apply(n,d.querySelectorAll(l)),n}catch(g){}finally{a===W&&t.removeAttribute("id")}}}return N(e.replace(ae,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[W]=!0,e}function i(e){var t=q.createElement("fieldset");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)C.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return function(t){return"form"in t?t.parentNode&&t.disabled===!1?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function f(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function d(){}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=_++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,u){var c,l,f,d=[B,a];if(u){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(f=t[W]||(t[W]={}),l=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[o])&&c[0]===B&&c[1]===a)return d[2]=c[2];if(l[o]=d,d[2]=e(t,n,u))return!0}return!1}}function g(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function y(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function v(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,c=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),c&&t.push(a)));return s}function m(e,t,n,i,o,s){return i&&!i[W]&&(i=m(i)),o&&!o[W]&&(o=m(o,s)),r(function(r,s,a,u){var c,l,f,d=[],p=[],h=s.length,g=r||y(t||"*",a.nodeType?[a]:a,[]),m=!e||!r&&t?g:v(g,d,e,a,u),x=n?o||(r?e:h||i)?[]:s:m;if(n&&n(m,x,a,u),i)for(c=v(x,p),i(c,[],a,u),l=c.length;l--;)(f=c[l])&&(x[p[l]]=!(m[p[l]]=f));if(r){if(o||e){if(o){for(c=[],l=x.length;l--;)(f=x[l])&&c.push(m[l]=f);o(null,x=[],c,u)}for(l=x.length;l--;)(f=x[l])&&(c=o?ee(r,f):d[l])>-1&&(r[c]=!(s[c]=f))}}else x=v(x===s?x.splice(h,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function x(e){for(var t,n,r,i=e.length,o=C.relative[e[0].type],s=o||C.relative[" "],a=o?1:0,u=h(function(e){return e===t},s,!0),c=h(function(e){return ee(t,e)>-1},s,!0),l=[function(e,n,r){var i=!o&&(r||n!==j)||((t=n).nodeType?u(e,n,r):c(e,n,r));return t=null,i}];a<i;a++)if(n=C.relative[e[a].type])l=[h(g(l),n)];else{if(n=C.filter[e[a].type].apply(null,e[a].matches),n[W]){for(r=++a;r<i&&!C.relative[e[r].type];r++);return m(a>1&&g(l),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,a<r&&x(e.slice(a,r)),r<i&&x(e=e.slice(r)),r<i&&p(e))}l.push(n)}return g(l)}function b(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,c){var l,f,d,p=0,h="0",g=r&&[],y=[],m=j,x=r||o&&C.find.TAG("*",c),b=B+=null==m?1:Math.random()||.1,w=x.length;for(c&&(j=s===q||s||c);h!==w&&null!=(l=x[h]);h++){if(o&&l){for(f=0,s||l.ownerDocument===q||(L(l),a=!P);d=e[f++];)if(d(l,s||q,a)){u.push(l);break}c&&(B=b)}i&&((l=!d&&l)&&p--,r&&g.push(l))}if(p+=h,i&&h!==p){for(f=0;d=n[f++];)d(g,y,s,a);if(r){if(p>0)for(;h--;)g[h]||y[h]||(y[h]=Q.call(u));y=v(y)}K.apply(u,y),c&&!r&&y.length>0&&p+n.length>1&&t.uniqueSort(u)}return c&&(B=b,j=m),g};return i?r(s):s}var w,T,C,S,k,E,D,N,j,A,H,L,q,M,P,O,F,R,I,W="sizzle"+1*new Date,$=e.document,B=0,_=0,X=n(),z=n(),Y=n(),U=function(e,t){return e===t&&(H=!0),0},V={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),le=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(oe),de=new RegExp("^"+re+"$"),pe={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ye=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,xe=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),be=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Te=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Ce=function(){L()},Se=h(function(e){return e.disabled===!0&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{K.apply(G=Z.call($.childNodes),$.childNodes),G[$.childNodes.length].nodeType}catch(ke){K={apply:G.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}T=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},L=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:$;return r!==q&&9===r.nodeType&&r.documentElement?(q=r,M=q.documentElement,P=!k(q),$!==q&&(n=q.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),T.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),T.getElementsByTagName=i(function(e){return e.appendChild(q.createComment("")),!e.getElementsByTagName("*").length}),T.getElementsByClassName=ye.test(q.getElementsByClassName),T.getById=i(function(e){return M.appendChild(e).id=W,!q.getElementsByName||!q.getElementsByName(W).length}),T.getById?(C.filter.ID=function(e){var t=e.replace(xe,be);return function(e){return e.getAttribute("id")===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&P){var n=t.getElementById(e);return n?[n]:[]}}):(C.filter.ID=function(e){var t=e.replace(xe,be);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&P){var n,r,i,o=t.getElementById(e);if(o){if(n=o.getAttributeNode("id"),n&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if(n=o.getAttributeNode("id"),n&&n.value===e)return[o]}return[]}}),C.find.TAG=T.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):T.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},C.find.CLASS=T.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&P)return t.getElementsByClassName(e)},F=[],O=[],(T.qsa=ye.test(q.querySelectorAll))&&(i(function(e){M.appendChild(e).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&O.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||O.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+W+"-]").length||O.push("~="),e.querySelectorAll(":checked").length||O.push(":checked"),e.querySelectorAll("a#"+W+"+*").length||O.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=q.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&O.push("name"+ne+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&O.push(":enabled",":disabled"),M.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&O.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),O.push(",.*:")})),(T.matchesSelector=ye.test(R=M.matches||M.webkitMatchesSelector||M.mozMatchesSelector||M.oMatchesSelector||M.msMatchesSelector))&&i(function(e){T.disconnectedMatch=R.call(e,"*"),R.call(e,"[s!='']:x"),F.push("!=",oe)}),O=O.length&&new RegExp(O.join("|")),F=F.length&&new RegExp(F.join("|")),t=ye.test(M.compareDocumentPosition),I=t||ye.test(M.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return H=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!T.sortDetached&&t.compareDocumentPosition(e)===n?e===q||e.ownerDocument===$&&I($,e)?-1:t===q||t.ownerDocument===$&&I($,t)?1:A?ee(A,e)-ee(A,t):0:4&n?-1:1)}:function(e,t){if(e===t)return H=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],u=[t];if(!i||!o)return e===q?-1:t===q?1:i?-1:o?1:A?ee(A,e)-ee(A,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?s(a[r],u[r]):a[r]===$?-1:u[r]===$?1:0},q):q},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==q&&L(e),n=n.replace(le,"='$1']"),T.matchesSelector&&P&&!Y[n+" "]&&(!F||!F.test(n))&&(!O||!O.test(n)))try{var r=R.call(e,n);if(r||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,q,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==q&&L(e),I(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==q&&L(e);var n=C.attrHandle[t.toLowerCase()],r=n&&V.call(C.attrHandle,t.toLowerCase())?n(e,t,!P):void 0;return void 0!==r?r:T.attributes||!P?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(we,Te)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(H=!T.detectDuplicates,A=!T.sortStable&&e.slice(0),e.sort(U),H){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return A=null,e},S=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=S(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=S(t);return n},C=t.selectors={cacheLength:50,createPseudo:r,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,be),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,be),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,be).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=X[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&X(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,p,h,g=o!==s?"nextSibling":"previousSibling",y=t.parentNode,v=a&&t.nodeName.toLowerCase(),m=!u&&!a,x=!1;if(y){if(o){for(;g;){for(d=t;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?y.firstChild:y.lastChild],s&&m){for(d=y,f=d[W]||(d[W]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),c=l[e]||[],p=c[0]===B&&c[1],x=p&&c[2],d=p&&y.childNodes[p];d=++p&&d&&d[g]||(x=p=0)||h.pop();)if(1===d.nodeType&&++x&&d===t){l[e]=[B,p,x];break}}else if(m&&(d=t,f=d[W]||(d[W]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),c=l[e]||[],p=c[0]===B&&c[1],x=p),x===!1)for(;(d=++p&&d&&d[g]||(x=p=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++x||(m&&(f=d[W]||(d[W]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),l[e]=[B,x]),d!==t)););return x-=i,x===r||x%r===0&&x/r>=0}}},PSEUDO:function(e,n){var i,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[W]?o(n):o.length>1?(i=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){
for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=D(e.replace(ae,"$1"));return i[W]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(xe,be),function(t){return(t.textContent||t.innerText||S(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,be).toLowerCase(),function(t){var n;do if(n=P?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===M},focus:function(e){return e===q.activeElement&&(!q.hasFocus||q.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=u(w);return d.prototype=C.filters=C.pseudos,C.setFilters=new d,E=t.tokenize=function(e,n){var r,i,o,s,a,u,c,l=z[e+" "];if(l)return n?0:l.slice(0);for(a=e,u=[],c=C.preFilter;a;){r&&!(i=ue.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=ce.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ae," ")}),a=a.slice(r.length));for(s in C.filter)!(i=pe[s].exec(a))||c[s]&&!(i=c[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):z(e,u).slice(0)},D=t.compile=function(e,t){var n,r=[],i=[],o=Y[e+" "];if(!o){for(t||(t=E(e)),n=t.length;n--;)o=x(t[n]),o[W]?r.push(o):i.push(o);o=Y(e,b(i,r)),o.selector=e}return o},N=t.select=function(e,t,n,r){var i,o,s,a,u,c="function"==typeof e&&e,l=!r&&E(e=c.selector||e);if(n=n||[],1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&9===t.nodeType&&P&&C.relative[o[1].type]){if(t=(C.find.ID(s.matches[0].replace(xe,be),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=pe.needsContext.test(e)?0:o.length;i--&&(s=o[i],!C.relative[a=s.type]);)if((u=C.find[a])&&(r=u(s.matches[0].replace(xe,be),me.test(o[0].type)&&f(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(c||D(e,l))(r,t,!P,n,!t||me.test(e)&&f(t.parentNode)||t),n},T.sortStable=W.split("").sort(U).join("")===W,T.detectDuplicates=!!H,L(),T.sortDetached=i(function(e){return 1&e.compareDocumentPosition(q.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),T.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(o);be.find=ke,be.expr=ke.selectors,be.expr[":"]=be.expr.pseudos,be.uniqueSort=be.unique=ke.uniqueSort,be.text=ke.getText,be.isXMLDoc=ke.isXML,be.contains=ke.contains,be.escapeSelector=ke.escape;var Ee=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&be(e).is(n))break;r.push(e)}return r},De=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ne=be.expr.match.needsContext,je=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ae=/^.[^:#\[\.,]*$/;be.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?be.find.matchesSelector(r,e)?[r]:[]:be.find.matches(e,be.grep(t,function(e){return 1===e.nodeType}))},be.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(be(e).filter(function(){for(t=0;t<r;t++)if(be.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)be.find(e,i[t],n);return r>1?be.uniqueSort(n):n},filter:function(e){return this.pushStack(l(this,e||[],!1))},not:function(e){return this.pushStack(l(this,e||[],!0))},is:function(e){return!!l(this,"string"==typeof e&&Ne.test(e)?be(e):e||[],!1).length}});var He,Le=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,qe=be.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||He,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Le.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof be?t[0]:t,be.merge(this,be.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:ae,!0)),je.test(r[1])&&be.isPlainObject(t))for(r in t)be.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=ae.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):be.isFunction(e)?void 0!==n.ready?n.ready(e):e(be):be.makeArray(e,this)};qe.prototype=be.fn,He=be(ae);var Me=/^(?:parents|prev(?:Until|All))/,Pe={children:!0,contents:!0,next:!0,prev:!0};be.fn.extend({has:function(e){var t=be(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(be.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&be(e);if(!Ne.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&be.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?be.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?de.call(be(e),this[0]):de.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(be.uniqueSort(be.merge(this.get(),be(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),be.each({parent:function nn(e){var nn=e.parentNode;return nn&&11!==nn.nodeType?nn:null},parents:function(e){return Ee(e,"parentNode")},parentsUntil:function(e,t,n){return Ee(e,"parentNode",n)},next:function(e){return f(e,"nextSibling")},prev:function(e){return f(e,"previousSibling")},nextAll:function(e){return Ee(e,"nextSibling")},prevAll:function(e){return Ee(e,"previousSibling")},nextUntil:function(e,t,n){return Ee(e,"nextSibling",n)},prevUntil:function(e,t,n){return Ee(e,"previousSibling",n)},siblings:function(e){return De((e.parentNode||{}).firstChild,e)},children:function(e){return De(e.firstChild)},contents:function(e){return c(e,"iframe")?e.contentDocument:(c(e,"template")&&(e=e.content||e),be.merge([],e.childNodes))}},function(e,t){be.fn[e]=function(n,r){var i=be.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=be.filter(r,i)),this.length>1&&(Pe[e]||be.uniqueSort(i),Me.test(e)&&i.reverse()),this.pushStack(i)}});var Oe=/[^\x20\t\r\n\f]+/g;be.Callbacks=function(e){e="string"==typeof e?d(e):be.extend({},e);var t,n,r,i,o=[],s=[],a=-1,u=function(){for(i=i||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)o[a].apply(n[0],n[1])===!1&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function r(t){be.each(t,function(t,n){be.isFunction(n)?e.unique&&c.has(n)||o.push(n):n&&n.length&&"string"!==be.type(n)&&r(n)})}(arguments),n&&!t&&u()),this},remove:function(){return be.each(arguments,function(e,t){for(var n;(n=be.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(e){return e?be.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},be.extend({Deferred:function(e){var t=[["notify","progress",be.Callbacks("memory"),be.Callbacks("memory"),2],["resolve","done",be.Callbacks("once memory"),be.Callbacks("once memory"),0,"resolved"],["reject","fail",be.Callbacks("once memory"),be.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return r.then(null,e)},pipe:function(){var e=arguments;return be.Deferred(function(n){be.each(t,function(t,r){var i=be.isFunction(e[r[4]])&&e[r[4]];s[r[1]](function(){var e=i&&i.apply(this,arguments);e&&be.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,n,r){function s(e,t,n,r){return function(){var u=this,c=arguments,l=function(){var o,l;if(!(e<a)){if(o=n.apply(u,c),o===t.promise())throw new TypeError("Thenable self-resolution");l=o&&("object"===("undefined"==typeof o?"undefined":i(o))||"function"==typeof o)&&o.then,be.isFunction(l)?r?l.call(o,s(a,t,p,r),s(a,t,h,r)):(a++,l.call(o,s(a,t,p,r),s(a,t,h,r),s(a,t,p,t.notifyWith))):(n!==p&&(u=void 0,c=[o]),(r||t.resolveWith)(u,c))}},f=r?l:function(){try{l()}catch(r){be.Deferred.exceptionHook&&be.Deferred.exceptionHook(r,f.stackTrace),e+1>=a&&(n!==h&&(u=void 0,c=[r]),t.rejectWith(u,c))}};e?f():(be.Deferred.getStackHook&&(f.stackTrace=be.Deferred.getStackHook()),o.setTimeout(f))}}var a=0;return be.Deferred(function(i){t[0][3].add(s(0,i,be.isFunction(r)?r:p,i.notifyWith)),t[1][3].add(s(0,i,be.isFunction(e)?e:p)),t[2][3].add(s(0,i,be.isFunction(n)?n:h))}).promise()},promise:function(e){return null!=e?be.extend(e,r):r}},s={};return be.each(t,function(e,i){var o=i[2],a=i[5];r[i[1]]=o.add,a&&o.add(function(){n=a},t[3-e][2].disable,t[0][2].lock),o.add(i[3].fire),s[i[0]]=function(){return s[i[0]+"With"](this===s?void 0:this,arguments),this},s[i[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,n=t,r=Array(n),i=ce.call(arguments),o=be.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?ce.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(g(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||be.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)g(i[n],s(n),o.reject);return o.promise()}});var Fe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;be.Deferred.exceptionHook=function(e,t){o.console&&o.console.warn&&e&&Fe.test(e.name)&&o.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},be.readyException=function(e){o.setTimeout(function(){throw e})};var Re=be.Deferred();be.fn.ready=function(e){return Re.then(e)["catch"](function(e){be.readyException(e)}),this},be.extend({isReady:!1,readyWait:1,ready:function(e){(e===!0?--be.readyWait:be.isReady)||(be.isReady=!0,e!==!0&&--be.readyWait>0||Re.resolveWith(ae,[be]))}}),be.ready.then=Re.then,"complete"===ae.readyState||"loading"!==ae.readyState&&!ae.documentElement.doScroll?o.setTimeout(be.ready):(ae.addEventListener("DOMContentLoaded",y),o.addEventListener("load",y));var Ie=function rn(e,t,n,r,i,o,s){var a=0,u=e.length,c=null==n;if("object"===be.type(n)){i=!0;for(a in n)rn(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,be.isFunction(r)||(s=!0),c&&(s?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(be(e),n)})),t))for(;a<u;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:c?t.call(e):u?t(e[0],n):o},We=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};v.uid=1,v.prototype={cache:function(e){var t=e[this.expando];return t||(t={},We(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[be.camelCase(t)]=n;else for(r in t)i[be.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][be.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){Array.isArray(t)?t=t.map(be.camelCase):(t=be.camelCase(t),t=t in r?[t]:t.match(Oe)||[]),n=t.length;for(;n--;)delete r[t[n]]}(void 0===t||be.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!be.isEmptyObject(t)}};var $e=new v,Be=new v,_e=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Xe=/[A-Z]/g;be.extend({hasData:function(e){return Be.hasData(e)||$e.hasData(e)},data:function(e,t,n){return Be.access(e,t,n)},removeData:function(e,t){Be.remove(e,t)},_data:function(e,t,n){return $e.access(e,t,n)},_removeData:function(e,t){$e.remove(e,t)}}),be.fn.extend({data:function on(e,t){var n,r,on,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(on=Be.get(o),1===o.nodeType&&!$e.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=be.camelCase(r.slice(5)),x(o,r,on[r])));$e.set(o,"hasDataAttrs",!0)}return on}return"object"===("undefined"==typeof e?"undefined":i(e))?this.each(function(){Be.set(this,e)}):Ie(this,function(t){var n;if(o&&void 0===t){if(n=Be.get(o,e),void 0!==n)return n;if(n=x(o,e),void 0!==n)return n}else this.each(function(){Be.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Be.remove(this,e)})}}),be.extend({queue:function sn(e,t,n){var sn;if(e)return t=(t||"fx")+"queue",sn=$e.get(e,t),n&&(!sn||Array.isArray(n)?sn=$e.access(e,t,be.makeArray(n)):sn.push(n)),sn||[]},dequeue:function(e,t){t=t||"fx";var n=be.queue(e,t),r=n.length,i=n.shift(),o=be._queueHooks(e,t),s=function(){be.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return $e.get(e,n)||$e.access(e,n,{empty:be.Callbacks("once memory").add(function(){$e.remove(e,[t+"queue",n])})})}}),be.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?be.queue(this[0],e):void 0===t?this:this.each(function(){var n=be.queue(this,e,t);be._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&be.dequeue(this,e)})},dequeue:function(e){return this.each(function(){be.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=be.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=$e.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var ze=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ye=new RegExp("^(?:([+-])=|)("+ze+")([a-z%]*)$","i"),Ue=["Top","Right","Bottom","Left"],Ve=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&be.contains(e.ownerDocument,e)&&"none"===be.css(e,"display")},Ge=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},Qe={};be.fn.extend({show:function(){return T(this,!0)},hide:function(){return T(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ve(this)?be(this).show():be(this).hide()})}});var Je=/^(?:checkbox|radio)$/i,Ke=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ze=/^$|\/(?:java|ecma)script/i,et={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};et.optgroup=et.option,et.tbody=et.tfoot=et.colgroup=et.caption=et.thead,et.th=et.td;var tt=/<|&#?\w+;/;!function(){var e=ae.createDocumentFragment(),t=e.appendChild(ae.createElement("div")),n=ae.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),me.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",me.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var nt=ae.documentElement,rt=/^key/,it=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ot=/^([^.]*)(?:\.(.+)|)/;be.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,c,l,f,d,p,h,g,y=$e.get(e);if(y)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&be.find.matchesSelector(nt,i),n.guid||(n.guid=be.guid++),(u=y.events)||(u=y.events={}),(s=y.handle)||(s=y.handle=function(t){return"undefined"!=typeof be&&be.event.triggered!==t.type?be.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Oe)||[""],c=t.length;c--;)a=ot.exec(t[c])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p&&(f=be.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=be.event.special[p]||{},l=be.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&be.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=u[p])||(d=u[p]=[],d.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(p,s)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,l):d.push(l),be.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,c,l,f,d,p,h,g,y=$e.hasData(e)&&$e.get(e);if(y&&(u=y.events)){for(t=(t||"").match(Oe)||[""],c=t.length;c--;)if(a=ot.exec(t[c])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p){for(f=be.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,d=u[p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)l=d[o],!i&&g!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(d.splice(o,1),l.selector&&d.delegateCount--,f.remove&&f.remove.call(e,l));s&&!d.length&&(f.teardown&&f.teardown.call(e,h,y.handle)!==!1||be.removeEvent(e,p,y.handle),delete u[p])}else for(p in u)be.event.remove(e,p+t[c],n,r,!0);be.isEmptyObject(u)&&$e.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=be.event.fix(e),u=new Array(arguments.length),c=($e.get(this,"events")||{})[a.type]||[],l=be.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,a)!==!1){for(s=be.event.handlers.call(this,a,c),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,r=((be.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u),void 0!==r&&(a.result=r)===!1&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||c.disabled!==!0)){for(o=[],s={},n=0;n<u;n++)r=t[n],i=r.selector+" ",void 0===s[i]&&(s[i]=r.needsContext?be(i,this).index(c)>-1:be.find(i,this,null,[c]).length),s[i]&&o.push(r);o.length&&a.push({elem:c,handlers:o})}return c=this,u<t.length&&a.push({elem:c,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(be.Event.prototype,e,{enumerable:!0,configurable:!0,get:be.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[be.expando]?e:new be.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==N()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===N()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&c(this,"input"))return this.click(),!1},_default:function(e){return c(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},be.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},be.Event=function(e,t){return this instanceof be.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?E:D,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&be.extend(this,t),this.timeStamp=e&&e.timeStamp||be.now(),void(this[be.expando]=!0)):new be.Event(e,t)},be.Event.prototype={constructor:be.Event,isDefaultPrevented:D,isPropagationStopped:D,isImmediatePropagationStopped:D,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=E,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=E,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=E,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},be.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&rt.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&it.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},be.event.addProp),be.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){be.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||be.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),be.fn.extend({on:function(e,t,n,r){return j(this,e,t,n,r)},one:function(e,t,n,r){return j(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,be(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"===("undefined"==typeof e?"undefined":i(e))){for(o in e)this.off(o,t,e[o]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=D),this.each(function(){be.event.remove(this,e,n,t)})}});var st=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,at=/<script|<style|<link/i,ut=/checked\s*(?:[^=]|=\s*.checked.)/i,ct=/^true\/(.*)/,lt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;be.extend({htmlPrefilter:function(e){return e.replace(st,"<$1></$2>")},clone:function an(e,t,n){var r,i,o,s,an=e.cloneNode(!0),a=be.contains(e.ownerDocument,e);if(!(me.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||be.isXMLDoc(e)))for(s=C(an),o=C(e),r=0,i=o.length;r<i;r++)M(o[r],s[r]);if(t)if(n)for(o=o||C(e),s=s||C(an),r=0,i=o.length;r<i;r++)q(o[r],s[r]);else q(e,an);return s=C(an,"script"),s.length>0&&S(s,!a&&C(e,"script")),an},cleanData:function(e){for(var t,n,r,i=be.event.special,o=0;void 0!==(n=e[o]);o++)if(We(n)){if(t=n[$e.expando]){if(t.events)for(r in t.events)i[r]?be.event.remove(n,r):be.removeEvent(n,r,t.handle);n[$e.expando]=void 0}n[Be.expando]&&(n[Be.expando]=void 0)}}}),be.fn.extend({detach:function(e){return O(this,e,!0)},remove:function(e){return O(this,e)},text:function(e){return Ie(this,function(e){return void 0===e?be.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=A(this,e);t.appendChild(e)}})},prepend:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=A(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(be.cleanData(C(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return be.clone(this,e,t)})},html:function(e){return Ie(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!at.test(e)&&!et[(Ke.exec(e)||["",""])[1].toLowerCase()]){e=be.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(be.cleanData(C(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return P(this,arguments,function(t){var n=this.parentNode;be.inArray(this,e)<0&&(be.cleanData(C(this)),n&&n.replaceChild(t,this))},e)}}),be.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){be.fn[e]=function(e){for(var n,r=[],i=be(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),be(i[s])[t](n),fe.apply(r,n.get());return this.pushStack(r)}});var ft=/^margin/,dt=new RegExp("^("+ze+")(?!px)[a-z%]+$","i"),pt=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=o),t.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",nt.appendChild(s);var e=o.getComputedStyle(a);t="1%"!==e.top,i="2px"===e.marginLeft,n="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,nt.removeChild(s),a=null}}var t,n,r,i,s=ae.createElement("div"),a=ae.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",me.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),be.extend(me,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return e(),n},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),i}}))}();var ht=/^(none|table(?!-c[ea]).+)/,gt=/^--/,yt={position:"absolute",visibility:"hidden",display:"block"},vt={letterSpacing:"0",fontWeight:"400"},mt=["Webkit","Moz","ms"],xt=ae.createElement("div").style;be.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=F(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function un(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,s,a,u=be.camelCase(t),c=gt.test(t),un=e.style;return c||(t=W(u)),a=be.cssHooks[t]||be.cssHooks[u],void 0===n?a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:un[t]:(s="undefined"==typeof n?"undefined":i(n),"string"===s&&(o=Ye.exec(n))&&o[1]&&(n=b(e,t,o),s="number"),null!=n&&n===n&&("number"===s&&(n+=o&&o[3]||(be.cssNumber[u]?"":"px")),me.clearCloneStyle||""!==n||0!==t.indexOf("background")||(un[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(c?un.setProperty(t,n):un[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=be.camelCase(t),u=gt.test(t);return u||(t=W(a)),s=be.cssHooks[t]||be.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=F(e,t,r)),"normal"===i&&t in vt&&(i=vt[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),be.each(["height","width"],function(e,t){be.cssHooks[t]={get:function(e,n,r){if(n)return!ht.test(be.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?_(e,t,r):Ge(e,yt,function(){return _(e,t,r)})},set:function(e,n,r){var i,o=r&&pt(e),s=r&&B(e,t,r,"border-box"===be.css(e,"boxSizing",!1,o),o);return s&&(i=Ye.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=be.css(e,t)),$(e,n,s)}}}),be.cssHooks.marginLeft=R(me.reliableMarginLeft,function(e,t){if(t)return(parseFloat(F(e,"marginLeft"))||e.getBoundingClientRect().left-Ge(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),be.each({margin:"",padding:"",border:"Width"},function(e,t){be.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Ue[r]+t]=o[r]||o[r-2]||o[0];return i}},ft.test(e)||(be.cssHooks[e+t].set=$)}),be.fn.extend({css:function(e,t){return Ie(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=pt(e),i=t.length;s<i;s++)o[t[s]]=be.css(e,t[s],!1,r);return o}return void 0!==n?be.style(e,t,n):be.css(e,t)},e,t,arguments.length>1)}}),be.Tween=X,X.prototype={constructor:X,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||be.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(be.cssNumber[n]?"":"px")},cur:function(){var e=X.propHooks[this.prop];return e&&e.get?e.get(this):X.propHooks._default.get(this)},run:function(e){var t,n=X.propHooks[this.prop];return this.options.duration?this.pos=t=be.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):X.propHooks._default.set(this),this}},X.prototype.init.prototype=X.prototype,X.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=be.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){be.fx.step[e.prop]?be.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[be.cssProps[e.prop]]&&!be.cssHooks[e.prop]?e.elem[e.prop]=e.now:be.style(e.elem,e.prop,e.now+e.unit)}}},X.propHooks.scrollTop=X.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},be.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},be.fx=X.prototype.init,be.fx.step={};var bt,wt,Tt=/^(?:toggle|show|hide)$/,Ct=/queueHooks$/;be.Animation=be.extend(J,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return b(n.elem,e,Ye.exec(t),n),n}]},tweener:function(e,t){be.isFunction(e)?(t=e,e=["*"]):e=e.match(Oe);for(var n,r=0,i=e.length;r<i;r++)n=e[r],J.tweeners[n]=J.tweeners[n]||[],J.tweeners[n].unshift(t)},prefilters:[G],prefilter:function(e,t){t?J.prefilters.unshift(e):J.prefilters.push(e)}}),be.speed=function(e,t,n){var r=e&&"object"===("undefined"==typeof e?"undefined":i(e))?be.extend({},e):{
complete:n||!n&&t||be.isFunction(e)&&e,duration:e,easing:n&&t||t&&!be.isFunction(t)&&t};return be.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in be.fx.speeds?r.duration=be.fx.speeds[r.duration]:r.duration=be.fx.speeds._default),null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){be.isFunction(r.old)&&r.old.call(this),r.queue&&be.dequeue(this,r.queue)},r},be.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ve).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=be.isEmptyObject(e),o=be.speed(t,n,r),s=function(){var t=J(this,be.extend({},e),o);(i||$e.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=be.timers,s=$e.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&Ct.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||be.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=$e.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=be.timers,s=r?r.length:0;for(n.finish=!0,be.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),be.each(["toggle","show","hide"],function(e,t){var n=be.fn[t];be.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(U(t,!0),e,r,i)}}),be.each({slideDown:U("show"),slideUp:U("hide"),slideToggle:U("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){be.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),be.timers=[],be.fx.tick=function(){var e,t=0,n=be.timers;for(bt=be.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||be.fx.stop(),bt=void 0},be.fx.timer=function(e){be.timers.push(e),be.fx.start()},be.fx.interval=13,be.fx.start=function(){wt||(wt=!0,z())},be.fx.stop=function(){wt=null},be.fx.speeds={slow:600,fast:200,_default:400},be.fn.delay=function(e,t){return e=be.fx?be.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=o.setTimeout(t,e);n.stop=function(){o.clearTimeout(r)}})},function(){var e=ae.createElement("input"),t=ae.createElement("select"),n=t.appendChild(ae.createElement("option"));e.type="checkbox",me.checkOn=""!==e.value,me.optSelected=n.selected,e=ae.createElement("input"),e.value="t",e.type="radio",me.radioValue="t"===e.value}();var St,kt=be.expr.attrHandle;be.fn.extend({attr:function(e,t){return Ie(this,be.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){be.removeAttr(this,e)})}}),be.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?be.prop(e,t,n):(1===o&&be.isXMLDoc(e)||(i=be.attrHooks[t.toLowerCase()]||(be.expr.match.bool.test(t)?St:void 0)),void 0!==n?null===n?void be.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=be.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!me.radioValue&&"radio"===t&&c(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(Oe);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),St={set:function(e,t,n){return t===!1?be.removeAttr(e,n):e.setAttribute(n,n),n}},be.each(be.expr.match.bool.source.match(/\w+/g),function(e,t){var n=kt[t]||be.find.attr;kt[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=kt[s],kt[s]=i,i=null!=n(e,t,r)?s:null,kt[s]=o),i}});var Et=/^(?:input|select|textarea|button)$/i,Dt=/^(?:a|area)$/i;be.fn.extend({prop:function(e,t){return Ie(this,be.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[be.propFix[e]||e]})}}),be.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&be.isXMLDoc(e)||(t=be.propFix[t]||t,i=be.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=be.find.attr(e,"tabindex");return t?parseInt(t,10):Et.test(e.nodeName)||Dt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),me.optSelected||(be.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),be.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){be.propFix[this.toLowerCase()]=this}),be.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,u=0;if(be.isFunction(e))return this.each(function(t){be(this).addClass(e.call(this,t,Z(this)))});if("string"==typeof e&&e)for(t=e.match(Oe)||[];n=this[u++];)if(i=Z(n),r=1===n.nodeType&&" "+K(i)+" "){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a=K(r),i!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,u=0;if(be.isFunction(e))return this.each(function(t){be(this).removeClass(e.call(this,t,Z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Oe)||[];n=this[u++];)if(i=Z(n),r=1===n.nodeType&&" "+K(i)+" "){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");a=K(r),i!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n="undefined"==typeof e?"undefined":i(e);return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):be.isFunction(e)?this.each(function(n){be(this).toggleClass(e.call(this,n,Z(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=be(this),o=e.match(Oe)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=Z(this),t&&$e.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":$e.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+K(Z(n))+" ").indexOf(t)>-1)return!0;return!1}});var Nt=/\r/g;be.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=be.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,be(this).val()):e,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=be.map(i,function(e){return null==e?"":e+""})),t=be.valHooks[this.type]||be.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=be.valHooks[i.type]||be.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(Nt,""):null==n?"":n)}}}),be.extend({valHooks:{option:{get:function(e){var t=be.find.attr(e,"value");return null!=t?t:K(be.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:i.length;for(r=o<0?u:s?o:0;r<u;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!c(n.parentNode,"optgroup"))){if(t=be(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=be.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=be.inArray(be.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),be.each(["radio","checkbox"],function(){be.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=be.inArray(be(e).val(),t)>-1}},me.checkOn||(be.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var jt=/^(?:focusinfocus|focusoutblur)$/;be.extend(be.event,{trigger:function(e,t,n,r){var s,a,u,c,l,f,d,p=[n||ae],h=ge.call(e,"type")?e.type:e,g=ge.call(e,"namespace")?e.namespace.split("."):[];if(a=u=n=n||ae,3!==n.nodeType&&8!==n.nodeType&&!jt.test(h+be.event.triggered)&&(h.indexOf(".")>-1&&(g=h.split("."),h=g.shift(),g.sort()),l=h.indexOf(":")<0&&"on"+h,e=e[be.expando]?e:new be.Event(h,"object"===("undefined"==typeof e?"undefined":i(e))&&e),e.isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:be.makeArray(t,[e]),d=be.event.special[h]||{},r||!d.trigger||d.trigger.apply(n,t)!==!1)){if(!r&&!d.noBubble&&!be.isWindow(n)){for(c=d.delegateType||h,jt.test(c+h)||(a=a.parentNode);a;a=a.parentNode)p.push(a),u=a;u===(n.ownerDocument||ae)&&p.push(u.defaultView||u.parentWindow||o)}for(s=0;(a=p[s++])&&!e.isPropagationStopped();)e.type=s>1?c:d.bindType||h,f=($e.get(a,"events")||{})[e.type]&&$e.get(a,"handle"),f&&f.apply(a,t),f=l&&a[l],f&&f.apply&&We(a)&&(e.result=f.apply(a,t),e.result===!1&&e.preventDefault());return e.type=h,r||e.isDefaultPrevented()||d._default&&d._default.apply(p.pop(),t)!==!1||!We(n)||l&&be.isFunction(n[h])&&!be.isWindow(n)&&(u=n[l],u&&(n[l]=null),be.event.triggered=h,n[h](),be.event.triggered=void 0,u&&(n[l]=u)),e.result}},simulate:function(e,t,n){var r=be.extend(new be.Event,n,{type:e,isSimulated:!0});be.event.trigger(r,null,t)}}),be.fn.extend({trigger:function(e,t){return this.each(function(){be.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return be.event.trigger(e,t,n,!0)}}),be.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){be.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),be.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),me.focusin="onfocusin"in o,me.focusin||be.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){be.event.simulate(t,e.target,be.event.fix(e))};be.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=$e.access(r,t);i||r.addEventListener(e,n,!0),$e.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=$e.access(r,t)-1;i?$e.access(r,t,i):(r.removeEventListener(e,n,!0),$e.remove(r,t))}}});var At=o.location,Ht=be.now(),Lt=/\?/;be.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new o.DOMParser).parseFromString(e,"text/xml")}catch(n){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||be.error("Invalid XML: "+e),t};var qt=/\[\]$/,Mt=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;be.param=function(e,t){var n,r=[],i=function(e,t){var n=be.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!be.isPlainObject(e))be.each(e,function(){i(this.name,this.value)});else for(n in e)ee(n,e[n],t,i);return r.join("&")},be.fn.extend({serialize:function(){return be.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=be.prop(this,"elements");return e?be.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!be(this).is(":disabled")&&Ot.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!Je.test(e))}).map(function(e,t){var n=be(this).val();return null==n?null:Array.isArray(n)?be.map(n,function(e){return{name:t.name,value:e.replace(Mt,"\r\n")}}):{name:t.name,value:n.replace(Mt,"\r\n")}}).get()}});var Ft=/%20/g,Rt=/#.*$/,It=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,$t=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Bt=/^(?:GET|HEAD)$/,_t=/^\/\//,Xt={},zt={},Yt="*/".concat("*"),Ut=ae.createElement("a");Ut.href=At.href,be.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:$t.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Yt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":be.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?re(re(e,be.ajaxSettings),t):re(be.ajaxSettings,e)},ajaxPrefilter:te(Xt),ajaxTransport:te(zt),ajax:function(e,t){function n(e,t,n,i){var u,l,p,h,w,T=t;f||(f=!0,c&&o.clearTimeout(c),r=void 0,a=i||"",S.readyState=e>0?4:0,u=e>=200&&e<300||304===e,n&&(h=ie(g,S,n)),h=oe(g,h,S,u),u?(g.ifModified&&(w=S.getResponseHeader("Last-Modified"),w&&(be.lastModified[s]=w),w=S.getResponseHeader("etag"),w&&(be.etag[s]=w)),204===e||"HEAD"===g.type?T="nocontent":304===e?T="notmodified":(T=h.state,l=h.data,p=h.error,u=!p)):(p=T,!e&&T||(T="error",e<0&&(e=0))),S.status=e,S.statusText=(t||T)+"",u?m.resolveWith(y,[l,T,S]):m.rejectWith(y,[S,T,p]),S.statusCode(b),b=void 0,d&&v.trigger(u?"ajaxSuccess":"ajaxError",[S,g,u?l:p]),x.fireWith(y,[S,T]),d&&(v.trigger("ajaxComplete",[S,g]),--be.active||be.event.trigger("ajaxStop")))}"object"===("undefined"==typeof e?"undefined":i(e))&&(t=e,e=void 0),t=t||{};var r,s,a,u,c,l,f,d,p,h,g=be.ajaxSetup({},t),y=g.context||g,v=g.context&&(y.nodeType||y.jquery)?be(y):be.event,m=be.Deferred(),x=be.Callbacks("once memory"),b=g.statusCode||{},w={},T={},C="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(f){if(!u)for(u={};t=Wt.exec(a);)u[t[1].toLowerCase()]=t[2];t=u[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return f?a:null},setRequestHeader:function(e,t){return null==f&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==f&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)S.always(e[S.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),n(0,t),this}};if(m.promise(S),g.url=((e||g.url||At.href)+"").replace(_t,At.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(Oe)||[""],null==g.crossDomain){l=ae.createElement("a");try{l.href=g.url,l.href=l.href,g.crossDomain=Ut.protocol+"//"+Ut.host!=l.protocol+"//"+l.host}catch(k){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=be.param(g.data,g.traditional)),ne(Xt,g,t,S),f)return S;d=be.event&&g.global,d&&0===be.active++&&be.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Bt.test(g.type),s=g.url.replace(Rt,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Ft,"+")):(h=g.url.slice(s.length),g.data&&(s+=(Lt.test(s)?"&":"?")+g.data,delete g.data),g.cache===!1&&(s=s.replace(It,"$1"),h=(Lt.test(s)?"&":"?")+"_="+Ht++ +h),g.url=s+h),g.ifModified&&(be.lastModified[s]&&S.setRequestHeader("If-Modified-Since",be.lastModified[s]),be.etag[s]&&S.setRequestHeader("If-None-Match",be.etag[s])),(g.data&&g.hasContent&&g.contentType!==!1||t.contentType)&&S.setRequestHeader("Content-Type",g.contentType),S.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Yt+"; q=0.01":""):g.accepts["*"]);for(p in g.headers)S.setRequestHeader(p,g.headers[p]);if(g.beforeSend&&(g.beforeSend.call(y,S,g)===!1||f))return S.abort();if(C="abort",x.add(g.complete),S.done(g.success),S.fail(g.error),r=ne(zt,g,t,S)){if(S.readyState=1,d&&v.trigger("ajaxSend",[S,g]),f)return S;g.async&&g.timeout>0&&(c=o.setTimeout(function(){S.abort("timeout")},g.timeout));try{f=!1,r.send(w,n)}catch(k){if(f)throw k;n(-1,k)}}else n(-1,"No Transport");return S},getJSON:function(e,t,n){return be.get(e,t,n,"json")},getScript:function(e,t){return be.get(e,void 0,t,"script")}}),be.each(["get","post"],function(e,t){be[t]=function(e,n,r,i){return be.isFunction(n)&&(i=i||r,r=n,n=void 0),be.ajax(be.extend({url:e,type:t,dataType:i,data:n,success:r},be.isPlainObject(e)&&e))}}),be._evalUrl=function(e){return be.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},be.fn.extend({wrapAll:function(e){var t;return this[0]&&(be.isFunction(e)&&(e=e.call(this[0])),t=be(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return be.isFunction(e)?this.each(function(t){be(this).wrapInner(e.call(this,t))}):this.each(function(){var t=be(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=be.isFunction(e);return this.each(function(n){be(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){be(this).replaceWith(this.childNodes)}),this}}),be.expr.pseudos.hidden=function(e){return!be.expr.pseudos.visible(e)},be.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},be.ajaxSettings.xhr=function(){try{return new o.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Gt=be.ajaxSettings.xhr();me.cors=!!Gt&&"withCredentials"in Gt,me.ajax=Gt=!!Gt,be.ajaxTransport(function(e){var t,n;if(me.cors||Gt&&!e.crossDomain)return{send:function(r,i){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Vt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&o.setTimeout(function(){t&&n()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(u){if(t)throw u}},abort:function(){t&&t()}}}),be.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),be.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return be.globalEval(e),e}}}),be.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),be.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=be("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),ae.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Qt=[],Jt=/(=)\?(?=&|$)|\?\?/;be.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||be.expando+"_"+Ht++;return this[e]=!0,e}}),be.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,s,a=e.jsonp!==!1&&(Jt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=be.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Jt,"$1"+r):e.jsonp!==!1&&(e.url+=(Lt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||be.error(r+" was not called"),s[0]},e.dataTypes[0]="json",i=o[r],o[r]=function(){s=arguments},n.always(function(){void 0===i?be(o).removeProp(r):o[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(r)),s&&be.isFunction(i)&&i(s[0]),s=i=void 0}),"script"}),me.createHTMLDocument=function(){var e=ae.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),be.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(me.createHTMLDocument?(t=ae.implementation.createHTMLDocument(""),r=t.createElement("base"),r.href=ae.location.href,t.head.appendChild(r)):t=ae),i=je.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=k([e],t,o),o&&o.length&&be(o).remove(),be.merge([],i.childNodes))},be.fn.load=function(e,t,n){var r,o,s,a=this,u=e.indexOf(" ");return u>-1&&(r=K(e.slice(u)),e=e.slice(0,u)),be.isFunction(t)?(n=t,t=void 0):t&&"object"===("undefined"==typeof t?"undefined":i(t))&&(o="POST"),a.length>0&&be.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){s=arguments,a.html(r?be("<div>").append(be.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},be.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){be.fn[t]=function(e){return this.on(t,e)}}),be.expr.pseudos.animated=function(e){return be.grep(be.timers,function(t){return e===t.elem}).length},be.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,c,l=be.css(e,"position"),f=be(e),d={};"static"===l&&(e.style.position="relative"),a=f.offset(),o=be.css(e,"top"),u=be.css(e,"left"),c=("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1,c?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),be.isFunction(t)&&(t=t.call(e,n,be.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+i),"using"in t?t.using.call(e,d):f.css(d)}},be.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){be.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===be.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),c(e[0],"html")||(r=e.offset()),r={top:r.top+be.css(e[0],"borderTopWidth",!0),left:r.left+be.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-be.css(n,"marginTop",!0),left:t.left-r.left-be.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===be.css(e,"position");)e=e.offsetParent;return e||nt})}}),be.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;be.fn[e]=function(r){return Ie(this,function(e,r,i){var o;return be.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),be.each(["top","left"],function(e,t){be.cssHooks[t]=R(me.pixelPosition,function(e,n){if(n)return n=F(e,t),dt.test(n)?be(e).position()[t]+"px":n})}),be.each({Height:"height",Width:"width"},function(e,t){be.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){be.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(i===!0||o===!0?"margin":"border");return Ie(this,function(t,n,i){var o;return be.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?be.css(t,n,a):be.style(t,n,i,a)},t,s?i:void 0,s)}})}),be.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),be.holdReady=function(e){e?be.readyWait++:be.ready(!0)},be.isArray=Array.isArray,be.parseJSON=JSON.parse,be.nodeName=c,n=[],r=function(){return be}.apply(t,n),!(void 0!==r&&(e.exports=r));var Kt=o.jQuery,Zt=o.$;return be.noConflict=function(e){return o.$===be&&(o.$=Zt),e&&o.jQuery===be&&(o.jQuery=Kt),be},s||(o.jQuery=o.$=be),be})}).call(t,n(6)(e))},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var i=n(2),o=r(i),s=n(0),a=r(s);n(7),(0,a["default"])(function(){a["default"].scrollify({section:".panel",setHeights:!0});var e=new o["default"](document.querySelector("#nokey"));e.startAnimation();var t=document.querySelector("#work-panel");document.querySelector("#panel-toggle").addEventListener("click",function(){t.classList.toggle("open")})})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(3),a=r(s),u=n(4),c=r(u),l=n(5),f=r(l),d=function(e){},p=function(){function e(t){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{pointCount:50,pointSpeed:50};i(this,e),this.pointSpeed=r.pointSpeed;var o=r.pointCount;this.canvas=t,this.context=this.canvas.getContext("2d"),this.rect=new c["default"](0,0,parseFloat(window.innerWidth),parseFloat(window.innerHeight)),this.canvas.setAttribute("width",this.rect.Width),this.canvas.setAttribute("height",this.rect.Height),this.maxDistance=260,this.points=[];for(var s=0;s<o;s++){var u=this.getRandomPos(!0);this.points.push({pos:u,velocity:this.getRandomVelocity(u),color:new f["default"](230,230,230,1),r:2,phase:10*Math.random()})}this.mousePoint=Object.assign({},this.points[0]),this.mousePoint.alpha=0,this.points.push(this.mousePoint),this.lastFrame=Date.now(),window.addEventListener("resize",this.resize.bind(this)),window.addEventListener("mouseenter",function(){n.mousePoint.velocity=new a["default"](0,0)}),window.addEventListener("mouseleave",function(){n.mousePoint.pos=new a["default"](0,0)}),window.addEventListener("mousemove",function(e){n.mousePoint.pos.X=e.clientX,n.mousePoint.pos.Y=e.clientY})}return o(e,[{key:"getRandomPos",value:function(e){var t=new a["default"](Math.random()*this.rect.width,Math.random()*this.rect.height);if(e)return t;switch(Math.ceil(4*Math.random())-1){case 0:t.x=0;break;case 1:t.x=this.rect.width;break;case 2:t.y=0;break;case 3:t.y=this.rect.height}return t}},{key:"getRandomVelocity",value:function(e){var t=new a["default"](Math.random(),Math.random());return this.rect.inside(e,-10)||(t.x*=0===e.x?1:-1,t.y*=0===e.y?1:-1),t}},{key:"update",value:function(e){var t=this;this.points.forEach(function(n){n.pos.X+=n.velocity.X/t.pointSpeed*e,n.pos.Y+=n.velocity.Y/t.pointSpeed*e,t.rect.inside(n.pos,50)||(n.pos=t.getRandomPos(),n.velocity=t.getRandomVelocity(n.pos),n.phase=10*Math.random()),n.phase+=.003,n.color.Alpha=Math.abs(Math.cos(n.phase))})}},{key:"resize",value:function(){d("Resize called."),this.rect.Width=parseFloat(document.body.clientWidth),this.rect.Height=parseFloat(window.innerHeight),this.canvas.setAttribute("width",this.rect.Width),this.canvas.setAttribute("height",this.rect.Height),d("The size of the bounding rect is: ("+this.rect.X+", "+this.rect.Y+", "+this.rect.Width+", "+this.rect.Height+")")}},{key:"render",value:function(){var e=Date.now()-this.lastFrame;this.context.clearRect(this.rect.X,this.rect.Y,this.rect.Width,this.rect.Height),this.drawPoints(),this.drawLines(),this.update(e),this.lastFrame=Date.now(),window.requestAnimationFrame(this.render.bind(this))}},{key:"drawPoints",value:function(){var e=this;this.points.forEach(function(t){if(!t.hasOwnProperty("type")){var n=t.pos;e.context.fillStyle="rgba("+t.color.Red+", "+t.color.Green+", "+t.color.Blue+", "+t.color.Alpha+")",e.context.beginPath(),e.context.arc(n.X,n.Y,t.r,0,2*Math.PI,!0),e.context.closePath(),e.context.fill()}})}},{key:"drawLines",value:function(){for(var e=void 0,t=void 0,n=0;n<this.points.length;n++)for(var r=n+1;r<this.points.length;r++){var i=this.points[n],o=this.points[r];e=Math.sqrt(Math.pow(i.pos.X-o.pos.X,2)+Math.pow(i.pos.Y-o.pos.Y,2))/this.maxDistance,e<1&&(t=1-e,this.context.strokeStyle="rgba(150, 150, 150, "+t+")",this.context.lineWidth=.8,this.context.beginPath(),this.context.moveTo(i.pos.X,i.pos.Y),this.context.lineTo(o.pos.X,o.pos.Y),this.context.stroke(),this.context.closePath())}}},{key:"startAnimation",value:function(){this.resize(),this.render()}}]),e}();t["default"]=p},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t,n){r(this,e),this.x=t,this.y=n}return i(e,[{key:"X",set:function(e){this.x=e},get:function(){return this.x}},{key:"Y",set:function(e){this.y=e},get:function(){return this.y}}]),e}();t["default"]=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t,n,i,o){r(this,e),this.x=t,this.y=n,this.width=i,this.height=o}return i(e,[{key:"inside",value:function(e,t){return e.X>this.x-t&&e.X<this.x+this.width+t&&e.Y>this.y-t&&e.Y<this.y+this.height+t}},{key:"X",get:function(){return this.x},set:function(e){this.x=e}},{key:"Y",get:function(){return this.y},set:function(e){this.y=e}},{key:"Width",get:function(){return this.width},set:function(e){this.width=e}},{key:"Height",get:function(){return this.height},set:function(e){this.height=e}}]),e}();t["default"]=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t,n,i,o){r(this,e),this.r=t,this.g=n,this.b=i,this.a=o}return i(e,[{key:"Red",get:function(){return this.r},set:function(e){this.r=e}},{key:"Green",get:function(){return this.g},set:function(e){this.g=e}},{key:"Blue",get:function(){return this.b},set:function(e){this.b=e}},{key:"Alpha",get:function(){return this.a},set:function(e){this.a=e}}]),e}();t["default"]=o},function(e,t,n){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";var r,i,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(o,s){r=[n(0)],i=function(e){return s(e,o,o.document)}.apply(t,r),!(void 0!==i&&(e.exports=i))}("undefined"!=typeof window?window:void 0,function(e,t,n,r){function i(){return C.height()+P.offset}function s(n,r,o,s){if(b===n&&(o=!1),N===!0)return!0;if(y[n]){if(k=!1,H===!0&&(P.afterRender(),H=!1),o&&"function"==typeof P.before&&P.before(n,v)===!1)return!0;
if(w=1,q=g[n],H===!1&&b>n&&s===!1&&m[n]&&(f=i(),w=parseInt(v[n].outerHeight()/f),q=parseInt(g[n])+(v[n].outerHeight()-f)),P.updateHash&&P.sectionName&&(H!==!0||0!==n))if(history.pushState)try{history.replaceState(null,null,y[n])}catch(a){t.console&&console.warn("Scrollify warning: Page must be hosted to manipulate the hash value.")}else t.location.hash=y[n];if(b=n,r)e(P.target).stop().scrollTop(q),o&&P.after(n,v);else{if(E=!0,e().velocity?e(P.target).stop().velocity("scroll",{duration:P.scrollSpeed,easing:P.easing,offset:q,mobileHA:!1}):e(P.target).stop().animate({scrollTop:q},P.scrollSpeed,P.easing),t.location.hash.length&&P.sectionName&&t.console)try{e(t.location.hash).length&&console.warn("Scrollify warning: ID matches hash value - this will cause the page to anchor.")}catch(a){}e(P.target).promise().done(function(){E=!1,H=!1,o&&P.after(n,v)})}}}function a(e){function t(t){for(var n=0,r=e.slice(Math.max(e.length-t,1)),i=0;i<r.length;i++)n+=r[i];return Math.ceil(n/t)}var n=t(10),r=t(70);return n>=r}function u(e,t){for(var n=y.length;n>=0;n--)"string"==typeof e?y[n]===e&&(x=n,s(n,t,!0,!0)):n===e&&(x=n,s(n,t,!0,!0))}var c,l,f,d,p,h,g=[],y=[],v=[],m=[],x=0,b=0,w=1,T=!1,C=e(t),S=C.scrollTop(),k=!1,E=!1,D=!1,N=!1,j=[],A=(new Date).getTime(),H=!0,L=!1,q=0,M="onwheel"in n?"wheel":n.onmousewheel!==r?"mousewheel":"DOMMouseScroll",P={section:".section",sectionName:"section-name",interstitialSection:"",easing:"easeOutExpo",scrollSpeed:1100,offset:0,scrollbars:!0,target:"html,body",standardScrollElements:!1,setHeights:!0,overflowScroll:!0,updateHash:!0,touchScroll:!0,before:function(){},after:function(){},afterResize:function(){},afterRender:function(){}},O=function(r){function o(t){e().velocity?e(P.target).stop().velocity("scroll",{duration:P.scrollSpeed,easing:P.easing,offset:t,mobileHA:!1}):e(P.target).stop().animate({scrollTop:t},P.scrollSpeed,P.easing)}function u(t){t&&(S=C.scrollTop());var n=P.section;m=[],P.interstitialSection.length&&(n+=","+P.interstitialSection),P.scrollbars===!1&&(P.overflowScroll=!1),f=i(),e(n).each(function(t){var n=e(this);P.setHeights?n.is(P.interstitialSection)?m[t]=!1:n.css("height","auto").outerHeight()<f||"hidden"===n.css("overflow")?(n.css({height:f}),m[t]=!1):(n.css({height:n.height()}),P.overflowScroll?m[t]=!0:m[t]=!1):n.outerHeight()<f||P.overflowScroll===!1?m[t]=!1:m[t]=!0}),t&&C.scrollTop(S)}function b(n,r){var i=P.section;P.interstitialSection.length&&(i+=","+P.interstitialSection),g=[],y=[],v=[],e(i).each(function(n){var r=e(this);n>0?g[n]=parseInt(r.offset().top)+P.offset:g[n]=parseInt(r.offset().top),P.sectionName&&r.data(P.sectionName)?y[n]="#"+r.data(P.sectionName).toString().replace(/ /g,"-"):r.is(P.interstitialSection)===!1?y[n]="#"+(n+1):(y[n]="#",n===e(i).length-1&&n>1&&(g[n]=g[n-1]+(parseInt(e(e(i)[n-1]).outerHeight())-parseInt(e(t).height()))+parseInt(r.outerHeight()))),v[n]=r;try{e(y[n]).length&&t.console&&console.warn("Scrollify warning: Section names can't match IDs - this will cause the browser to anchor.")}catch(o){}t.location.hash===y[n]&&(x=n,T=!0)}),!0===n&&s(x,!1,!1,!1)}function H(){return!m[x]||(S=C.scrollTop(),!(S>parseInt(g[x])))}function q(){return!m[x]||(S=C.scrollTop(),f=i(),!(S<parseInt(g[x])+(v[x].outerHeight()-f)-28))}L=!0,e.easing.easeOutExpo=function(e,t,n,r,i){return t==i?n+r:r*(-Math.pow(2,-10*t/i)+1)+n},d={handleMousedown:function(){return N===!0||(k=!1,void(D=!1))},handleMouseup:function(){return N===!0||(k=!0,void(D&&d.calculateNearest(!1,!0)))},handleScroll:function(){return N===!0||(c&&clearTimeout(c),void(c=setTimeout(function(){return D=!0,k!==!1&&(k=!1,void d.calculateNearest(!1,!0))},200)))},calculateNearest:function(e,t){S=C.scrollTop();for(var n,r=1,i=g.length,o=0,a=Math.abs(g[0]-S);r<i;r++)n=Math.abs(g[r]-S),n<a&&(a=n,o=r);(q()&&o>x||H())&&(x=o,s(o,e,t,!1))},wheelHandler:function(n){if(N===!0)return!0;if(P.standardScrollElements&&(e(n.target).is(P.standardScrollElements)||e(n.target).closest(P.standardScrollElements).length))return!0;m[x]||n.preventDefault();var r=(new Date).getTime();n=n||t.event;var i=n.originalEvent.wheelDelta||-n.originalEvent.deltaY||-n.originalEvent.detail,o=Math.max(-1,Math.min(1,i));if(j.length>149&&j.shift(),j.push(Math.abs(i)),r-A>200&&(j=[]),A=r,E)return!1;if(o<0){if(x<g.length-1&&q()){if(!a(j))return!1;n.preventDefault(),x++,E=!0,s(x,!1,!0,!1)}}else if(o>0&&x>0&&H()){if(!a(j))return!1;n.preventDefault(),x--,E=!0,s(x,!1,!0,!1)}},keyHandler:function(e){return N===!0||n.activeElement.readOnly===!1||E!==!0&&void(38==e.keyCode||33==e.keyCode?x>0&&H()&&(e.preventDefault(),x--,s(x,!1,!0,!1)):40!=e.keyCode&&34!=e.keyCode||x<g.length-1&&q()&&(e.preventDefault(),x++,s(x,!1,!0,!1)))},init:function(){P.scrollbars?(C.on("mousedown",d.handleMousedown),C.on("mouseup",d.handleMouseup),C.on("scroll",d.handleScroll)):e("body").css({overflow:"hidden"}),C.on(M,d.wheelHandler),C.on("keydown",d.keyHandler)}},p={touches:{touchstart:{y:-1,x:-1},touchmove:{y:-1,x:-1},touchend:!1,direction:"undetermined"},options:{distance:30,timeGap:800,timeStamp:(new Date).getTime()},touchHandler:function(t){if(N===!0)return!0;if(P.standardScrollElements&&(e(t.target).is(P.standardScrollElements)||e(t.target).closest(P.standardScrollElements).length))return!0;var n;if("undefined"!=typeof t&&"undefined"!=typeof t.touches)switch(n=t.touches[0],t.type){case"touchstart":p.touches.touchstart.y=n.pageY,p.touches.touchmove.y=-1,p.touches.touchstart.x=n.pageX,p.touches.touchmove.x=-1,p.options.timeStamp=(new Date).getTime(),p.touches.touchend=!1;case"touchmove":p.touches.touchmove.y=n.pageY,p.touches.touchmove.x=n.pageX,p.touches.touchstart.y!==p.touches.touchmove.y&&Math.abs(p.touches.touchstart.y-p.touches.touchmove.y)>Math.abs(p.touches.touchstart.x-p.touches.touchmove.x)&&(t.preventDefault(),p.touches.direction="y",p.options.timeStamp+p.options.timeGap<(new Date).getTime()&&0==p.touches.touchend&&(p.touches.touchend=!0,p.touches.touchstart.y>-1&&Math.abs(p.touches.touchmove.y-p.touches.touchstart.y)>p.options.distance&&(p.touches.touchstart.y<p.touches.touchmove.y?p.up():p.down())));break;case"touchend":p.touches[t.type]===!1&&(p.touches[t.type]=!0,p.touches.touchstart.y>-1&&p.touches.touchmove.y>-1&&"y"===p.touches.direction&&(Math.abs(p.touches.touchmove.y-p.touches.touchstart.y)>p.options.distance&&(p.touches.touchstart.y<p.touches.touchmove.y?p.up():p.down()),p.touches.touchstart.y=-1,p.touches.touchstart.x=-1,p.touches.direction="undetermined"))}},down:function(){x<g.length&&(q()&&x<g.length-1?(x++,s(x,!1,!0,!1)):(f=i(),Math.floor(v[x].height()/f)>w?(o(parseInt(g[x])+f*w),w+=1):o(parseInt(g[x])+(v[x].outerHeight()-f))))},up:function(){x>=0&&(H()&&x>0?(x--,s(x,!1,!0,!1)):w>2?(f=i(),w-=1,o(parseInt(g[x])+f*w)):(w=1,o(parseInt(g[x]))))},init:function(){if(n.addEventListener&&P.touchScroll){var e={passive:!1};n.addEventListener("touchstart",p.touchHandler,e),n.addEventListener("touchmove",p.touchHandler,e),n.addEventListener("touchend",p.touchHandler,e)}}},h={refresh:function(e,t){clearTimeout(l),l=setTimeout(function(){u(!0),b(t,!1),e&&P.afterResize()},400)},handleUpdate:function(){h.refresh(!1,!1)},handleResize:function(){h.refresh(!0,!1)},handleOrientation:function(){h.refresh(!0,!0)}},P=e.extend(P,r),u(!1),b(!1,!0),!0===T?s(x,!1,!0,!0):setTimeout(function(){d.calculateNearest(!0,!1)},200),g.length&&(d.init(),p.init(),C.on("resize",h.handleResize),n.addEventListener&&t.addEventListener("orientationchange",h.handleOrientation,!1))};return O.move=function(t){return t!==r&&(t.originalEvent&&(t=e(this).attr("href")),void u(t,!1))},O.instantMove=function(e){return e!==r&&void u(e,!0)},O.next=function(){x<y.length&&(x+=1,s(x,!1,!0,!0))},O.previous=function(){x>0&&(x-=1,s(x,!1,!0,!0))},O.instantNext=function(){x<y.length&&(x+=1,s(x,!0,!0,!0))},O.instantPrevious=function(){x>0&&(x-=1,s(x,!0,!0,!0))},O.destroy=function(){return!!L&&(P.setHeights&&e(P.section).each(function(){e(this).css("height","auto")}),C.off("resize",h.handleResize),P.scrollbars&&(C.off("mousedown",d.handleMousedown),C.off("mouseup",d.handleMouseup),C.off("scroll",d.handleScroll)),C.off(M,d.wheelHandler),C.off("keydown",d.keyHandler),n.addEventListener&&P.touchScroll&&(n.removeEventListener("touchstart",p.touchHandler,!1),n.removeEventListener("touchmove",p.touchHandler,!1),n.removeEventListener("touchend",p.touchHandler,!1)),g=[],y=[],v=[],void(m=[]))},O.update=function(){return!!L&&void h.handleUpdate()},O.current=function(){return v[x]},O.currentIndex=function(){return x},O.disable=function(){N=!0},O.enable=function(){N=!1,L&&d.calculateNearest(!1,!1)},O.isDisabled=function(){return N},O.setOptions=function(n){return!!L&&void("object"===("undefined"==typeof n?"undefined":o(n))?(P=e.extend(P,n),h.handleUpdate()):t.console&&console.warn("Scrollify warning: setOptions expects an object."))},e.scrollify=O,O})}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/*!
 * Krig.io
 * Krig.io webpage, using the fastshell boilerplate.
 * https://krig.io
 * @author Krig.io
 * @version 0.0.1
 * Copyright 2018. UNLICENSED licensed.
 */
!function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t["default"]}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=127)}([function(t,e,n){"use strict";var r=n(2),i=n(21),o=n(12),u=n(13),s=n(18),c="prototype",a=function f(t,e,n){var a,l,h,p,d=t&f.F,v=t&f.G,y=t&f.S,g=t&f.P,m=t&f.B,b=v?r:y?r[e]||(r[e]={}):(r[e]||{})[c],x=v?i:i[e]||(i[e]={}),w=x[c]||(x[c]={});v&&(n=e);for(a in n)l=!d&&b&&void 0!==b[a],h=(l?b:n)[a],p=m&&l?s(h,r):g&&"function"==typeof h?s(Function.call,h):h,b&&u(b,a,h,t&f.U),x[a]!=h&&o(x,a,p),g&&w[a]!=h&&(w[a]=h)};r.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e,n){"use strict";var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){"use strict";var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e,n){"use strict";t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t){return"object"===("undefined"==typeof t?"undefined":r(t))?null!==t:"function"==typeof t}},function(t,e,n){"use strict";var r=n(49)("wks"),i=n(32),o=n(2).Symbol,u="function"==typeof o,s=t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))};s.store=r},function(t,e,n){"use strict";t.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";var r=n(1),i=n(93),o=n(22),u=Object.defineProperty;e.f=n(6)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return u(t,e,n)}catch(s){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){"use strict";var r=n(24),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){"use strict";var r=n(23);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,n){"use strict";var r=n(7),i=n(31);t.exports=n(6)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){"use strict";var r=n(2),i=n(12),o=n(11),u=n(32)("src"),s="toString",c=Function[s],a=(""+c).split(s);n(21).inspectSource=function(t){return c.call(t)},(t.exports=function(t,e,n,s){var c="function"==typeof n;c&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(c&&(o(n,u)||i(n,u,t[e]?""+t[e]:a.join(String(e)))),t===r?t[e]=n:s?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,s,function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,e,n){"use strict";var r=n(0),i=n(3),o=n(23),u=/"/g,s=function(t,e,n,r){var i=String(o(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(r).replace(u,"&quot;")+'"'),s+">"+i+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(s),r(r.P+r.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e,n){"use strict";var r=n(46),i=n(23);t.exports=function(t){return r(i(t))}},function(t,e,n){"use strict";var r=n(47),i=n(31),o=n(15),u=n(22),s=n(11),c=n(93),a=Object.getOwnPropertyDescriptor;e.f=n(6)?a:function(t,e){if(t=o(t),e=u(e,!0),c)try{return a(t,e)}catch(n){}if(s(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e,n){"use strict";var r=n(11),i=n(9),o=n(65)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){"use strict";var r=n(10);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){"use strict";var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,n){"use strict";var r=t.exports={version:"2.5.3"};"number"==typeof __e&&(__e=r)},function(t,e,n){"use strict";var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){"use strict";t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){"use strict";var r=Math.ceil,i=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?i:r)(t)}},function(t,e,n){"use strict";var r=n(0),i=n(21),o=n(3);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",u)}},function(t,e,n){"use strict";var r=n(18),i=n(46),o=n(9),u=n(8),s=n(82);t.exports=function(t,e){var n=1==t,c=2==t,a=3==t,f=4==t,l=6==t,h=5==t||l,p=e||s;return function(e,s,d){for(var v,y,g=o(e),m=i(g),b=r(s,d,3),x=u(m.length),w=0,S=n?p(e,x):c?p(e,0):void 0;x>w;w++)if((h||w in m)&&(v=m[w],y=b(v,w,g),t))if(n)S[w]=y;else if(y)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:S.push(v)}else if(f)return!1;return l?-1:a||f?f:S}}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};if(n(6)){var i=n(33),o=n(2),u=n(3),s=n(0),c=n(59),a=n(88),f=n(18),l=n(39),h=n(31),p=n(12),d=n(41),v=n(24),y=n(8),g=n(119),m=n(35),b=n(22),x=n(11),w=n(48),S=n(4),E=n(9),T=n(79),_=n(36),k=n(17),j=n(37).f,C=n(81),O=n(32),A=n(5),M=n(26),N=n(50),P=n(57),F=n(84),L=n(44),D=n(54),I=n(38),R=n(83),H=n(109),q=n(7),W=n(16),B=q.f,U=W.f,$=o.RangeError,G=o.TypeError,z=o.Uint8Array,V="ArrayBuffer",X="Shared"+V,Y="BYTES_PER_ELEMENT",J="prototype",K=Array[J],Q=a.ArrayBuffer,Z=a.DataView,tt=M(0),et=M(2),nt=M(3),rt=M(4),it=M(5),ot=M(6),ut=N(!0),st=N(!1),ct=F.values,at=F.keys,ft=F.entries,lt=K.lastIndexOf,ht=K.reduce,pt=K.reduceRight,dt=K.join,vt=K.sort,yt=K.slice,gt=K.toString,mt=K.toLocaleString,bt=A("iterator"),xt=A("toStringTag"),wt=O("typed_constructor"),St=O("def_constructor"),Et=c.CONSTR,Tt=c.TYPED,_t=c.VIEW,kt="Wrong length!",jt=M(1,function(t,e){return Nt(P(t,t[St]),e)}),Ct=u(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),Ot=!!z&&!!z[J].set&&u(function(){new z(1).set({})}),At=function(t,e){var n=v(t);if(n<0||n%e)throw $("Wrong offset!");return n},Mt=function(t){if(S(t)&&Tt in t)return t;throw G(t+" is not a typed array!")},Nt=function(t,e){if(!(S(t)&&wt in t))throw G("It is not a typed array constructor!");return new t(e)},Pt=function(t,e){return Ft(P(t,t[St]),e)},Ft=function(t,e){for(var n=0,r=e.length,i=Nt(t,r);r>n;)i[n]=e[n++];return i},Lt=function(t,e,n){B(t,e,{get:function(){return this._d[n]}})},Dt=function(t){var e,n,r,i,o,u,s=E(t),c=arguments.length,a=c>1?arguments[1]:void 0,l=void 0!==a,h=C(s);if(void 0!=h&&!T(h)){for(u=h.call(s),r=[],e=0;!(o=u.next()).done;e++)r.push(o.value);s=r}for(l&&c>2&&(a=f(a,arguments[2],2)),e=0,n=y(s.length),i=Nt(this,n);n>e;e++)i[e]=l?a(s[e],e):s[e];return i},It=function(){for(var t=0,e=arguments.length,n=Nt(this,e);e>t;)n[t]=arguments[t++];return n},Rt=!!z&&u(function(){mt.call(new z(1))}),Ht=function(){return mt.apply(Rt?yt.call(Mt(this)):Mt(this),arguments)},qt={copyWithin:function(t,e){return H.call(Mt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return rt(Mt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return R.apply(Mt(this),arguments)},filter:function(t){return Pt(this,et(Mt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return it(Mt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return ot(Mt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){tt(Mt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return st(Mt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return ut(Mt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return dt.apply(Mt(this),arguments)},lastIndexOf:function(t){return lt.apply(Mt(this),arguments)},map:function(t){return jt(Mt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ht.apply(Mt(this),arguments)},reduceRight:function(t){return pt.apply(Mt(this),arguments)},reverse:function(){for(var t,e=this,n=Mt(e).length,r=Math.floor(n/2),i=0;i<r;)t=e[i],e[i++]=e[--n],e[n]=t;return e},some:function(t){return nt(Mt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return vt.call(Mt(this),t)},subarray:function(t,e){var n=Mt(this),r=n.length,i=m(t,r);return new(P(n,n[St]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,y((void 0===e?r:m(e,r))-i))}},Wt=function(t,e){return Pt(this,yt.call(Mt(this),t,e))},Bt=function(t){Mt(this);var e=At(arguments[1],1),n=this.length,r=E(t),i=y(r.length),o=0;if(i+e>n)throw $(kt);for(;o<i;)this[e+o]=r[o++]},Ut={entries:function(){return ft.call(Mt(this))},keys:function(){return at.call(Mt(this))},values:function(){return ct.call(Mt(this))}},$t=function(t,e){return S(t)&&t[Tt]&&"symbol"!=("undefined"==typeof e?"undefined":r(e))&&e in t&&String(+e)==String(e)},Gt=function(t,e){return $t(t,e=b(e,!0))?h(2,t[e]):U(t,e)},zt=function(t,e,n){return!($t(t,e=b(e,!0))&&S(n)&&x(n,"value"))||x(n,"get")||x(n,"set")||n.configurable||x(n,"writable")&&!n.writable||x(n,"enumerable")&&!n.enumerable?B(t,e,n):(t[e]=n.value,t)};Et||(W.f=Gt,q.f=zt),s(s.S+s.F*!Et,"Object",{getOwnPropertyDescriptor:Gt,defineProperty:zt}),u(function(){gt.call({})})&&(gt=mt=function(){return dt.call(this)});var Vt=d({},qt);d(Vt,Ut),p(Vt,bt,Ut.values),d(Vt,{slice:Wt,set:Bt,constructor:function(){},toString:gt,toLocaleString:Ht}),Lt(Vt,"buffer","b"),Lt(Vt,"byteOffset","o"),Lt(Vt,"byteLength","l"),Lt(Vt,"length","e"),B(Vt,xt,{get:function(){return this[Tt]}}),t.exports=function(t,e,n,r){r=!!r;var a=t+(r?"Clamped":"")+"Array",f="get"+t,h="set"+t,d=o[a],v=d||{},m=d&&k(d),b=!d||!c.ABV,x={},E=d&&d[J],T=function(t,n){var r=t._d;return r.v[f](n*e+r.o,Ct)},C=function(t,n,i){var o=t._d;r&&(i=(i=Math.round(i))<0?0:i>255?255:255&i),o.v[h](n*e+o.o,i,Ct)},O=function(t,e){B(t,e,{get:function(){return T(this,e)},set:function(t){return C(this,e,t)},enumerable:!0})};b?(d=n(function(t,n,r,i){l(t,d,a,"_d");var o,u,s,c,f=0,h=0;if(S(n)){if(!(n instanceof Q||(c=w(n))==V||c==X))return Tt in n?Ft(d,n):Dt.call(d,n);o=n,h=At(r,e);var v=n.byteLength;if(void 0===i){if(v%e)throw $(kt);if(u=v-h,u<0)throw $(kt)}else if(u=y(i)*e,u+h>v)throw $(kt);s=u/e}else s=g(n),u=s*e,o=new Q(u);for(p(t,"_d",{b:o,o:h,l:u,e:s,v:new Z(o)});f<s;)O(t,f++)}),E=d[J]=_(Vt),p(E,"constructor",d)):u(function(){d(1)})&&u(function(){new d((-1))})&&D(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=n(function(t,n,r,i){l(t,d,a);var o;return S(n)?n instanceof Q||(o=w(n))==V||o==X?void 0!==i?new v(n,At(r,e),i):void 0!==r?new v(n,At(r,e)):new v(n):Tt in n?Ft(d,n):Dt.call(d,n):new v(g(n))}),tt(m!==Function.prototype?j(v).concat(j(m)):j(v),function(t){t in d||p(d,t,v[t])}),d[J]=E,i||(E.constructor=d));var A=E[bt],M=!!A&&("values"==A.name||void 0==A.name),N=Ut.values;p(d,wt,!0),p(E,Tt,a),p(E,_t,!0),p(E,St,d),(r?new d(1)[xt]==a:xt in E)||B(E,xt,{get:function(){return a}}),x[a]=d,s(s.G+s.W+s.F*(d!=v),x),s(s.S,a,{BYTES_PER_ELEMENT:e}),s(s.S+s.F*u(function(){v.of.call(d,1)}),a,{from:Dt,of:It}),Y in E||p(E,Y,e),s(s.P,a,qt),I(a),s(s.P+s.F*Ot,a,{set:Bt}),s(s.P+s.F*!M,a,Ut),i||E.toString==gt||(E.toString=gt),s(s.P+s.F*u(function(){new d(1).slice()}),a,{slice:Wt}),s(s.P+s.F*(u(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!u(function(){E.toLocaleString.call([1,2])})),a,{toLocaleString:Ht}),L[a]=M?A:N,i||M||p(E,bt,N)}}else t.exports=function(){}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(114),o=n(0),u=n(49)("metadata"),s=u.store||(u.store=new(n(117))),c=function(t,e,n){var r=s.get(t);if(!r){if(!n)return;s.set(t,r=new i)}var o=r.get(e);if(!o){if(!n)return;r.set(e,o=new i)}return o},a=function(t,e,n){var r=c(e,n,!1);return void 0!==r&&r.has(t)},f=function(t,e,n){var r=c(e,n,!1);return void 0===r?void 0:r.get(t)},l=function(t,e,n,r){c(n,r,!0).set(t,e)},h=function(t,e){var n=c(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},p=function(t){return void 0===t||"symbol"==("undefined"==typeof t?"undefined":r(t))?t:String(t)},d=function(t){o(o.S,"Reflect",t)};t.exports={store:s,map:c,has:a,get:f,set:l,keys:h,key:p,exp:d}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(32)("meta"),o=n(4),u=n(11),s=n(7).f,c=0,a=Object.isExtensible||function(){return!0},f=!n(3)(function(){return a(Object.preventExtensions({}))}),l=function(t){s(t,i,{value:{i:"O"+ ++c,w:{}}})},h=function(t,e){if(!o(t))return"symbol"==("undefined"==typeof t?"undefined":r(t))?t:("string"==typeof t?"S":"P")+t;if(!u(t,i)){if(!a(t))return"F";if(!e)return"E";l(t)}return t[i].i},p=function(t,e){if(!u(t,i)){if(!a(t))return!0;if(!e)return!1;l(t)}return t[i].w},d=function(t){return f&&v.NEED&&a(t)&&!u(t,i)&&l(t),t},v=t.exports={KEY:i,NEED:!1,fastKey:h,getWeak:p,onFreeze:d}},function(t,e,n){"use strict";var r=n(5)("unscopables"),i=Array.prototype;void 0==i[r]&&n(12)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,e,n){"use strict";t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";var r=0,i=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+i).toString(36))}},function(t,e,n){"use strict";t.exports=!1},function(t,e,n){"use strict";var r=n(95),i=n(66);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){"use strict";var r=n(24),i=Math.max,o=Math.min;t.exports=function(t,e){return t=r(t),t<0?i(t+e,0):o(t,e)}},function(t,e,n){"use strict";var r=n(1),i=n(96),o=n(66),u=n(65)("IE_PROTO"),s=function(){},c="prototype",a=function(){var t,e=n(63)("iframe"),r=o.length,i="<",u=">";for(e.style.display="none",n(67).appendChild(e),e.src="javascript:",t=e.contentWindow.document,t.open(),t.write(i+"script"+u+"document.F=Object"+i+"/script"+u),t.close(),a=t.F;r--;)delete a[c][o[r]];return a()};t.exports=Object.create||function(t,e){var n;return null!==t?(s[c]=r(t),n=new s,s[c]=null,n[u]=t):n=a(),void 0===e?n:i(n,e)}},function(t,e,n){"use strict";var r=n(95),i=n(66).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){"use strict";var r=n(2),i=n(7),o=n(6),u=n(5)("species");t.exports=function(t){var e=r[t];o&&e&&!e[u]&&i.f(e,u,{configurable:!0,get:function(){return this}})}},function(t,e,n){"use strict";t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){"use strict";var r=n(18),i=n(107),o=n(79),u=n(1),s=n(8),c=n(81),a={},f={},l=t.exports=function(t,e,n,l,h){var p,d,v,y,g=h?function(){return t}:c(t),m=r(n,l,e?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(p=s(t.length);p>b;b++)if(y=e?m(u(d=t[b])[0],d[1]):m(t[b]),y===a||y===f)return y}else for(v=g.call(t);!(d=v.next()).done;)if(y=i(v,m,d.value,e),y===a||y===f)return y};l.BREAK=a,l.RETURN=f},function(t,e,n){"use strict";var r=n(13);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e,n){"use strict";var r=n(7).f,i=n(11),o=n(5)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){"use strict";var r=n(0),i=n(23),o=n(3),u=n(69),s="["+u+"]",c="​",a=RegExp("^"+s+s+"*"),f=RegExp(s+s+"*$"),l=function(t,e,n){var i={},s=o(function(){return!!u[t]()||c[t]()!=c}),a=i[t]=s?e(h):u[t];n&&(i[n]=a),r(r.P+r.F*s,"String",i)},h=l.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(a,"")),2&e&&(t=t.replace(f,"")),t};t.exports=l},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";var r=n(4);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,n){"use strict";var r=n(19);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){"use strict";e.f={}.propertyIsEnumerable},function(t,e,n){"use strict";var r=n(19),i=n(5)("toStringTag"),o="Arguments"==r(function(){return arguments}()),u=function(t,e){try{return t[e]}catch(n){}};t.exports=function(t){var e,n,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=u(e=Object(t),i))?n:o?r(e):"Object"==(s=r(e))&&"function"==typeof e.callee?"Arguments":s}},function(t,e,n){"use strict";var r=n(2),i="__core-js_shared__",o=r[i]||(r[i]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e,n){"use strict";var r=n(15),i=n(8),o=n(35);t.exports=function(t){return function(e,n,u){var s,c=r(e),a=i(c.length),f=o(u,a);if(t&&n!=n){for(;a>f;)if(s=c[f++],s!=s)return!0}else for(;a>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){"use strict";e.f=Object.getOwnPropertySymbols},function(t,e,n){"use strict";var r=n(19);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){"use strict";var r=n(4),i=n(19),o=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,n){"use strict";var r=n(5)("iterator"),i=!1;try{var o=[7][r]();o["return"]=function(){i=!0},Array.from(o,function(){throw 2})}catch(u){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:n=!0}},o[r]=function(){return u},t(o)}catch(s){}return n}},function(t,e,n){"use strict";var r=n(1);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){"use strict";var r=n(12),i=n(13),o=n(3),u=n(23),s=n(5);t.exports=function(t,e,n){var c=s(t),a=n(u,c,""[t]),f=a[0],l=a[1];o(function(){var e={};return e[c]=function(){return 7},7!=""[t](e)})&&(i(String.prototype,t,f),r(RegExp.prototype,c,2==e?function(t,e){return l.call(t,this,e)}:function(t){return l.call(t,this)}))}},function(t,e,n){"use strict";var r=n(1),i=n(10),o=n(5)("species");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||void 0==(n=r(u)[o])?e:i(n)}},function(t,e,n){"use strict";var r=n(2),i=n(0),o=n(13),u=n(41),s=n(29),c=n(40),a=n(39),f=n(4),l=n(3),h=n(54),p=n(42),d=n(70);t.exports=function(t,e,n,v,y,g){var m=r[t],b=m,x=y?"set":"add",w=b&&b.prototype,S={},E=function(t){var e=w[t];o(w,t,"delete"==t?function(t){return!(g&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof b&&(g||w.forEach&&!l(function(){(new b).entries().next()}))){var T=new b,_=T[x](g?{}:-0,1)!=T,k=l(function(){T.has(1)}),j=h(function(t){new b(t)}),C=!g&&l(function(){for(var t=new b,e=5;e--;)t[x](e,e);return!t.has(-0)});j||(b=e(function(e,n){a(e,b,t);var r=d(new m,e,b);return void 0!=n&&c(n,y,r[x],r),r}),b.prototype=w,w.constructor=b),(k||C)&&(E("delete"),E("has"),y&&E("get")),(C||_)&&E(x),g&&w.clear&&delete w.clear}else b=v.getConstructor(e,t,y,x),u(b.prototype,n),s.NEED=!0;return p(b,t),S[t]=b,i(i.G+i.W+i.F*(b!=m),S),g||v.setStrong(b,t,y),b}},function(t,e,n){"use strict";for(var r,i=n(2),o=n(12),u=n(32),s=u("typed_array"),c=u("view"),a=!(!i.ArrayBuffer||!i.DataView),f=a,l=0,h=9,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<h;)(r=i[p[l++]])?(o(r.prototype,s,!0),o(r.prototype,c,!0)):f=!1;t.exports={ABV:a,CONSTR:f,TYPED:s,VIEW:c}},function(t,e,n){"use strict";t.exports=n(33)||!n(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete n(2)[t]})},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,n){"use strict";var r=n(0),i=n(10),o=n(18),u=n(40);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,s,c=arguments[1];return i(this),e=void 0!==c,e&&i(c),void 0==t?new this:(n=[],e?(r=0,s=o(c,arguments[2],2),u(t,!1,function(t){n.push(s(t,r++))})):u(t,!1,n.push,n),new this(n))}})}},function(t,e,n){"use strict";var r=n(4),i=n(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){"use strict";var r=n(2),i=n(21),o=n(33),u=n(94),s=n(7).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:u.f(t)})}},function(t,e,n){"use strict";var r=n(49)("keys"),i=n(32);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e,n){"use strict";t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){"use strict";var r=n(2).document;t.exports=r&&r.documentElement},function(t,e,n){"use strict";var r=n(4),i=n(1),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{r=n(18)(Function.call,n(16).f(Object.prototype,"__proto__").set,2),r(t,[]),e=!(t instanceof Array)}catch(i){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,e,n){"use strict";t.exports="\t\n\x0B\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){"use strict";var r=n(4),i=n(68).set;t.exports=function(t,e,n){var o,u=e.constructor;return u!==n&&"function"==typeof u&&(o=u.prototype)!==n.prototype&&r(o)&&i&&i(t,o),t}},function(t,e,n){"use strict";var r=n(24),i=n(23);t.exports=function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},function(t,e,n){"use strict";t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e,n){"use strict";var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||r(-2e-17)!=-2e-17?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,e,n){"use strict";var r=n(24),i=n(23);t.exports=function(t){return function(e,n){var o,u,s=String(i(e)),c=r(n),a=s.length;return c<0||c>=a?t?"":void 0:(o=s.charCodeAt(c),o<55296||o>56319||c+1===a||(u=s.charCodeAt(c+1))<56320||u>57343?t?s.charAt(c):o:t?s.slice(c,c+2):(o-55296<<10)+(u-56320)+65536)}}},function(t,e,n){"use strict";var r=n(33),i=n(0),o=n(13),u=n(12),s=n(11),c=n(44),a=n(76),f=n(42),l=n(17),h=n(5)("iterator"),p=!([].keys&&"next"in[].keys()),d="@@iterator",v="keys",y="values",g=function(){return this};t.exports=function(t,e,n,m,b,x,w){a(n,e,m);var S,E,T,_=function(t){if(!p&&t in O)return O[t];switch(t){case v:return function(){return new n(this,t)};case y:return function(){return new n(this,t)}}return function(){return new n(this,t)}},k=e+" Iterator",j=b==y,C=!1,O=t.prototype,A=O[h]||O[d]||b&&O[b],M=!p&&A||_(b),N=b?j?_("entries"):M:void 0,P="Array"==e?O.entries||A:A;if(P&&(T=l(P.call(new t)),T!==Object.prototype&&T.next&&(f(T,k,!0),r||s(T,h)||u(T,h,g))),j&&A&&A.name!==y&&(C=!0,M=function(){return A.call(this)}),r&&!w||!p&&!C&&O[h]||u(O,h,M),c[e]=M,c[k]=g,b)if(S={values:j?M:_(y),keys:x?M:_(v),entries:N},w)for(E in S)E in O||o(O,E,S[E]);else i(i.P+i.F*(p||C),e,S);return S}},function(t,e,n){"use strict";var r=n(36),i=n(31),o=n(42),u={};n(12)(u,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){"use strict";var r=n(53),i=n(23);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},function(t,e,n){"use strict";var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(i){}}return!0}},function(t,e,n){"use strict";var r=n(44),i=n(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,e,n){"use strict";var r=n(7),i=n(31);t.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},function(t,e,n){"use strict";var r=n(48),i=n(5)("iterator"),o=n(44);t.exports=n(21).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){"use strict";var r=n(228);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){"use strict";var r=n(9),i=n(35),o=n(8);t.exports=function(t){for(var e=r(this),n=o(e.length),u=arguments.length,s=i(u>1?arguments[1]:void 0,n),c=u>2?arguments[2]:void 0,a=void 0===c?n:i(c,n);a>s;)e[s++]=t;return e}},function(t,e,n){"use strict";var r=n(30),i=n(110),o=n(44),u=n(15);t.exports=n(75)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):"keys"==e?i(0,n):"values"==e?i(0,t[n]):i(0,[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r,i,o,u=n(18),s=n(100),c=n(67),a=n(63),f=n(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,y=0,g={},m="onreadystatechange",b=function(){var t=+this;if(g.hasOwnProperty(t)){var e=g[t];delete g[t],e()}},x=function(t){b.call(t.data)};h&&p||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return g[++y]=function(){s("function"==typeof t?t:Function(t),e)},r(y),y},p=function(t){delete g[t]},"process"==n(19)(l)?r=function(t){l.nextTick(u(b,t,1))}:v&&v.now?r=function(t){v.now(u(b,t,1))}:d?(i=new d,o=i.port2,i.port1.onmessage=x,r=u(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",x,!1)):r=m in a("script")?function(t){c.appendChild(a("script"))[m]=function(){c.removeChild(this),b.call(t)}}:function(t){setTimeout(u(b,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,n){"use strict";var r=n(2),i=n(85).set,o=r.MutationObserver||r.WebKitMutationObserver,u=r.process,s=r.Promise,c="process"==n(19)(u);t.exports=function(){var t,e,n,a=function(){var r,i;for(c&&(r=u.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(o){throw t?n():e=void 0,o}}e=void 0,r&&r.enter()};if(c)n=function(){u.nextTick(a)};else if(!o||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var f=s.resolve();n=function(){f.then(a)}}else n=function(){i.call(r,a)};else{var l=!0,h=document.createTextNode("");new o(a).observe(h,{characterData:!0}),n=function(){h.data=l=!l}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},function(t,e,n){"use strict";function r(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=i(e),this.reject=i(n)}var i=n(10);t.exports.f=function(t){return new r(t)}},function(t,e,n){"use strict";function r(t,e,n){var r,i,o,u=new Array(n),s=8*n-e-1,c=(1<<s)-1,a=c>>1,f=23===e?W(2,-24)-W(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for(t=q(t),t!=t||t===R?(i=t!=t?1:0,r=c):(r=B(U(t)/$),t*(o=W(2,-r))<1&&(r--,o*=2),t+=r+a>=1?f/o:f*W(2,1-a),t*o>=2&&(r++,o/=2),r+a>=c?(i=0,r=c):r+a>=1?(i=(t*o-1)*W(2,e),r+=a):(i=t*W(2,a-1)*W(2,e),r=0));e>=8;u[l++]=255&i,i/=256,e-=8);for(r=r<<e|i,s+=e;s>0;u[l++]=255&r,r/=256,s-=8);return u[--l]|=128*h,u}function i(t,e,n){var r,i=8*n-e-1,o=(1<<i)-1,u=o>>1,s=i-7,c=n-1,a=t[c--],f=127&a;for(a>>=7;s>0;f=256*f+t[c],c--,s-=8);for(r=f&(1<<-s)-1,f>>=-s,s+=e;s>0;r=256*r+t[c],c--,s-=8);if(0===f)f=1-u;else{if(f===o)return r?NaN:a?-R:R;r+=W(2,e),f-=u}return(a?-1:1)*r*W(2,f-e)}function o(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function u(t){return[255&t]}function s(t){return[255&t,t>>8&255]}function c(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function a(t){return r(t,52,8)}function f(t){return r(t,23,4)}function l(t,e,n){k(t[M],e,{get:function(){return this[n]}})}function h(t,e,n,r){var i=+n,o=T(i);if(o+e>t[Y])throw I(P);var u=t[X]._b,s=o+t[J],c=u.slice(s,s+e);return r?c:c.reverse()}function p(t,e,n,r,i,o){var u=+n,s=T(u);if(s+e>t[Y])throw I(P);for(var c=t[X]._b,a=s+t[J],f=r(+i),l=0;l<e;l++)c[a+l]=f[o?l:e-l-1]}var d=n(2),v=n(6),y=n(33),g=n(59),m=n(12),b=n(41),x=n(3),w=n(39),S=n(24),E=n(8),T=n(119),_=n(37).f,k=n(7).f,j=n(83),C=n(42),O="ArrayBuffer",A="DataView",M="prototype",N="Wrong length!",P="Wrong index!",F=d[O],L=d[A],D=d.Math,I=d.RangeError,R=d.Infinity,H=F,q=D.abs,W=D.pow,B=D.floor,U=D.log,$=D.LN2,G="buffer",z="byteLength",V="byteOffset",X=v?"_b":G,Y=v?"_l":z,J=v?"_o":V;if(g.ABV){if(!x(function(){F(1)})||!x(function(){new F((-1))})||x(function(){return new F,new F(1.5),new F(NaN),F.name!=O})){F=function(t){return w(this,F),new H(T(t))};for(var K,Q=F[M]=H[M],Z=_(H),tt=0;Z.length>tt;)(K=Z[tt++])in F||m(F,K,H[K]);y||(Q.constructor=F)}var et=new L(new F(2)),nt=L[M].setInt8;et.setInt8(0,2147483648),et.setInt8(1,2147483649),!et.getInt8(0)&&et.getInt8(1)||b(L[M],{setInt8:function(t,e){nt.call(this,t,e<<24>>24)},setUint8:function(t,e){nt.call(this,t,e<<24>>24)}},!0)}else F=function(t){w(this,F,O);var e=T(t);this._b=j.call(new Array(e),0),this[Y]=e},L=function(t,e,n){w(this,L,A),w(t,F,A);var r=t[Y],i=S(e);if(i<0||i>r)throw I("Wrong offset!");if(n=void 0===n?r-i:E(n),i+n>r)throw I(N);this[X]=t,this[J]=i,this[Y]=n},v&&(l(F,z,"_l"),l(L,G,"_b"),l(L,z,"_l"),l(L,V,"_o")),b(L[M],{getInt8:function(t){return h(this,1,t)[0]<<24>>24},getUint8:function(t){return h(this,1,t)[0]},getInt16:function(t){var e=h(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=h(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return o(h(this,4,t,arguments[1]))},getUint32:function(t){return o(h(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return i(h(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return i(h(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){p(this,1,t,u,e)},setUint8:function(t,e){p(this,1,t,u,e)},setInt16:function(t,e){p(this,2,t,s,e,arguments[2])},setUint16:function(t,e){p(this,2,t,s,e,arguments[2])},setInt32:function(t,e){p(this,4,t,c,e,arguments[2])},setUint32:function(t,e){p(this,4,t,c,e,arguments[2])},setFloat32:function(t,e){p(this,4,t,f,e,arguments[2])},setFloat64:function(t,e){p(this,8,t,a,e,arguments[2])}});C(F,O),C(L,A),m(L[M],g.VIEW,!0),e[O]=F,e[A]=L},function(t,e,n){"use strict";var r=n(2),i=r.navigator;t.exports=i&&i.userAgent||""},function(t,e,n){"use strict";(function(t){var n,r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(e,n){"object"===i(t)&&"object"===i(t.exports)?t.exports=e.document?n(e,!0):function(t){
if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:void 0,function(o,u){function s(t,e){e=e||st;var n=e.createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function c(t){var e=!!t&&"length"in t&&t.length,n=xt.type(t);return"function"!==n&&!xt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function a(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function f(t,e,n){return xt.isFunction(e)?xt.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?xt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?xt.grep(t,function(t){return ht.call(e,t)>-1!==n}):At.test(e)?xt.filter(e,t,n):(e=xt.filter(e,t),xt.grep(t,function(t){return ht.call(e,t)>-1!==n&&1===t.nodeType}))}function l(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function h(t){var e={};return xt.each(t.match(Dt)||[],function(t,n){e[n]=!0}),e}function p(t){return t}function d(t){throw t}function v(t,e,n,r){var i;try{t&&xt.isFunction(i=t.promise)?i.call(t).done(e).fail(n):t&&xt.isFunction(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}function y(){st.removeEventListener("DOMContentLoaded",y),o.removeEventListener("load",y),xt.ready()}function g(){this.expando=xt.expando+g.uid++}function m(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Ut.test(t)?JSON.parse(t):t)}function b(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace($t,"-$&").toLowerCase(),n=t.getAttribute(r),"string"==typeof n){try{n=m(n)}catch(i){}Bt.set(t,e,n)}else n=void 0;return n}function x(t,e,n,r){var i,o=1,u=20,s=r?function(){return r.cur()}:function(){return xt.css(t,e,"")},c=s(),a=n&&n[3]||(xt.cssNumber[e]?"":"px"),f=(xt.cssNumber[e]||"px"!==a&&+c)&&zt.exec(xt.css(t,e));if(f&&f[3]!==a){a=a||f[3],n=n||[],f=+c||1;do o=o||".5",f/=o,xt.style(t,e,f+a);while(o!==(o=s()/c)&&1!==o&&--u)}return n&&(f=+f||+c||0,i=n[1]?f+(n[1]+1)*n[2]:+n[2],r&&(r.unit=a,r.start=f,r.end=i)),i}function w(t){var e,n=t.ownerDocument,r=t.nodeName,i=Jt[r];return i?i:(e=n.body.appendChild(n.createElement(r)),i=xt.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),Jt[r]=i,i)}function S(t,e){for(var n,r,i=[],o=0,u=t.length;o<u;o++)r=t[o],r.style&&(n=r.style.display,e?("none"===n&&(i[o]=Wt.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Xt(r)&&(i[o]=w(r))):"none"!==n&&(i[o]="none",Wt.set(r,"display",n)));for(o=0;o<u;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}function E(t,e){var n;return n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&a(t,e)?xt.merge([t],n):n}function T(t,e){for(var n=0,r=t.length;n<r;n++)Wt.set(t[n],"globalEval",!e||Wt.get(e[n],"globalEval"))}function _(t,e,n,r,i){for(var o,u,s,c,a,f,l=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if(o=t[p],o||0===o)if("object"===xt.type(o))xt.merge(h,o.nodeType?[o]:o);else if(ee.test(o)){for(u=u||l.appendChild(e.createElement("div")),s=(Qt.exec(o)||["",""])[1].toLowerCase(),c=te[s]||te._default,u.innerHTML=c[1]+xt.htmlPrefilter(o)+c[2],f=c[0];f--;)u=u.lastChild;xt.merge(h,u.childNodes),u=l.firstChild,u.textContent=""}else h.push(e.createTextNode(o));for(l.textContent="",p=0;o=h[p++];)if(r&&xt.inArray(o,r)>-1)i&&i.push(o);else if(a=xt.contains(o.ownerDocument,o),u=E(l.appendChild(o),"script"),a&&T(u),n)for(f=0;o=u[f++];)Zt.test(o.type||"")&&n.push(o);return l}function k(){return!0}function j(){return!1}function C(){try{return st.activeElement}catch(t){}}function O(t,e,n,r,o,u){var s,c;if("object"===("undefined"==typeof e?"undefined":i(e))){"string"!=typeof n&&(r=r||n,n=void 0);for(c in e)O(t,c,n,r,e[c],u);return t}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),o===!1)o=j;else if(!o)return t;return 1===u&&(s=o,o=function(t){return xt().off(t),s.apply(this,arguments)},o.guid=s.guid||(s.guid=xt.guid++)),t.each(function(){xt.event.add(this,e,o,r,n)})}function A(t,e){return a(t,"table")&&a(11!==e.nodeType?e:e.firstChild,"tr")?xt(">tbody",t)[0]||t:t}function M(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function N(t){var e=ae.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function P(t,e){var n,r,i,o,u,s,c,a;if(1===e.nodeType){if(Wt.hasData(t)&&(o=Wt.access(t),u=Wt.set(e,o),a=o.events)){delete u.handle,u.events={};for(i in a)for(n=0,r=a[i].length;n<r;n++)xt.event.add(e,i,a[i][n])}Bt.hasData(t)&&(s=Bt.access(t),c=xt.extend({},s),Bt.set(e,c))}}function F(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Kt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function L(t,e,n,r){e=ft.apply([],e);var i,o,u,c,a,f,l=0,h=t.length,p=h-1,d=e[0],v=xt.isFunction(d);if(v||h>1&&"string"==typeof d&&!mt.checkClone&&ce.test(d))return t.each(function(i){var o=t.eq(i);v&&(e[0]=d.call(this,i,o.html())),L(o,e,n,r)});if(h&&(i=_(e,t[0].ownerDocument,!1,t,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=xt.map(E(i,"script"),M),c=u.length;l<h;l++)a=i,l!==p&&(a=xt.clone(a,!0,!0),c&&xt.merge(u,E(a,"script"))),n.call(t[l],a,l);if(c)for(f=u[u.length-1].ownerDocument,xt.map(u,N),l=0;l<c;l++)a=u[l],Zt.test(a.type||"")&&!Wt.access(a,"globalEval")&&xt.contains(f,a)&&(a.src?xt._evalUrl&&xt._evalUrl(a.src):s(a.textContent.replace(fe,""),f))}return t}function D(t,e,n){for(var r,i=e?xt.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||xt.cleanData(E(r)),r.parentNode&&(n&&xt.contains(r.ownerDocument,r)&&T(E(r,"script")),r.parentNode.removeChild(r));return t}function I(t,e,n){var r,i,o,u,s=t.style;return n=n||pe(t),n&&(u=n.getPropertyValue(e)||n[e],""!==u||xt.contains(t.ownerDocument,t)||(u=xt.style(t,e)),!mt.pixelMarginRight()&&he.test(u)&&le.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=u,u=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==u?u+"":u}function R(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function H(t){if(t in be)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=me.length;n--;)if(t=me[n]+e,t in be)return t}function q(t){var e=xt.cssProps[t];return e||(e=xt.cssProps[t]=H(t)||t),e}function W(t,e,n){var r=zt.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function B(t,e,n,r,i){var o,u=0;for(o=n===(r?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(u+=xt.css(t,n+Vt[o],!0,i)),r?("content"===n&&(u-=xt.css(t,"padding"+Vt[o],!0,i)),"margin"!==n&&(u-=xt.css(t,"border"+Vt[o]+"Width",!0,i))):(u+=xt.css(t,"padding"+Vt[o],!0,i),"padding"!==n&&(u+=xt.css(t,"border"+Vt[o]+"Width",!0,i)));return u}function U(t,e,n){var r,i=pe(t),o=I(t,e,i),u="border-box"===xt.css(t,"boxSizing",!1,i);return he.test(o)?o:(r=u&&(mt.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),o=parseFloat(o)||0,o+B(t,e,n||(u?"border":"content"),r,i)+"px")}function $(t,e,n,r,i){return new $.prototype.init(t,e,n,r,i)}function G(){we&&(st.hidden===!1&&o.requestAnimationFrame?o.requestAnimationFrame(G):o.setTimeout(G,xt.fx.interval),xt.fx.tick())}function z(){return o.setTimeout(function(){xe=void 0}),xe=xt.now()}function V(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)n=Vt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function X(t,e,n){for(var r,i=(K.tweeners[e]||[]).concat(K.tweeners["*"]),o=0,u=i.length;o<u;o++)if(r=i[o].call(n,e,t))return r}function Y(t,e,n){var r,i,o,u,s,c,a,f,l="width"in e||"height"in e,h=this,p={},d=t.style,v=t.nodeType&&Xt(t),y=Wt.get(t,"fxshow");n.queue||(u=xt._queueHooks(t,"fx"),null==u.unqueued&&(u.unqueued=0,s=u.empty.fire,u.empty.fire=function(){u.unqueued||s()}),u.unqueued++,h.always(function(){h.always(function(){u.unqueued--,xt.queue(t,"fx").length||u.empty.fire()})}));for(r in e)if(i=e[r],Se.test(i)){if(delete e[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;v=!0}p[r]=y&&y[r]||xt.style(t,r)}if(c=!xt.isEmptyObject(e),c||!xt.isEmptyObject(p)){l&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],a=y&&y.display,null==a&&(a=Wt.get(t,"display")),f=xt.css(t,"display"),"none"===f&&(a?f=a:(S([t],!0),a=t.style.display||a,f=xt.css(t,"display"),S([t]))),("inline"===f||"inline-block"===f&&null!=a)&&"none"===xt.css(t,"float")&&(c||(h.done(function(){d.display=a}),null==a&&(f=d.display,a="none"===f?"":f)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),c=!1;for(r in p)c||(y?"hidden"in y&&(v=y.hidden):y=Wt.access(t,"fxshow",{display:a}),o&&(y.hidden=!v),v&&S([t],!0),h.done(function(){v||S([t]),Wt.remove(t,"fxshow");for(r in p)xt.style(t,r,p[r])})),c=X(v?y[r]:0,r,h),r in y||(y[r]=c.start,v&&(c.end=c.start,c.start=0))}}function J(t,e){var n,r,i,o,u;for(n in t)if(r=xt.camelCase(n),i=e[r],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),u=xt.cssHooks[r],u&&"expand"in u){o=u.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function K(t,e,n){var r,i,o=0,u=K.prefilters.length,s=xt.Deferred().always(function(){delete c.elem}),c=function(){if(i)return!1;for(var e=xe||z(),n=Math.max(0,a.startTime+a.duration-e),r=n/a.duration||0,o=1-r,u=0,c=a.tweens.length;u<c;u++)a.tweens[u].run(o);return s.notifyWith(t,[a,o,n]),o<1&&c?n:(c||s.notifyWith(t,[a,1,0]),s.resolveWith(t,[a]),!1)},a=s.promise({elem:t,props:xt.extend({},e),opts:xt.extend(!0,{specialEasing:{},easing:xt.easing._default},n),originalProperties:e,originalOptions:n,startTime:xe||z(),duration:n.duration,tweens:[],createTween:function(e,n){var r=xt.Tween(t,a.opts,e,n,a.opts.specialEasing[e]||a.opts.easing);return a.tweens.push(r),r},stop:function(e){var n=0,r=e?a.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)a.tweens[n].run(1);return e?(s.notifyWith(t,[a,1,0]),s.resolveWith(t,[a,e])):s.rejectWith(t,[a,e]),this}}),f=a.props;for(J(f,a.opts.specialEasing);o<u;o++)if(r=K.prefilters[o].call(a,t,f,a.opts))return xt.isFunction(r.stop)&&(xt._queueHooks(a.elem,a.opts.queue).stop=xt.proxy(r.stop,r)),r;return xt.map(f,X,a),xt.isFunction(a.opts.start)&&a.opts.start.call(t,a),a.progress(a.opts.progress).done(a.opts.done,a.opts.complete).fail(a.opts.fail).always(a.opts.always),xt.fx.timer(xt.extend(c,{elem:t,anim:a,queue:a.opts.queue})),a}function Q(t){var e=t.match(Dt)||[];return e.join(" ")}function Z(t){return t.getAttribute&&t.getAttribute("class")||""}function tt(t,e,n,r){var o;if(Array.isArray(e))xt.each(e,function(e,o){n||Pe.test(t)?r(t,o):tt(t+"["+("object"===("undefined"==typeof o?"undefined":i(o))&&null!=o?e:"")+"]",o,n,r)});else if(n||"object"!==xt.type(e))r(t,e);else for(o in e)tt(t+"["+o+"]",e[o],n,r)}function et(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(Dt)||[];if(xt.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function nt(t,e,n,r){function i(s){var c;return o[s]=!0,xt.each(t[s]||[],function(t,s){var a=s(e,n,r);return"string"!=typeof a||u||o[a]?u?!(c=a):void 0:(e.dataTypes.unshift(a),i(a),!1)}),c}var o={},u=t===Ge;return i(e.dataTypes[0])||!o["*"]&&i("*")}function rt(t,e){var n,r,i=xt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&xt.extend(!0,t,r),t}function it(t,e,n){for(var r,i,o,u,s=t.contents,c=t.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){c.unshift(i);break}if(c[0]in n)o=c[0];else{for(i in n){if(!c[0]||t.converters[i+" "+c[0]]){o=i;break}u||(u=i)}o=o||u}if(o)return o!==c[0]&&c.unshift(o),n[o]}function ot(t,e,n,r){var i,o,u,s,c,a={},f=t.dataTypes.slice();if(f[1])for(u in t.converters)a[u.toLowerCase()]=t.converters[u];for(o=f.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!c&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),c=o,o=f.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(u=a[c+" "+o]||a["* "+o],!u)for(i in a)if(s=i.split(" "),s[1]===o&&(u=a[c+" "+s[0]]||a["* "+s[0]])){u===!0?u=a[i]:a[i]!==!0&&(o=s[0],f.unshift(s[1]));break}if(u!==!0)if(u&&t["throws"])e=u(e);else try{e=u(e)}catch(l){return{state:"parsererror",error:u?l:"No conversion from "+c+" to "+o}}}return{state:"success",data:e}}var ut=[],st=o.document,ct=Object.getPrototypeOf,at=ut.slice,ft=ut.concat,lt=ut.push,ht=ut.indexOf,pt={},dt=pt.toString,vt=pt.hasOwnProperty,yt=vt.toString,gt=yt.call(Object),mt={},bt="3.2.1",xt=function tn(t,e){return new tn.fn.init(t,e)},wt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,St=/^-ms-/,Et=/-([a-z])/g,Tt=function(t,e){return e.toUpperCase()};xt.fn=xt.prototype={jquery:bt,constructor:xt,length:0,toArray:function(){return at.call(this)},get:function(t){return null==t?at.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=xt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return xt.each(this,t)},map:function(t){return this.pushStack(xt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(at.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:lt,sort:ut.sort,splice:ut.splice},xt.extend=xt.fn.extend=function(){var t,e,n,r,o,u,s=arguments[0]||{},c=1,a=arguments.length,f=!1;for("boolean"==typeof s&&(f=s,s=arguments[c]||{},c++),"object"===("undefined"==typeof s?"undefined":i(s))||xt.isFunction(s)||(s={}),c===a&&(s=this,c--);c<a;c++)if(null!=(t=arguments[c]))for(e in t)n=s[e],r=t[e],s!==r&&(f&&r&&(xt.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,u=n&&Array.isArray(n)?n:[]):u=n&&xt.isPlainObject(n)?n:{},s[e]=xt.extend(f,u,r)):void 0!==r&&(s[e]=r));return s},xt.extend({expando:"jQuery"+(bt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===xt.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=xt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==dt.call(t))&&(!(e=ct(t))||(n=vt.call(e,"constructor")&&e.constructor,"function"==typeof n&&yt.call(n)===gt))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"===("undefined"==typeof t?"undefined":i(t))||"function"==typeof t?pt[dt.call(t)]||"object":"undefined"==typeof t?"undefined":i(t)},globalEval:function(t){s(t)},camelCase:function(t){return t.replace(St,"ms-").replace(Et,Tt)},each:function(t,e){var n,r=0;if(c(t))for(n=t.length;r<n&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(wt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(c(Object(t))?xt.merge(n,"string"==typeof t?[t]:t):lt.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:ht.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r,i=[],o=0,u=t.length,s=!n;o<u;o++)r=!e(t[o],o),r!==s&&i.push(t[o]);return i},map:function(t,e,n){var r,i,o=0,u=[];if(c(t))for(r=t.length;o<r;o++)i=e(t[o],o,n),null!=i&&u.push(i);else for(o in t)i=e(t[o],o,n),null!=i&&u.push(i);return ft.apply([],u)},guid:1,proxy:function en(t,e){var n,r,en;if("string"==typeof e&&(n=t[e],e=t,t=n),xt.isFunction(t))return r=at.call(arguments,2),en=function(){return t.apply(e||this,r.concat(at.call(arguments)))},en.guid=t.guid=t.guid||xt.guid++,en},now:Date.now,support:mt}),"function"==typeof Symbol&&(xt.fn[Symbol.iterator]=ut[Symbol.iterator]),xt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){pt["[object "+e+"]"]=e.toLowerCase()});var _t=function(t){function e(t,e,n,r){var i,o,u,s,c,a,f,h=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&((e?e.ownerDocument||e:W)!==P&&N(e),e=e||P,L)){if(11!==d&&(c=gt.exec(t)))if(i=c[1]){if(9===d){if(!(u=e.getElementById(i)))return n;if(u.id===i)return n.push(u),n}else if(h&&(u=h.getElementById(i))&&H(e,u)&&u.id===i)return n.push(u),n}else{if(c[2])return Q.apply(n,e.getElementsByTagName(t)),n;if((i=c[3])&&S.getElementsByClassName&&e.getElementsByClassName)return Q.apply(n,e.getElementsByClassName(i)),n}if(S.qsa&&!z[t+" "]&&(!D||!D.test(t))){if(1!==d)h=e,f=t;else if("object"!==e.nodeName.toLowerCase()){for((s=e.getAttribute("id"))?s=s.replace(wt,St):e.setAttribute("id",s=q),a=k(t),o=a.length;o--;)a[o]="#"+s+" "+p(a[o]);f=a.join(","),h=mt.test(t)&&l(e.parentNode)||e}if(f)try{return Q.apply(n,h.querySelectorAll(f)),n}catch(v){}finally{s===q&&e.removeAttribute("id")}}}return C(t.replace(st,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>E.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[q]=!0,t}function i(t){var e=P.createElement("fieldset");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=n.length;r--;)E.attrHandle[n[r]]=e}function u(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function c(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function a(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Tt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function f(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),u=o.length;u--;)n[i=o[u]]&&(n[i]=!(r[i]=n[i]))})})}function l(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function d(t,e,n){var r=e.dir,i=e.next,o=i||r,u=n&&"parentNode"===o,s=U++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||u)return t(e,n,i);return!1}:function(e,n,c){var a,f,l,h=[B,s];if(c){for(;e=e[r];)if((1===e.nodeType||u)&&t(e,n,c))return!0}else for(;e=e[r];)if(1===e.nodeType||u)if(l=e[q]||(e[q]={}),f=l[e.uniqueID]||(l[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((a=f[o])&&a[0]===B&&a[1]===s)return h[2]=a[2];if(f[o]=h,h[2]=t(e,n,c))return!0}return!1}}function v(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function y(t,n,r){for(var i=0,o=n.length;i<o;i++)e(t,n[i],r);return r}function g(t,e,n,r,i){for(var o,u=[],s=0,c=t.length,a=null!=e;s<c;s++)(o=t[s])&&(n&&!n(o,r,i)||(u.push(o),a&&e.push(s)));return u}function m(t,e,n,i,o,u){return i&&!i[q]&&(i=m(i)),o&&!o[q]&&(o=m(o,u)),r(function(r,u,s,c){var a,f,l,h=[],p=[],d=u.length,v=r||y(e||"*",s.nodeType?[s]:s,[]),m=!t||!r&&e?v:g(v,h,t,s,c),b=n?o||(r?t:d||i)?[]:u:m;if(n&&n(m,b,s,c),i)for(a=g(b,p),i(a,[],s,c),f=a.length;f--;)(l=a[f])&&(b[p[f]]=!(m[p[f]]=l));if(r){if(o||t){if(o){for(a=[],f=b.length;f--;)(l=b[f])&&a.push(m[f]=l);o(null,b=[],a,c)}for(f=b.length;f--;)(l=b[f])&&(a=o?tt(r,l):h[f])>-1&&(r[a]=!(u[a]=l))}}else b=g(b===u?b.splice(d,b.length):b),o?o(null,u,b,c):Q.apply(u,b)})}function b(t){for(var e,n,r,i=t.length,o=E.relative[t[0].type],u=o||E.relative[" "],s=o?1:0,c=d(function(t){return t===e},u,!0),a=d(function(t){return tt(e,t)>-1},u,!0),f=[function(t,n,r){var i=!o&&(r||n!==O)||((e=n).nodeType?c(t,n,r):a(t,n,r));return e=null,i}];s<i;s++)if(n=E.relative[t[s].type])f=[d(v(f),n)];else{if(n=E.filter[t[s].type].apply(null,t[s].matches),n[q]){for(r=++s;r<i&&!E.relative[t[r].type];r++);return m(s>1&&v(f),s>1&&p(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(st,"$1"),n,s<r&&b(t.slice(s,r)),r<i&&b(t=t.slice(r)),r<i&&p(t))}f.push(n)}return v(f)}function x(t,n){var i=n.length>0,o=t.length>0,u=function(r,u,s,c,a){var f,l,h,p=0,d="0",v=r&&[],y=[],m=O,b=r||o&&E.find.TAG("*",a),x=B+=null==m?1:Math.random()||.1,w=b.length;for(a&&(O=u===P||u||a);d!==w&&null!=(f=b[d]);d++){if(o&&f){for(l=0,u||f.ownerDocument===P||(N(f),s=!L);h=t[l++];)if(h(f,u||P,s)){c.push(f);break}a&&(B=x)}i&&((f=!h&&f)&&p--,r&&v.push(f))}if(p+=d,i&&d!==p){for(l=0;h=n[l++];)h(v,y,u,s);if(r){if(p>0)for(;d--;)v[d]||y[d]||(y[d]=J.call(c));y=g(y)}Q.apply(c,y),a&&!r&&y.length>0&&p+n.length>1&&e.uniqueSort(c)}return a&&(B=x,O=m),v};return i?r(u):u}var w,S,E,T,_,k,j,C,O,A,M,N,P,F,L,D,I,R,H,q="sizzle"+1*new Date,W=t.document,B=0,U=0,$=n(),G=n(),z=n(),V=function(t,e){return t===e&&(M=!0),0},X={}.hasOwnProperty,Y=[],J=Y.pop,K=Y.push,Q=Y.push,Z=Y.slice,tt=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",it="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",ot=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",ut=new RegExp(nt+"+","g"),st=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ct=new RegExp("^"+nt+"*,"+nt+"*"),at=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ft=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),lt=new RegExp(ot),ht=new RegExp("^"+rt+"$"),pt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,vt=/^h\d$/i,yt=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,mt=/[+~]/,bt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),xt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,St=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},Et=function(){N()},Tt=d(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Q.apply(Y=Z.call(W.childNodes),W.childNodes),Y[W.childNodes.length].nodeType}catch(_t){Q={apply:Y.length?function(t,e){K.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}S=e.support={},_=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},N=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:W;return r!==P&&9===r.nodeType&&r.documentElement?(P=r,F=P.documentElement,L=!_(P),W!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Et,!1):n.attachEvent&&n.attachEvent("onunload",Et)),S.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),S.getElementsByTagName=i(function(t){return t.appendChild(P.createComment("")),!t.getElementsByTagName("*").length}),S.getElementsByClassName=yt.test(P.getElementsByClassName),S.getById=i(function(t){return F.appendChild(t).id=q,!P.getElementsByName||!P.getElementsByName(q).length}),S.getById?(E.filter.ID=function(t){var e=t.replace(bt,xt);return function(t){return t.getAttribute("id")===e}},E.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&L){var n=e.getElementById(t);return n?[n]:[]}}):(E.filter.ID=function(t){var e=t.replace(bt,xt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},E.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&L){var n,r,i,o=e.getElementById(t);if(o){if(n=o.getAttributeNode("id"),n&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if(n=o.getAttributeNode("id"),n&&n.value===t)return[o]}return[]}}),E.find.TAG=S.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):S.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},E.find.CLASS=S.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&L)return e.getElementsByClassName(t)},I=[],D=[],(S.qsa=yt.test(P.querySelectorAll))&&(i(function(t){F.appendChild(t).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&D.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||D.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+q+"-]").length||D.push("~="),t.querySelectorAll(":checked").length||D.push(":checked"),t.querySelectorAll("a#"+q+"+*").length||D.push(".#.+[+~]")}),i(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=P.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&D.push("name"+nt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&D.push(":enabled",":disabled"),F.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&D.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),D.push(",.*:")})),(S.matchesSelector=yt.test(R=F.matches||F.webkitMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector||F.msMatchesSelector))&&i(function(t){S.disconnectedMatch=R.call(t,"*"),R.call(t,"[s!='']:x"),I.push("!=",ot)}),D=D.length&&new RegExp(D.join("|")),I=I.length&&new RegExp(I.join("|")),e=yt.test(F.compareDocumentPosition),H=e||yt.test(F.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},V=e?function(t,e){if(t===e)return M=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!S.sortDetached&&e.compareDocumentPosition(t)===n?t===P||t.ownerDocument===W&&H(W,t)?-1:e===P||e.ownerDocument===W&&H(W,e)?1:A?tt(A,t)-tt(A,e):0:4&n?-1:1)}:function(t,e){if(t===e)return M=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,s=[t],c=[e];if(!i||!o)return t===P?-1:e===P?1:i?-1:o?1:A?tt(A,t)-tt(A,e):0;if(i===o)return u(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)c.unshift(n);for(;s[r]===c[r];)r++;return r?u(s[r],c[r]):s[r]===W?-1:c[r]===W?1:0},P):P},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==P&&N(t),n=n.replace(ft,"='$1']"),S.matchesSelector&&L&&!z[n+" "]&&(!I||!I.test(n))&&(!D||!D.test(n)))try{var r=R.call(t,n);if(r||S.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(i){}return e(n,P,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==P&&N(t),H(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==P&&N(t);var n=E.attrHandle[e.toLowerCase()],r=n&&X.call(E.attrHandle,e.toLowerCase())?n(t,e,!L):void 0;return void 0!==r?r:S.attributes||!L?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.escape=function(t){return(t+"").replace(wt,St)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(M=!S.detectDuplicates,A=!S.sortStable&&t.slice(0),t.sort(V),M){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return A=null,t},T=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=T(e);return n},E=e.selectors={cacheLength:50,createPseudo:r,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(bt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(bt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&lt.test(n)&&(e=k(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(bt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=$[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&$(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ut," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),u="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,c){var a,f,l,h,p,d,v=o!==u?"nextSibling":"previousSibling",y=e.parentNode,g=s&&e.nodeName.toLowerCase(),m=!c&&!s,b=!1;if(y){if(o){for(;v;){for(h=e;h=h[v];)if(s?h.nodeName.toLowerCase()===g:1===h.nodeType)return!1;d=v="only"===t&&!d&&"nextSibling"}return!0}if(d=[u?y.firstChild:y.lastChild],u&&m){for(h=y,l=h[q]||(h[q]={}),f=l[h.uniqueID]||(l[h.uniqueID]={}),a=f[t]||[],p=a[0]===B&&a[1],b=p&&a[2],h=p&&y.childNodes[p];h=++p&&h&&h[v]||(b=p=0)||d.pop();)if(1===h.nodeType&&++b&&h===e){f[t]=[B,p,b];break}}else if(m&&(h=e,l=h[q]||(h[q]={}),f=l[h.uniqueID]||(l[h.uniqueID]={}),a=f[t]||[],p=a[0]===B&&a[1],b=p),b===!1)for(;(h=++p&&h&&h[v]||(b=p=0)||d.pop())&&((s?h.nodeName.toLowerCase()!==g:1!==h.nodeType)||!++b||(m&&(l=h[q]||(h[q]={}),f=l[h.uniqueID]||(l[h.uniqueID]={}),f[t]=[B,b]),h!==e)););return b-=i,b===r||b%r===0&&b/r>=0}}},PSEUDO:function(t,n){var i,o=E.pseudos[t]||E.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[q]?o(n):o.length>1?(i=[t,t,"",n],E.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),u=i.length;u--;)r=tt(t,i[u]),t[r]=!(e[r]=i[u])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=j(t.replace(st,"$1"));return i[q]?r(function(t,e,n,r){for(var o,u=i(t,null,r,[]),s=t.length;s--;)(o=u[s])&&(t[s]=!(e[s]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(bt,xt),function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:r(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(bt,xt).toLowerCase(),function(e){var n;do if(n=L?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);
return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===F},focus:function(t){return t===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!E.pseudos.empty(t)},header:function(t){return vt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:f(function(){return[0]}),last:f(function(t,e){return[e-1]}),eq:f(function(t,e,n){return[n<0?n+e:n]}),even:f(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:f(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:f(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:f(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}},E.pseudos.nth=E.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})E.pseudos[w]=s(w);for(w in{submit:!0,reset:!0})E.pseudos[w]=c(w);return h.prototype=E.filters=E.pseudos,E.setFilters=new h,k=e.tokenize=function(t,n){var r,i,o,u,s,c,a,f=G[t+" "];if(f)return n?0:f.slice(0);for(s=t,c=[],a=E.preFilter;s;){r&&!(i=ct.exec(s))||(i&&(s=s.slice(i[0].length)||s),c.push(o=[])),r=!1,(i=at.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(st," ")}),s=s.slice(r.length));for(u in E.filter)!(i=pt[u].exec(s))||a[u]&&!(i=a[u](i))||(r=i.shift(),o.push({value:r,type:u,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?e.error(t):G(t,c).slice(0)},j=e.compile=function(t,e){var n,r=[],i=[],o=z[t+" "];if(!o){for(e||(e=k(t)),n=e.length;n--;)o=b(e[n]),o[q]?r.push(o):i.push(o);o=z(t,x(i,r)),o.selector=t}return o},C=e.select=function(t,e,n,r){var i,o,u,s,c,a="function"==typeof t&&t,f=!r&&k(t=a.selector||t);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(u=o[0]).type&&9===e.nodeType&&L&&E.relative[o[1].type]){if(e=(E.find.ID(u.matches[0].replace(bt,xt),e)||[])[0],!e)return n;a&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=pt.needsContext.test(t)?0:o.length;i--&&(u=o[i],!E.relative[s=u.type]);)if((c=E.find[s])&&(r=c(u.matches[0].replace(bt,xt),mt.test(o[0].type)&&l(e.parentNode)||e))){if(o.splice(i,1),t=r.length&&p(o),!t)return Q.apply(n,r),n;break}}return(a||j(t,f))(r,e,!L,n,!e||mt.test(t)&&l(e.parentNode)||e),n},S.sortStable=q.split("").sort(V).join("")===q,S.detectDuplicates=!!M,N(),S.sortDetached=i(function(t){return 1&t.compareDocumentPosition(P.createElement("fieldset"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),S.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var r;if(!n)return t[e]===!0?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(o);xt.find=_t,xt.expr=_t.selectors,xt.expr[":"]=xt.expr.pseudos,xt.uniqueSort=xt.unique=_t.uniqueSort,xt.text=_t.getText,xt.isXMLDoc=_t.isXML,xt.contains=_t.contains,xt.escapeSelector=_t.escape;var kt=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&xt(t).is(n))break;r.push(t)}return r},jt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},Ct=xt.expr.match.needsContext,Ot=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,At=/^.[^:#\[\.,]*$/;xt.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?xt.find.matchesSelector(r,t)?[r]:[]:xt.find.matches(t,xt.grep(e,function(t){return 1===t.nodeType}))},xt.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(xt(t).filter(function(){for(e=0;e<r;e++)if(xt.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)xt.find(t,i[e],n);return r>1?xt.uniqueSort(n):n},filter:function(t){return this.pushStack(f(this,t||[],!1))},not:function(t){return this.pushStack(f(this,t||[],!0))},is:function(t){return!!f(this,"string"==typeof t&&Ct.test(t)?xt(t):t||[],!1).length}});var Mt,Nt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Pt=xt.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||Mt,"string"==typeof t){if(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:Nt.exec(t),!r||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof xt?e[0]:e,xt.merge(this,xt.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:st,!0)),Ot.test(r[1])&&xt.isPlainObject(e))for(r in e)xt.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return i=st.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):xt.isFunction(t)?void 0!==n.ready?n.ready(t):t(xt):xt.makeArray(t,this)};Pt.prototype=xt.fn,Mt=xt(st);var Ft=/^(?:parents|prev(?:Until|All))/,Lt={children:!0,contents:!0,next:!0,prev:!0};xt.fn.extend({has:function(t){var e=xt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(xt.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],u="string"!=typeof t&&xt(t);if(!Ct.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(u?u.index(n)>-1:1===n.nodeType&&xt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?xt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?ht.call(xt(t),this[0]):ht.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(xt.uniqueSort(xt.merge(this.get(),xt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),xt.each({parent:function nn(t){var nn=t.parentNode;return nn&&11!==nn.nodeType?nn:null},parents:function(t){return kt(t,"parentNode")},parentsUntil:function(t,e,n){return kt(t,"parentNode",n)},next:function(t){return l(t,"nextSibling")},prev:function(t){return l(t,"previousSibling")},nextAll:function(t){return kt(t,"nextSibling")},prevAll:function(t){return kt(t,"previousSibling")},nextUntil:function(t,e,n){return kt(t,"nextSibling",n)},prevUntil:function(t,e,n){return kt(t,"previousSibling",n)},siblings:function(t){return jt((t.parentNode||{}).firstChild,t)},children:function(t){return jt(t.firstChild)},contents:function(t){return a(t,"iframe")?t.contentDocument:(a(t,"template")&&(t=t.content||t),xt.merge([],t.childNodes))}},function(t,e){xt.fn[t]=function(n,r){var i=xt.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=xt.filter(r,i)),this.length>1&&(Lt[t]||xt.uniqueSort(i),Ft.test(t)&&i.reverse()),this.pushStack(i)}});var Dt=/[^\x20\t\r\n\f]+/g;xt.Callbacks=function(t){t="string"==typeof t?h(t):xt.extend({},t);var e,n,r,i,o=[],u=[],s=-1,c=function(){for(i=i||t.once,r=e=!0;u.length;s=-1)for(n=u.shift();++s<o.length;)o[s].apply(n[0],n[1])===!1&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},a={add:function(){return o&&(n&&!e&&(s=o.length-1,u.push(n)),function r(e){xt.each(e,function(e,n){xt.isFunction(n)?t.unique&&a.has(n)||o.push(n):n&&n.length&&"string"!==xt.type(n)&&r(n)})}(arguments),n&&!e&&c()),this},remove:function(){return xt.each(arguments,function(t,e){for(var n;(n=xt.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(t){return t?xt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=u=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=u=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=n||[],n=[t,n.slice?n.slice():n],u.push(n),e||c()),this},fire:function(){return a.fireWith(this,arguments),this},fired:function(){return!!r}};return a},xt.extend({Deferred:function(t){var e=[["notify","progress",xt.Callbacks("memory"),xt.Callbacks("memory"),2],["resolve","done",xt.Callbacks("once memory"),xt.Callbacks("once memory"),0,"resolved"],["reject","fail",xt.Callbacks("once memory"),xt.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return u.done(arguments).fail(arguments),this},"catch":function(t){return r.then(null,t)},pipe:function(){var t=arguments;return xt.Deferred(function(n){xt.each(e,function(e,r){var i=xt.isFunction(t[r[4]])&&t[r[4]];u[r[1]](function(){var t=i&&i.apply(this,arguments);t&&xt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,n,r){function u(t,e,n,r){return function(){var c=this,a=arguments,f=function(){var o,f;if(!(t<s)){if(o=n.apply(c,a),o===e.promise())throw new TypeError("Thenable self-resolution");f=o&&("object"===("undefined"==typeof o?"undefined":i(o))||"function"==typeof o)&&o.then,xt.isFunction(f)?r?f.call(o,u(s,e,p,r),u(s,e,d,r)):(s++,f.call(o,u(s,e,p,r),u(s,e,d,r),u(s,e,p,e.notifyWith))):(n!==p&&(c=void 0,a=[o]),(r||e.resolveWith)(c,a))}},l=r?f:function(){try{f()}catch(r){xt.Deferred.exceptionHook&&xt.Deferred.exceptionHook(r,l.stackTrace),t+1>=s&&(n!==d&&(c=void 0,a=[r]),e.rejectWith(c,a))}};t?l():(xt.Deferred.getStackHook&&(l.stackTrace=xt.Deferred.getStackHook()),o.setTimeout(l))}}var s=0;return xt.Deferred(function(i){e[0][3].add(u(0,i,xt.isFunction(r)?r:p,i.notifyWith)),e[1][3].add(u(0,i,xt.isFunction(t)?t:p)),e[2][3].add(u(0,i,xt.isFunction(n)?n:d))}).promise()},promise:function(t){return null!=t?xt.extend(t,r):r}},u={};return xt.each(e,function(t,i){var o=i[2],s=i[5];r[i[1]]=o.add,s&&o.add(function(){n=s},e[3-t][2].disable,e[0][2].lock),o.add(i[3].fire),u[i[0]]=function(){return u[i[0]+"With"](this===u?void 0:this,arguments),this},u[i[0]+"With"]=o.fireWith}),r.promise(u),t&&t.call(u,u),u},when:function(t){var e=arguments.length,n=e,r=Array(n),i=at.call(arguments),o=xt.Deferred(),u=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?at.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(v(t,o.done(u(n)).resolve,o.reject,!e),"pending"===o.state()||xt.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)v(i[n],u(n),o.reject);return o.promise()}});var It=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;xt.Deferred.exceptionHook=function(t,e){o.console&&o.console.warn&&t&&It.test(t.name)&&o.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},xt.readyException=function(t){o.setTimeout(function(){throw t})};var Rt=xt.Deferred();xt.fn.ready=function(t){return Rt.then(t)["catch"](function(t){xt.readyException(t)}),this},xt.extend({isReady:!1,readyWait:1,ready:function(t){(t===!0?--xt.readyWait:xt.isReady)||(xt.isReady=!0,t!==!0&&--xt.readyWait>0||Rt.resolveWith(st,[xt]))}}),xt.ready.then=Rt.then,"complete"===st.readyState||"loading"!==st.readyState&&!st.documentElement.doScroll?o.setTimeout(xt.ready):(st.addEventListener("DOMContentLoaded",y),o.addEventListener("load",y));var Ht=function rn(t,e,n,r,i,o,u){var s=0,c=t.length,a=null==n;if("object"===xt.type(n)){i=!0;for(s in n)rn(t,e,s,n[s],!0,o,u)}else if(void 0!==r&&(i=!0,xt.isFunction(r)||(u=!0),a&&(u?(e.call(t,r),e=null):(a=e,e=function(t,e,n){return a.call(xt(t),n)})),e))for(;s<c;s++)e(t[s],n,u?r:r.call(t[s],s,e(t[s],n)));return i?t:a?e.call(t):c?e(t[0],n):o},qt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};g.uid=1,g.prototype={cache:function(t){var e=t[this.expando];return e||(e={},qt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[xt.camelCase(e)]=n;else for(r in e)i[xt.camelCase(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][xt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){Array.isArray(e)?e=e.map(xt.camelCase):(e=xt.camelCase(e),e=e in r?[e]:e.match(Dt)||[]),n=e.length;for(;n--;)delete r[e[n]]}(void 0===e||xt.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!xt.isEmptyObject(e)}};var Wt=new g,Bt=new g,Ut=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,$t=/[A-Z]/g;xt.extend({hasData:function(t){return Bt.hasData(t)||Wt.hasData(t)},data:function(t,e,n){return Bt.access(t,e,n)},removeData:function(t,e){Bt.remove(t,e)},_data:function(t,e,n){return Wt.access(t,e,n)},_removeData:function(t,e){Wt.remove(t,e)}}),xt.fn.extend({data:function on(t,e){var n,r,on,o=this[0],u=o&&o.attributes;if(void 0===t){if(this.length&&(on=Bt.get(o),1===o.nodeType&&!Wt.get(o,"hasDataAttrs"))){for(n=u.length;n--;)u[n]&&(r=u[n].name,0===r.indexOf("data-")&&(r=xt.camelCase(r.slice(5)),b(o,r,on[r])));Wt.set(o,"hasDataAttrs",!0)}return on}return"object"===("undefined"==typeof t?"undefined":i(t))?this.each(function(){Bt.set(this,t)}):Ht(this,function(e){var n;if(o&&void 0===e){if(n=Bt.get(o,t),void 0!==n)return n;if(n=b(o,t),void 0!==n)return n}else this.each(function(){Bt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Bt.remove(this,t)})}}),xt.extend({queue:function un(t,e,n){var un;if(t)return e=(e||"fx")+"queue",un=Wt.get(t,e),n&&(!un||Array.isArray(n)?un=Wt.access(t,e,xt.makeArray(n)):un.push(n)),un||[]},dequeue:function(t,e){e=e||"fx";var n=xt.queue(t,e),r=n.length,i=n.shift(),o=xt._queueHooks(t,e),u=function(){xt.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,u,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Wt.get(t,n)||Wt.access(t,n,{empty:xt.Callbacks("once memory").add(function(){Wt.remove(t,[e+"queue",n])})})}}),xt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?xt.queue(this[0],t):void 0===e?this:this.each(function(){var n=xt.queue(this,t,e);xt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&xt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){xt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=xt.Deferred(),o=this,u=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";u--;)n=Wt.get(o[u],t+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var Gt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,zt=new RegExp("^(?:([+-])=|)("+Gt+")([a-z%]*)$","i"),Vt=["Top","Right","Bottom","Left"],Xt=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&xt.contains(t.ownerDocument,t)&&"none"===xt.css(t,"display")},Yt=function(t,e,n,r){var i,o,u={};for(o in e)u[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=u[o];return i},Jt={};xt.fn.extend({show:function(){return S(this,!0)},hide:function(){return S(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Xt(this)?xt(this).show():xt(this).hide()})}});var Kt=/^(?:checkbox|radio)$/i,Qt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Zt=/^$|\/(?:java|ecma)script/i,te={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};te.optgroup=te.option,te.tbody=te.tfoot=te.colgroup=te.caption=te.thead,te.th=te.td;var ee=/<|&#?\w+;/;!function(){var t=st.createDocumentFragment(),e=t.appendChild(st.createElement("div")),n=st.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),mt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",mt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var ne=st.documentElement,re=/^key/,ie=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,oe=/^([^.]*)(?:\.(.+)|)/;xt.event={global:{},add:function(t,e,n,r,i){var o,u,s,c,a,f,l,h,p,d,v,y=Wt.get(t);if(y)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&xt.find.matchesSelector(ne,i),n.guid||(n.guid=xt.guid++),(c=y.events)||(c=y.events={}),(u=y.handle)||(u=y.handle=function(e){return"undefined"!=typeof xt&&xt.event.triggered!==e.type?xt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(Dt)||[""],a=e.length;a--;)s=oe.exec(e[a])||[],p=v=s[1],d=(s[2]||"").split(".").sort(),p&&(l=xt.event.special[p]||{},p=(i?l.delegateType:l.bindType)||p,l=xt.event.special[p]||{},f=xt.extend({type:p,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&xt.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=c[p])||(h=c[p]=[],h.delegateCount=0,l.setup&&l.setup.call(t,r,d,u)!==!1||t.addEventListener&&t.addEventListener(p,u)),l.add&&(l.add.call(t,f),f.handler.guid||(f.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,f):h.push(f),xt.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,u,s,c,a,f,l,h,p,d,v,y=Wt.hasData(t)&&Wt.get(t);if(y&&(c=y.events)){for(e=(e||"").match(Dt)||[""],a=e.length;a--;)if(s=oe.exec(e[a])||[],p=v=s[1],d=(s[2]||"").split(".").sort(),p){for(l=xt.event.special[p]||{},p=(r?l.delegateType:l.bindType)||p,h=c[p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=h.length;o--;)f=h[o],!i&&v!==f.origType||n&&n.guid!==f.guid||s&&!s.test(f.namespace)||r&&r!==f.selector&&("**"!==r||!f.selector)||(h.splice(o,1),f.selector&&h.delegateCount--,l.remove&&l.remove.call(t,f));u&&!h.length&&(l.teardown&&l.teardown.call(t,d,y.handle)!==!1||xt.removeEvent(t,p,y.handle),delete c[p])}else for(p in c)xt.event.remove(t,p+e[a],n,r,!0);xt.isEmptyObject(c)&&Wt.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,u,s=xt.event.fix(t),c=new Array(arguments.length),a=(Wt.get(this,"events")||{})[s.type]||[],f=xt.event.special[s.type]||{};for(c[0]=s,e=1;e<arguments.length;e++)c[e]=arguments[e];if(s.delegateTarget=this,!f.preDispatch||f.preDispatch.call(this,s)!==!1){for(u=xt.event.handlers.call(this,s,a),e=0;(i=u[e++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,r=((xt.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,c),void 0!==r&&(s.result=r)===!1&&(s.preventDefault(),s.stopPropagation()));return f.postDispatch&&f.postDispatch.call(this,s),s.result}},handlers:function(t,e){var n,r,i,o,u,s=[],c=e.delegateCount,a=t.target;if(c&&a.nodeType&&!("click"===t.type&&t.button>=1))for(;a!==this;a=a.parentNode||this)if(1===a.nodeType&&("click"!==t.type||a.disabled!==!0)){for(o=[],u={},n=0;n<c;n++)r=e[n],i=r.selector+" ",void 0===u[i]&&(u[i]=r.needsContext?xt(i,this).index(a)>-1:xt.find(i,this,null,[a]).length),u[i]&&o.push(r);o.length&&s.push({elem:a,handlers:o})}return a=this,c<e.length&&s.push({elem:a,handlers:e.slice(c)}),s},addProp:function(t,e){Object.defineProperty(xt.Event.prototype,t,{enumerable:!0,configurable:!0,get:xt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[xt.expando]?t:new xt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==C()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===C()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&a(this,"input"))return this.click(),!1},_default:function(t){return a(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},xt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},xt.Event=function(t,e){return this instanceof xt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?k:j,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&xt.extend(this,e),this.timeStamp=t&&t.timeStamp||xt.now(),void(this[xt.expando]=!0)):new xt.Event(t,e)},xt.Event.prototype={constructor:xt.Event,isDefaultPrevented:j,isPropagationStopped:j,isImmediatePropagationStopped:j,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=k,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=k,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=k,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},xt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&re.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&ie.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},xt.event.addProp),xt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){xt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||xt.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),xt.fn.extend({on:function(t,e,n,r){return O(this,t,e,n,r)},one:function(t,e,n,r){return O(this,t,e,n,r,1)},off:function(t,e,n){var r,o;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,xt(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"===("undefined"==typeof t?"undefined":i(t))){for(o in t)this.off(o,e,t[o]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=j),this.each(function(){xt.event.remove(this,t,n,e)})}});var ue=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,se=/<script|<style|<link/i,ce=/checked\s*(?:[^=]|=\s*.checked.)/i,ae=/^true\/(.*)/,fe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;xt.extend({htmlPrefilter:function(t){return t.replace(ue,"<$1></$2>")},clone:function sn(t,e,n){var r,i,o,u,sn=t.cloneNode(!0),s=xt.contains(t.ownerDocument,t);if(!(mt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||xt.isXMLDoc(t)))for(u=E(sn),o=E(t),r=0,i=o.length;r<i;r++)F(o[r],u[r]);if(e)if(n)for(o=o||E(t),u=u||E(sn),r=0,i=o.length;r<i;r++)P(o[r],u[r]);else P(t,sn);return u=E(sn,"script"),u.length>0&&T(u,!s&&E(t,"script")),sn},cleanData:function(t){for(var e,n,r,i=xt.event.special,o=0;void 0!==(n=t[o]);o++)if(qt(n)){if(e=n[Wt.expando]){if(e.events)for(r in e.events)i[r]?xt.event.remove(n,r):xt.removeEvent(n,r,e.handle);n[Wt.expando]=void 0}n[Bt.expando]&&(n[Bt.expando]=void 0)}}}),xt.fn.extend({detach:function(t){return D(this,t,!0)},remove:function(t){return D(this,t)},text:function(t){return Ht(this,function(t){return void 0===t?xt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return L(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=A(this,t);e.appendChild(t)}})},prepend:function(){return L(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=A(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return L(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return L(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(xt.cleanData(E(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return xt.clone(this,t,e)})},html:function(t){return Ht(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!se.test(t)&&!te[(Qt.exec(t)||["",""])[1].toLowerCase()]){t=xt.htmlPrefilter(t);try{for(;n<r;n++)e=this[n]||{},1===e.nodeType&&(xt.cleanData(E(e,!1)),e.innerHTML=t);e=0}catch(i){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return L(this,arguments,function(e){var n=this.parentNode;xt.inArray(this,t)<0&&(xt.cleanData(E(this)),n&&n.replaceChild(e,this))},t)}}),xt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){xt.fn[t]=function(t){for(var n,r=[],i=xt(t),o=i.length-1,u=0;u<=o;u++)n=u===o?this:this.clone(!0),xt(i[u])[e](n),lt.apply(r,n.get());return this.pushStack(r)}});var le=/^margin/,he=new RegExp("^("+Gt+")(?!px)[a-z%]+$","i"),pe=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=o),e.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",ne.appendChild(u);var t=o.getComputedStyle(s);e="1%"!==t.top,i="2px"===t.marginLeft,n="4px"===t.width,s.style.marginRight="50%",r="4px"===t.marginRight,ne.removeChild(u),s=null}}var e,n,r,i,u=st.createElement("div"),s=st.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",mt.clearCloneStyle="content-box"===s.style.backgroundClip,u.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",u.appendChild(s),xt.extend(mt,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return t(),n},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),i}}))}();var de=/^(none|table(?!-c[ea]).+)/,ve=/^--/,ye={position:"absolute",visibility:"hidden",display:"block"},ge={letterSpacing:"0",fontWeight:"400"},me=["Webkit","Moz","ms"],be=st.createElement("div").style;xt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=I(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function cn(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,u,s,c=xt.camelCase(e),a=ve.test(e),cn=t.style;return a||(e=q(c)),s=xt.cssHooks[e]||xt.cssHooks[c],void 0===n?s&&"get"in s&&void 0!==(o=s.get(t,!1,r))?o:cn[e]:(u="undefined"==typeof n?"undefined":i(n),"string"===u&&(o=zt.exec(n))&&o[1]&&(n=x(t,e,o),u="number"),null!=n&&n===n&&("number"===u&&(n+=o&&o[3]||(xt.cssNumber[c]?"":"px")),mt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(cn[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,r))||(a?cn.setProperty(e,n):cn[e]=n)),void 0)}},css:function(t,e,n,r){var i,o,u,s=xt.camelCase(e),c=ve.test(e);return c||(e=q(s)),u=xt.cssHooks[e]||xt.cssHooks[s],u&&"get"in u&&(i=u.get(t,!0,n)),void 0===i&&(i=I(t,e,r)),"normal"===i&&e in ge&&(i=ge[e]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),xt.each(["height","width"],function(t,e){xt.cssHooks[e]={get:function(t,n,r){if(n)return!de.test(xt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?U(t,e,r):Yt(t,ye,function(){return U(t,e,r)})},set:function(t,n,r){var i,o=r&&pe(t),u=r&&B(t,e,r,"border-box"===xt.css(t,"boxSizing",!1,o),o);return u&&(i=zt.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=xt.css(t,e)),W(t,n,u)}}}),xt.cssHooks.marginLeft=R(mt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(I(t,"marginLeft"))||t.getBoundingClientRect().left-Yt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),xt.each({margin:"",padding:"",border:"Width"},function(t,e){xt.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+Vt[r]+e]=o[r]||o[r-2]||o[0];return i}},le.test(t)||(xt.cssHooks[t+e].set=W)}),xt.fn.extend({css:function(t,e){return Ht(this,function(t,e,n){var r,i,o={},u=0;if(Array.isArray(e)){for(r=pe(t),i=e.length;u<i;u++)o[e[u]]=xt.css(t,e[u],!1,r);return o}return void 0!==n?xt.style(t,e,n):xt.css(t,e)},t,e,arguments.length>1)}}),xt.Tween=$,$.prototype={constructor:$,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||xt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(xt.cssNumber[n]?"":"px")},cur:function(){var t=$.propHooks[this.prop];return t&&t.get?t.get(this):$.propHooks._default.get(this)},run:function(t){var e,n=$.propHooks[this.prop];return this.options.duration?this.pos=e=xt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):$.propHooks._default.set(this),this}},$.prototype.init.prototype=$.prototype,$.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=xt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){xt.fx.step[t.prop]?xt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[xt.cssProps[t.prop]]&&!xt.cssHooks[t.prop]?t.elem[t.prop]=t.now:xt.style(t.elem,t.prop,t.now+t.unit)}}},$.propHooks.scrollTop=$.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},xt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},xt.fx=$.prototype.init,xt.fx.step={};var xe,we,Se=/^(?:toggle|show|hide)$/,Ee=/queueHooks$/;xt.Animation=xt.extend(K,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return x(n.elem,t,zt.exec(e),n),n}]},tweener:function(t,e){xt.isFunction(t)?(e=t,t=["*"]):t=t.match(Dt);for(var n,r=0,i=t.length;r<i;r++)n=t[r],K.tweeners[n]=K.tweeners[n]||[],K.tweeners[n].unshift(e)},prefilters:[Y],prefilter:function(t,e){e?K.prefilters.unshift(t):K.prefilters.push(t)}}),xt.speed=function(t,e,n){var r=t&&"object"===("undefined"==typeof t?"undefined":i(t))?xt.extend({},t):{complete:n||!n&&e||xt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!xt.isFunction(e)&&e};return xt.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in xt.fx.speeds?r.duration=xt.fx.speeds[r.duration]:r.duration=xt.fx.speeds._default),null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){xt.isFunction(r.old)&&r.old.call(this),r.queue&&xt.dequeue(this,r.queue)},r},xt.fn.extend({fadeTo:function(t,e,n,r){return this.filter(Xt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=xt.isEmptyObject(t),o=xt.speed(e,n,r),u=function(){var e=K(this,xt.extend({},t),o);(i||Wt.get(this,"finish"))&&e.stop(!0)};return u.finish=u,i||o.queue===!1?this.each(u):this.queue(o.queue,u)},stop:function(t,e,n){var r=function(t){
var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=xt.timers,u=Wt.get(this);if(i)u[i]&&u[i].stop&&r(u[i]);else for(i in u)u[i]&&u[i].stop&&Ee.test(i)&&r(u[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||xt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Wt.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=xt.timers,u=r?r.length:0;for(n.finish=!0,xt.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<u;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),xt.each(["toggle","show","hide"],function(t,e){var n=xt.fn[e];xt.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(V(e,!0),t,r,i)}}),xt.each({slideDown:V("show"),slideUp:V("hide"),slideToggle:V("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){xt.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),xt.timers=[],xt.fx.tick=function(){var t,e=0,n=xt.timers;for(xe=xt.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||xt.fx.stop(),xe=void 0},xt.fx.timer=function(t){xt.timers.push(t),xt.fx.start()},xt.fx.interval=13,xt.fx.start=function(){we||(we=!0,G())},xt.fx.stop=function(){we=null},xt.fx.speeds={slow:600,fast:200,_default:400},xt.fn.delay=function(t,e){return t=xt.fx?xt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var r=o.setTimeout(e,t);n.stop=function(){o.clearTimeout(r)}})},function(){var t=st.createElement("input"),e=st.createElement("select"),n=e.appendChild(st.createElement("option"));t.type="checkbox",mt.checkOn=""!==t.value,mt.optSelected=n.selected,t=st.createElement("input"),t.value="t",t.type="radio",mt.radioValue="t"===t.value}();var Te,_e=xt.expr.attrHandle;xt.fn.extend({attr:function(t,e){return Ht(this,xt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){xt.removeAttr(this,t)})}}),xt.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?xt.prop(t,e,n):(1===o&&xt.isXMLDoc(t)||(i=xt.attrHooks[e.toLowerCase()]||(xt.expr.match.bool.test(e)?Te:void 0)),void 0!==n?null===n?void xt.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=xt.find.attr(t,e),null==r?void 0:r))},attrHooks:{type:{set:function(t,e){if(!mt.radioValue&&"radio"===e&&a(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(Dt);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),Te={set:function(t,e,n){return e===!1?xt.removeAttr(t,n):t.setAttribute(n,n),n}},xt.each(xt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=_e[e]||xt.find.attr;_e[e]=function(t,e,r){var i,o,u=e.toLowerCase();return r||(o=_e[u],_e[u]=i,i=null!=n(t,e,r)?u:null,_e[u]=o),i}});var ke=/^(?:input|select|textarea|button)$/i,je=/^(?:a|area)$/i;xt.fn.extend({prop:function(t,e){return Ht(this,xt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[xt.propFix[t]||t]})}}),xt.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&xt.isXMLDoc(t)||(e=xt.propFix[e]||e,i=xt.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=xt.find.attr(t,"tabindex");return e?parseInt(e,10):ke.test(t.nodeName)||je.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),mt.optSelected||(xt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),xt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){xt.propFix[this.toLowerCase()]=this}),xt.fn.extend({addClass:function(t){var e,n,r,i,o,u,s,c=0;if(xt.isFunction(t))return this.each(function(e){xt(this).addClass(t.call(this,e,Z(this)))});if("string"==typeof t&&t)for(e=t.match(Dt)||[];n=this[c++];)if(i=Z(n),r=1===n.nodeType&&" "+Q(i)+" "){for(u=0;o=e[u++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=Q(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,u,s,c=0;if(xt.isFunction(t))return this.each(function(e){xt(this).removeClass(t.call(this,e,Z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(Dt)||[];n=this[c++];)if(i=Z(n),r=1===n.nodeType&&" "+Q(i)+" "){for(u=0;o=e[u++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=Q(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n="undefined"==typeof t?"undefined":i(t);return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):xt.isFunction(t)?this.each(function(n){xt(this).toggleClass(t.call(this,n,Z(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(r=0,i=xt(this),o=t.match(Dt)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||(e=Z(this),e&&Wt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Wt.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+Q(Z(n))+" ").indexOf(e)>-1)return!0;return!1}});var Ce=/\r/g;xt.fn.extend({val:function(t){var e,n,r,i=this[0];{if(arguments.length)return r=xt.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,xt(this).val()):t,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=xt.map(i,function(t){return null==t?"":t+""})),e=xt.valHooks[this.type]||xt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))});if(i)return e=xt.valHooks[i.type]||xt.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(Ce,""):null==n?"":n)}}}),xt.extend({valHooks:{option:{get:function(t){var e=xt.find.attr(t,"value");return null!=e?e:Q(xt.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,u="select-one"===t.type,s=u?null:[],c=u?o+1:i.length;for(r=o<0?c:u?o:0;r<c;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!a(n.parentNode,"optgroup"))){if(e=xt(n).val(),u)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=xt.makeArray(e),u=i.length;u--;)r=i[u],(r.selected=xt.inArray(xt.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),xt.each(["radio","checkbox"],function(){xt.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=xt.inArray(xt(t).val(),e)>-1}},mt.checkOn||(xt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Oe=/^(?:focusinfocus|focusoutblur)$/;xt.extend(xt.event,{trigger:function(t,e,n,r){var u,s,c,a,f,l,h,p=[n||st],d=vt.call(t,"type")?t.type:t,v=vt.call(t,"namespace")?t.namespace.split("."):[];if(s=c=n=n||st,3!==n.nodeType&&8!==n.nodeType&&!Oe.test(d+xt.event.triggered)&&(d.indexOf(".")>-1&&(v=d.split("."),d=v.shift(),v.sort()),f=d.indexOf(":")<0&&"on"+d,t=t[xt.expando]?t:new xt.Event(d,"object"===("undefined"==typeof t?"undefined":i(t))&&t),t.isTrigger=r?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:xt.makeArray(e,[t]),h=xt.event.special[d]||{},r||!h.trigger||h.trigger.apply(n,e)!==!1)){if(!r&&!h.noBubble&&!xt.isWindow(n)){for(a=h.delegateType||d,Oe.test(a+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),c=s;c===(n.ownerDocument||st)&&p.push(c.defaultView||c.parentWindow||o)}for(u=0;(s=p[u++])&&!t.isPropagationStopped();)t.type=u>1?a:h.bindType||d,l=(Wt.get(s,"events")||{})[t.type]&&Wt.get(s,"handle"),l&&l.apply(s,e),l=f&&s[f],l&&l.apply&&qt(s)&&(t.result=l.apply(s,e),t.result===!1&&t.preventDefault());return t.type=d,r||t.isDefaultPrevented()||h._default&&h._default.apply(p.pop(),e)!==!1||!qt(n)||f&&xt.isFunction(n[d])&&!xt.isWindow(n)&&(c=n[f],c&&(n[f]=null),xt.event.triggered=d,n[d](),xt.event.triggered=void 0,c&&(n[f]=c)),t.result}},simulate:function(t,e,n){var r=xt.extend(new xt.Event,n,{type:t,isSimulated:!0});xt.event.trigger(r,null,e)}}),xt.fn.extend({trigger:function(t,e){return this.each(function(){xt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return xt.event.trigger(t,e,n,!0)}}),xt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){xt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),xt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),mt.focusin="onfocusin"in o,mt.focusin||xt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){xt.event.simulate(e,t.target,xt.event.fix(t))};xt.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Wt.access(r,e);i||r.addEventListener(t,n,!0),Wt.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Wt.access(r,e)-1;i?Wt.access(r,e,i):(r.removeEventListener(t,n,!0),Wt.remove(r,e))}}});var Ae=o.location,Me=xt.now(),Ne=/\?/;xt.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new o.DOMParser).parseFromString(t,"text/xml")}catch(n){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||xt.error("Invalid XML: "+t),e};var Pe=/\[\]$/,Fe=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;xt.param=function(t,e){var n,r=[],i=function(t,e){var n=xt.isFunction(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!xt.isPlainObject(t))xt.each(t,function(){i(this.name,this.value)});else for(n in t)tt(n,t[n],e,i);return r.join("&")},xt.fn.extend({serialize:function(){return xt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=xt.prop(this,"elements");return t?xt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!xt(this).is(":disabled")&&De.test(this.nodeName)&&!Le.test(t)&&(this.checked||!Kt.test(t))}).map(function(t,e){var n=xt(this).val();return null==n?null:Array.isArray(n)?xt.map(n,function(t){return{name:e.name,value:t.replace(Fe,"\r\n")}}):{name:e.name,value:n.replace(Fe,"\r\n")}}).get()}});var Ie=/%20/g,Re=/#.*$/,He=/([?&])_=[^&]*/,qe=/^(.*?):[ \t]*([^\r\n]*)$/gm,We=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Be=/^(?:GET|HEAD)$/,Ue=/^\/\//,$e={},Ge={},ze="*/".concat("*"),Ve=st.createElement("a");Ve.href=Ae.href,xt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:We.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":xt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?rt(rt(t,xt.ajaxSettings),e):rt(xt.ajaxSettings,t)},ajaxPrefilter:et($e),ajaxTransport:et(Ge),ajax:function(t,e){function n(t,e,n,i){var c,f,p,d,w,S=e;l||(l=!0,a&&o.clearTimeout(a),r=void 0,s=i||"",T.readyState=t>0?4:0,c=t>=200&&t<300||304===t,n&&(d=it(v,T,n)),d=ot(v,d,T,c),c?(v.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(xt.lastModified[u]=w),w=T.getResponseHeader("etag"),w&&(xt.etag[u]=w)),204===t||"HEAD"===v.type?S="nocontent":304===t?S="notmodified":(S=d.state,f=d.data,p=d.error,c=!p)):(p=S,!t&&S||(S="error",t<0&&(t=0))),T.status=t,T.statusText=(e||S)+"",c?m.resolveWith(y,[f,S,T]):m.rejectWith(y,[T,S,p]),T.statusCode(x),x=void 0,h&&g.trigger(c?"ajaxSuccess":"ajaxError",[T,v,c?f:p]),b.fireWith(y,[T,S]),h&&(g.trigger("ajaxComplete",[T,v]),--xt.active||xt.event.trigger("ajaxStop")))}"object"===("undefined"==typeof t?"undefined":i(t))&&(e=t,t=void 0),e=e||{};var r,u,s,c,a,f,l,h,p,d,v=xt.ajaxSetup({},e),y=v.context||v,g=v.context&&(y.nodeType||y.jquery)?xt(y):xt.event,m=xt.Deferred(),b=xt.Callbacks("once memory"),x=v.statusCode||{},w={},S={},E="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(l){if(!c)for(c={};e=qe.exec(s);)c[e[1].toLowerCase()]=e[2];e=c[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return l?s:null},setRequestHeader:function(t,e){return null==l&&(t=S[t.toLowerCase()]=S[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==l&&(v.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)T.always(t[T.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||E;return r&&r.abort(e),n(0,e),this}};if(m.promise(T),v.url=((t||v.url||Ae.href)+"").replace(Ue,Ae.protocol+"//"),v.type=e.method||e.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(Dt)||[""],null==v.crossDomain){f=st.createElement("a");try{f.href=v.url,f.href=f.href,v.crossDomain=Ve.protocol+"//"+Ve.host!=f.protocol+"//"+f.host}catch(_){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=xt.param(v.data,v.traditional)),nt($e,v,e,T),l)return T;h=xt.event&&v.global,h&&0===xt.active++&&xt.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Be.test(v.type),u=v.url.replace(Re,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Ie,"+")):(d=v.url.slice(u.length),v.data&&(u+=(Ne.test(u)?"&":"?")+v.data,delete v.data),v.cache===!1&&(u=u.replace(He,"$1"),d=(Ne.test(u)?"&":"?")+"_="+Me++ +d),v.url=u+d),v.ifModified&&(xt.lastModified[u]&&T.setRequestHeader("If-Modified-Since",xt.lastModified[u]),xt.etag[u]&&T.setRequestHeader("If-None-Match",xt.etag[u])),(v.data&&v.hasContent&&v.contentType!==!1||e.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+ze+"; q=0.01":""):v.accepts["*"]);for(p in v.headers)T.setRequestHeader(p,v.headers[p]);if(v.beforeSend&&(v.beforeSend.call(y,T,v)===!1||l))return T.abort();if(E="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),r=nt(Ge,v,e,T)){if(T.readyState=1,h&&g.trigger("ajaxSend",[T,v]),l)return T;v.async&&v.timeout>0&&(a=o.setTimeout(function(){T.abort("timeout")},v.timeout));try{l=!1,r.send(w,n)}catch(_){if(l)throw _;n(-1,_)}}else n(-1,"No Transport");return T},getJSON:function(t,e,n){return xt.get(t,e,n,"json")},getScript:function(t,e){return xt.get(t,void 0,e,"script")}}),xt.each(["get","post"],function(t,e){xt[e]=function(t,n,r,i){return xt.isFunction(n)&&(i=i||r,r=n,n=void 0),xt.ajax(xt.extend({url:t,type:e,dataType:i,data:n,success:r},xt.isPlainObject(t)&&t))}}),xt._evalUrl=function(t){return xt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},xt.fn.extend({wrapAll:function(t){var e;return this[0]&&(xt.isFunction(t)&&(t=t.call(this[0])),e=xt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return xt.isFunction(t)?this.each(function(e){xt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=xt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=xt.isFunction(t);return this.each(function(n){xt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){xt(this).replaceWith(this.childNodes)}),this}}),xt.expr.pseudos.hidden=function(t){return!xt.expr.pseudos.visible(t)},xt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},xt.ajaxSettings.xhr=function(){try{return new o.XMLHttpRequest}catch(t){}};var Xe={0:200,1223:204},Ye=xt.ajaxSettings.xhr();mt.cors=!!Ye&&"withCredentials"in Ye,mt.ajax=Ye=!!Ye,xt.ajaxTransport(function(t){var e,n;if(mt.cors||Ye&&!t.crossDomain)return{send:function(r,i){var u,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(u in t.xhrFields)s[u]=t.xhrFields[u];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(u in r)s.setRequestHeader(u,r[u]);e=function(t){return function(){e&&(e=n=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Xe[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),n=s.onerror=e("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&o.setTimeout(function(){e&&n()})},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(c){if(e)throw c}},abort:function(){e&&e()}}}),xt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),xt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return xt.globalEval(t),t}}}),xt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),xt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=xt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),st.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Je=[],Ke=/(=)\?(?=&|$)|\?\?/;xt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Je.pop()||xt.expando+"_"+Me++;return this[t]=!0,t}}),xt.ajaxPrefilter("json jsonp",function(t,e,n){var r,i,u,s=t.jsonp!==!1&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=xt.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ke,"$1"+r):t.jsonp!==!1&&(t.url+=(Ne.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return u||xt.error(r+" was not called"),u[0]},t.dataTypes[0]="json",i=o[r],o[r]=function(){u=arguments},n.always(function(){void 0===i?xt(o).removeProp(r):o[r]=i,t[r]&&(t.jsonpCallback=e.jsonpCallback,Je.push(r)),u&&xt.isFunction(i)&&i(u[0]),u=i=void 0}),"script"}),mt.createHTMLDocument=function(){var t=st.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),xt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var r,i,o;return e||(mt.createHTMLDocument?(e=st.implementation.createHTMLDocument(""),r=e.createElement("base"),r.href=st.location.href,e.head.appendChild(r)):e=st),i=Ot.exec(t),o=!n&&[],i?[e.createElement(i[1])]:(i=_([t],e,o),o&&o.length&&xt(o).remove(),xt.merge([],i.childNodes))},xt.fn.load=function(t,e,n){var r,o,u,s=this,c=t.indexOf(" ");return c>-1&&(r=Q(t.slice(c)),t=t.slice(0,c)),xt.isFunction(e)?(n=e,e=void 0):e&&"object"===("undefined"==typeof e?"undefined":i(e))&&(o="POST"),s.length>0&&xt.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){u=arguments,s.html(r?xt("<div>").append(xt.parseHTML(t)).find(r):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,u||[t.responseText,e,t])})}),this},xt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){xt.fn[e]=function(t){return this.on(e,t)}}),xt.expr.pseudos.animated=function(t){return xt.grep(xt.timers,function(e){return t===e.elem}).length},xt.offset={setOffset:function(t,e,n){var r,i,o,u,s,c,a,f=xt.css(t,"position"),l=xt(t),h={};"static"===f&&(t.style.position="relative"),s=l.offset(),o=xt.css(t,"top"),c=xt.css(t,"left"),a=("absolute"===f||"fixed"===f)&&(o+c).indexOf("auto")>-1,a?(r=l.position(),u=r.top,i=r.left):(u=parseFloat(o)||0,i=parseFloat(c)||0),xt.isFunction(e)&&(e=e.call(t,n,xt.extend({},s))),null!=e.top&&(h.top=e.top-s.top+u),null!=e.left&&(h.left=e.left-s.left+i),"using"in e?e.using.call(t,h):l.css(h)}},xt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){xt.offset.setOffset(this,t,e)});var e,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),e=o.ownerDocument,n=e.documentElement,i=e.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===xt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),a(t[0],"html")||(r=t.offset()),r={top:r.top+xt.css(t[0],"borderTopWidth",!0),left:r.left+xt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-r.top-xt.css(n,"marginTop",!0),left:e.left-r.left-xt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===xt.css(t,"position");)t=t.offsetParent;return t||ne})}}),xt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;xt.fn[t]=function(r){return Ht(this,function(t,r,i){var o;return xt.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i?o?o[e]:t[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i)},t,r,arguments.length)}}),xt.each(["top","left"],function(t,e){xt.cssHooks[e]=R(mt.pixelPosition,function(t,n){if(n)return n=I(t,e),he.test(n)?xt(t).position()[e]+"px":n})}),xt.each({Height:"height",Width:"width"},function(t,e){xt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){xt.fn[r]=function(i,o){var u=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||o===!0?"margin":"border");return Ht(this,function(e,n,i){var o;return xt.isWindow(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?xt.css(e,n,s):xt.style(e,n,i,s)},e,u?i:void 0,u)}})}),xt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),xt.holdReady=function(t){t?xt.readyWait++:xt.ready(!0)},xt.isArray=Array.isArray,xt.parseJSON=JSON.parse,xt.nodeName=a,n=[],r=function(){return xt}.apply(e,n),!(void 0!==r&&(t.exports=r));var Qe=o.jQuery,Ze=o.$;return xt.noConflict=function(t){return o.$===xt&&(o.$=Ze),t&&o.jQuery===xt&&(o.jQuery=Qe),xt},u||(o.jQuery=o.$=xt),xt})}).call(e,n(91)(t))},function(t,e,n){"use strict";t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(o){"object"===("undefined"==typeof window?"undefined":i(window))&&(r=window)}t.exports=r},function(t,e,n){"use strict";t.exports=!n(6)&&!n(3)(function(){return 7!=Object.defineProperty(n(63)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";e.f=n(5)},function(t,e,n){"use strict";var r=n(11),i=n(15),o=n(50)(!1),u=n(65)("IE_PROTO");t.exports=function(t,e){var n,s=i(t),c=0,a=[];for(n in s)n!=u&&r(s,n)&&a.push(n);for(;e.length>c;)r(s,n=e[c++])&&(~o(a,n)||a.push(n));return a}},function(t,e,n){"use strict";var r=n(7),i=n(1),o=n(34);t.exports=n(6)?Object.defineProperties:function(t,e){i(t);for(var n,u=o(e),s=u.length,c=0;s>c;)r.f(t,n=u[c++],e[n]);return t}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(15),o=n(37).f,u={}.toString,s="object"==("undefined"==typeof window?"undefined":r(window))&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(e){return s.slice()}};t.exports.f=function(t){return s&&"[object Window]"==u.call(t)?c(t):o(i(t))}},function(t,e,n){"use strict";var r=n(34),i=n(51),o=n(47),u=n(9),s=n(46),c=Object.assign;t.exports=!c||n(3)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=r})?function(t,e){for(var n=u(t),c=arguments.length,a=1,f=i.f,l=o.f;c>a;)for(var h,p=s(arguments[a++]),d=f?r(p).concat(f(p)):r(p),v=d.length,y=0;v>y;)l.call(p,h=d[y++])&&(n[h]=p[h]);return n}:c},function(t,e,n){"use strict";var r=n(10),i=n(4),o=n(100),u=[].slice,s={},c=function(t,e,n){if(!(e in s)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";s[e]=Function("F,a","return new F("+r.join(",")+")")}return s[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=u.call(arguments,1),s=function a(){var r=n.concat(u.call(arguments));return this instanceof a?c(e,r.length,r):o(e,r,t)};return i(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e,n){"use strict";t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){"use strict";var r=n(2).parseInt,i=n(43).trim,o=n(69),u=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(u.test(n)?16:10))}:r},function(t,e,n){"use strict";var r=n(2).parseFloat,i=n(43).trim;t.exports=1/r(n(69)+"-0")!==-(1/0)?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){"use strict";var r=n(19);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){"use strict";var r=n(4),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,e,n){"use strict";t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){"use strict";var r=n(72),i=Math.pow,o=i(2,-52),u=i(2,-23),s=i(2,127)*(2-u),c=i(2,-126),a=function(t){return t+1/o-1/o};t.exports=Math.fround||function(t){var e,n,i=Math.abs(t),f=r(t);return i<c?f*a(i/c/u)*c*u:(e=(1+u/o)*i,n=e-(e-i),n>s||n!=n?f*(1/0):f*n)}},function(t,e,n){"use strict";var r=n(1);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(o){var u=t["return"];throw void 0!==u&&r(u.call(t)),o}}},function(t,e,n){"use strict";var r=n(10),i=n(9),o=n(46),u=n(8);t.exports=function(t,e,n,s,c){r(e);var a=i(t),f=o(a),l=u(a.length),h=c?l-1:0,p=c?-1:1;if(n<2)for(;;){if(h in f){s=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(s=e(s,f[h],h,a));return s}},function(t,e,n){"use strict";var r=n(9),i=n(35),o=n(8);t.exports=[].copyWithin||function(t,e){var n=r(this),u=o(n.length),s=i(t,u),c=i(e,u),a=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===a?u:i(a,u))-c,u-s),l=1;for(c<s&&s<c+f&&(l=-1,c+=f-1,s+=f-1);f-- >0;)c in n?n[s]=n[c]:delete n[s],s+=l,c+=l;return n}},function(t,e,n){"use strict";t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";n(6)&&"g"!=/./g.flags&&n(7).f(RegExp.prototype,"flags",{configurable:!0,get:n(55)})},function(t,e,n){"use strict";t.exports=function(t){try{return{e:!1,v:t()}}catch(e){return{e:!0,v:e}}}},function(t,e,n){"use strict";var r=n(1),i=n(4),o=n(87);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t),u=n.resolve;return u(e),n.promise}},function(t,e,n){"use strict";var r=n(115),i=n(45),o="Map";t.exports=n(58)(o,function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(i(this,o),t);return e&&e.v},set:function(t,e){return r.def(i(this,o),0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(7).f,i=n(36),o=n(41),u=n(18),s=n(39),c=n(40),a=n(75),f=n(110),l=n(38),h=n(6),p=n(29).fastKey,d=n(45),v=h?"_s":"size",y=function(t,e){var n,r=p(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,a){var f=t(function(t,r){s(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,void 0!=r&&c(r,n,t[a],t)});return o(f.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},"delete":function(t){var n=d(this,e),r=y(n,t);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[v]--}return!!r},forEach:function(t){d(this,e);for(var n,r=u(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!y(d(this,e),t)}}),h&&r(f.prototype,"size",{get:function(){return d(this,e)[v]}}),f},def:function(t,e,n){var r,i,o=y(t,e);return o?o.v=n:(t._l=o={i:i=p(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:y,setStrong:function(t,e,n){a(t,e,function(t,n){this._t=d(t,e),this._k=n,this._l=void 0},function(){for(var t=this,e=t._k,n=t._l;n&&n.r;)n=n.p;return t._t&&(t._l=n=n?n.n:t._t._f)?"keys"==e?f(0,n.k):"values"==e?f(0,n.v):f(0,[n.k,n.v]):(t._t=void 0,f(1))},n?"entries":"values",!n,!0),l(e)}}},function(t,e,n){"use strict";var r=n(115),i=n(45),o="Set";t.exports=n(58)(o,function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,o),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r,i=n(26)(0),o=n(13),u=n(29),s=n(98),c=n(118),a=n(4),f=n(3),l=n(45),h="WeakMap",p=u.getWeak,d=Object.isExtensible,v=c.ufstore,y={},g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(a(t)){var e=p(t);return e===!0?v(l(this,h)).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(l(this,h),t,e)}},b=t.exports=n(58)(h,g,m,c,!0,!0);f(function(){return 7!=(new b).set((Object.freeze||Object)(y),7).get(y)})&&(r=c.getConstructor(g,h),s(r.prototype,m),u.NEED=!0,i(["delete","has","get","set"],function(t){var e=b.prototype,n=e[t];o(e,t,function(e,i){if(a(e)&&!d(e)){this._f||(this._f=new r);var o=this._f[t](e,i);return"set"==t?this:o}return n.call(this,e,i)})}))},function(t,e,n){"use strict";var r=n(41),i=n(29).getWeak,o=n(1),u=n(4),s=n(39),c=n(40),a=n(26),f=n(11),l=n(45),h=a(5),p=a(6),d=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,e){return h(t.a,function(t){return t[0]===e})};y.prototype={get:function(t){var e=g(this,t);if(e)return e[1]},has:function(t){return!!g(this,t)},set:function(t,e){var n=g(this,t);n?n[1]=e:this.a.push([t,e])},"delete":function(t){
var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,o){var a=t(function(t,r){s(t,a,e,"_i"),t._t=e,t._i=d++,t._l=void 0,void 0!=r&&c(r,n,t[o],t)});return r(a.prototype,{"delete":function(t){if(!u(t))return!1;var n=i(t);return n===!0?v(l(this,e))["delete"](t):n&&f(n,this._i)&&delete n[this._i]},has:function(t){if(!u(t))return!1;var n=i(t);return n===!0?v(l(this,e)).has(t):n&&f(n,this._i)}}),a},def:function(t,e,n){var r=i(o(e),!0);return r===!0?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},function(t,e,n){"use strict";var r=n(24),i=n(8);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){"use strict";var r=n(37),i=n(51),o=n(1),u=n(2).Reflect;t.exports=u&&u.ownKeys||function(t){var e=r.f(o(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){"use strict";function r(t,e,n,a,f,l,h,p){for(var d,v,y=f,g=0,m=!!h&&s(h,p,3);g<a;){if(g in n){if(d=m?m(n[g],g,e):n[g],v=!1,o(d)&&(v=d[c],v=void 0!==v?!!v:i(d)),v&&l>0)y=r(t,e,d,u(d.length),y,l-1)-1;else{if(y>=9007199254740991)throw TypeError();t[y]=d}y++}g++}return y}var i=n(52),o=n(4),u=n(8),s=n(18),c=n(5)("isConcatSpreadable");t.exports=r},function(t,e,n){"use strict";var r=n(8),i=n(71),o=n(23);t.exports=function(t,e,n,u){var s=String(o(t)),c=s.length,a=void 0===n?" ":String(n),f=r(e);if(f<=c||""==a)return s;var l=f-c,h=i.call(a,Math.ceil(l/a.length));return h.length>l&&(h=h.slice(0,l)),u?h+s:s+h}},function(t,e,n){"use strict";var r=n(34),i=n(15),o=n(47).f;t.exports=function(t){return function(e){for(var n,u=i(e),s=r(u),c=s.length,a=0,f=[];c>a;)o.call(u,n=s[a++])&&f.push(t?[n,u[n]]:u[n]);return f}}},function(t,e,n){"use strict";var r=n(48),i=n(125);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,e,n){"use strict";var r=n(40);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e,n){"use strict";t.exports=Math.scale||function(t,e,n,r,i){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||i!=i?NaN:t===1/0||t===-(1/0)?t:(t-e)*(i-r)/(n-e)+r}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}var i=n(128),o=r(i),u=n(90),s=r(u),c=n(133),a=r(c);n(135),n(136),n(338),(0,s["default"])(function(){s["default"].scrollify({section:".panel",setHeights:!0});var t=new o["default"](document.querySelector("#nokey"));t.startAnimation();var e=document.querySelector("#work-panel");document.querySelector("#panel-toggle").addEventListener("click",function(){e.classList.toggle("open")}),(new a["default"]).show().then(function(){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src="./assets/js/postcookie.js",document.querySelector("body").appendChild(t)})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(129),s=r(u),c=n(130),a=r(c),f=n(131),l=r(f),h=n(132),p=r(h),d=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{pointCount:50,pointSpeed:50};i(this,t),this.pointSpeed=r.pointSpeed;var o=p["default"].isMobile()?r.pointCount/3:r.pointCount;this.canvas=e,this.context=this.canvas.getContext("2d"),this.rect=new a["default"](0,0,parseFloat(window.innerWidth),parseFloat(window.innerHeight)),this.canvas.setAttribute("width",this.rect.Width),this.canvas.setAttribute("height",this.rect.Height),this.maxDistance=260,this.points=[];for(var u=0;u<o;u++){var c=this.getRandomPos(!0);this.points.push({pos:c,velocity:this.getRandomVelocity(c),color:new l["default"](230,230,230,1),r:2,phase:10*Math.random()})}this.lastFrame=Date.now(),window.addEventListener("resize",this.resize.bind(this)),this.mousePoint=Object.assign({},this.points[0]),this.mousePoint.alpha=0,this.points.push(this.mousePoint),p["default"].isMobile()===!1&&(window.addEventListener("mouseenter",function(){n.mousePoint.velocity=new s["default"](0,0)}),window.addEventListener("mouseleave",function(){n.mousePoint.pos=new s["default"](0,0)}),window.addEventListener("mousemove",function(t){n.mousePoint.pos.X=t.clientX,n.mousePoint.pos.Y=t.clientY}))}return o(t,[{key:"getRandomPos",value:function(t){var e=new s["default"](Math.random()*this.rect.width,Math.random()*this.rect.height);if(t)return e;switch(Math.ceil(4*Math.random())-1){case 0:e.x=0;break;case 1:e.x=this.rect.width;break;case 2:e.y=0;break;case 3:e.y=this.rect.height}return e}},{key:"getRandomVelocity",value:function(t){var e=new s["default"](Math.random(),Math.random());return this.rect.inside(t,-10)||(e.x*=0===t.x?1:-1,e.y*=0===t.y?1:-1),e}},{key:"update",value:function(t){var e=this;this.points.forEach(function(n){n.pos.X+=n.velocity.X/e.pointSpeed*t,n.pos.Y+=n.velocity.Y/e.pointSpeed*t,e.rect.inside(n.pos,50)||(n.pos=e.getRandomPos(),n.velocity=e.getRandomVelocity(n.pos),n.phase=10*Math.random()),n.phase+=.003,n.color.Alpha=Math.abs(Math.cos(n.phase))})}},{key:"resize",value:function(){this.rect.Width=parseFloat(document.body.clientWidth),this.rect.Height=parseFloat(window.innerHeight),this.canvas.setAttribute("width",this.rect.Width),this.canvas.setAttribute("height",this.rect.Height)}},{key:"render",value:function(){var t=Date.now()-this.lastFrame;this.context.clearRect(this.rect.X,this.rect.Y,this.rect.Width,this.rect.Height),this.drawPoints(),this.drawLines(),this.update(t),this.lastFrame=Date.now(),setTimeout(this.render.bind(this),25)}},{key:"drawPoints",value:function(){var t=this;this.points.forEach(function(e){if(!e.hasOwnProperty("type")){var n=e.pos;t.context.fillStyle="rgba("+e.color.Red+", "+e.color.Green+", "+e.color.Blue+", "+e.color.Alpha+")",t.context.beginPath(),t.context.arc(n.X,n.Y,e.r,0,2*Math.PI,!0),t.context.closePath(),t.context.fill()}})}},{key:"drawLines",value:function(){for(var t=void 0,e=void 0,n=0;n<this.points.length;n++)for(var r=n+1;r<this.points.length;r++){var i=this.points[n],o=this.points[r];t=Math.sqrt(Math.pow(i.pos.X-o.pos.X,2)+Math.pow(i.pos.Y-o.pos.Y,2))/this.maxDistance,t<1&&(e=1-t,this.context.strokeStyle="rgba(150, 150, 150, "+e+")",this.context.lineWidth=.8,this.context.beginPath(),this.context.moveTo(i.pos.X,i.pos.Y),this.context.lineTo(o.pos.X,o.pos.Y),this.context.stroke(),this.context.closePath())}}},{key:"startAnimation",value:function(){this.resize(),this.render()}}]),t}();e["default"]=d},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(e,n){r(this,t),this.x=e,this.y=n}return i(t,[{key:"X",set:function(t){this.x=t},get:function(){return this.x}},{key:"Y",set:function(t){this.y=t},get:function(){return this.y}}]),t}();e["default"]=o},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(e,n,i,o){r(this,t),this.x=e,this.y=n,this.width=i,this.height=o}return i(t,[{key:"inside",value:function(t,e){return t.X>this.x-e&&t.X<this.x+this.width+e&&t.Y>this.y-e&&t.Y<this.y+this.height+e}},{key:"X",get:function(){return this.x},set:function(t){this.x=t}},{key:"Y",get:function(){return this.y},set:function(t){this.y=t}},{key:"Width",get:function(){return this.width},set:function(t){this.width=t}},{key:"Height",get:function(){return this.height},set:function(t){this.height=t}}]),t}();e["default"]=o},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(e,n,i,o){r(this,t),this.r=e,this.g=n,this.b=i,this.a=o}return i(t,[{key:"Red",get:function(){return this.r},set:function(t){this.r=t}},{key:"Green",get:function(){return this.g},set:function(t){this.g=t}},{key:"Blue",get:function(){return this.b},set:function(t){this.b=t}},{key:"Alpha",get:function(){return this.a},set:function(t){this.a=t}}]),t}();e["default"]=o},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(){r(this,t)}return i(t,null,[{key:"isMobile",value:function(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}}]),t}();e["default"]=o},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){function r(i,o){try{var u=e[i](o),s=u.value}catch(c){return void n(c)}return u.done?void t(s):Promise.resolve(s).then(function(t){r("next",t)},function(t){r("throw",t)})}return r("next")})}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var u=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(134),c=r(s),a=function(){function t(){o(this,t),this.element=document.querySelector("div.cookies")}return u(t,[{key:"show",value:function(){function t(){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(){var t=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise(function(e){c["default"].getValue("accept-cookies")?e():(t.element.classList.remove("hidden"),t.element.addEventListener("click",function(){t.element.classList.add("hidden"),document.cookie="accept-cookies=true",e()}))}));case 1:case"end":return e.stop()}},n,this)}));return t}()}]),t}();e["default"]=a},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(){r(this,t)}return i(t,null,[{key:"getValue",value:function(e){var n=t.parseCookies();return void 0!==n[e]?n[e]:null}},{key:"parseCookies",value:function(){for(var t=document.cookie.split(";"),e={},n=[],r=0;r<t.length;r++)n=t[r].trim().split("="),e[n[0]]=n[1];return e}}]),t}();e["default"]=o},function(t,e,n){"use strict";var r,i,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(o,u){r=[n(90)],i=function(t){return u(t,o,o.document)}.apply(e,r),!(void 0!==i&&(t.exports=i))}("undefined"!=typeof window?window:void 0,function(t,e,n,r){function i(){return E.height()+L.offset}function u(n,r,o,u){if(x===n&&(o=!1),C===!0)return!0;if(y[n]){if(_=!1,M===!0&&(L.afterRender(),M=!1),o&&"function"==typeof L.before&&L.before(n,g)===!1)return!0;if(w=1,P=v[n],M===!1&&x>n&&u===!1&&m[n]&&(l=i(),w=parseInt(g[n].outerHeight()/l),P=parseInt(v[n])+(g[n].outerHeight()-l)),L.updateHash&&L.sectionName&&(M!==!0||0!==n))if(history.pushState)try{history.replaceState(null,null,y[n])}catch(s){e.console&&console.warn("Scrollify warning: Page must be hosted to manipulate the hash value.")}else e.location.hash=y[n];if(x=n,r)t(L.target).stop().scrollTop(P),o&&L.after(n,g);else{if(k=!0,t().velocity?t(L.target).stop().velocity("scroll",{duration:L.scrollSpeed,easing:L.easing,offset:P,mobileHA:!1}):t(L.target).stop().animate({scrollTop:P},L.scrollSpeed,L.easing),e.location.hash.length&&L.sectionName&&e.console)try{t(e.location.hash).length&&console.warn("Scrollify warning: ID matches hash value - this will cause the page to anchor.")}catch(s){}t(L.target).promise().done(function(){k=!1,M=!1,o&&L.after(n,g)})}}}function s(t){function e(e){for(var n=0,r=t.slice(Math.max(t.length-e,1)),i=0;i<r.length;i++)n+=r[i];return Math.ceil(n/e)}var n=e(10),r=e(70);return n>=r}function c(t,e){for(var n=y.length;n>=0;n--)"string"==typeof t?y[n]===t&&(b=n,u(n,e,!0,!0)):n===t&&(b=n,u(n,e,!0,!0))}var a,f,l,h,p,d,v=[],y=[],g=[],m=[],b=0,x=0,w=1,S=!1,E=t(e),T=E.scrollTop(),_=!1,k=!1,j=!1,C=!1,O=[],A=(new Date).getTime(),M=!0,N=!1,P=0,F="onwheel"in n?"wheel":n.onmousewheel!==r?"mousewheel":"DOMMouseScroll",L={section:".section",sectionName:"section-name",interstitialSection:"",easing:"easeOutExpo",scrollSpeed:1100,offset:0,scrollbars:!0,target:"html,body",standardScrollElements:!1,setHeights:!0,overflowScroll:!0,updateHash:!0,touchScroll:!0,before:function(){},after:function(){},afterResize:function(){},afterRender:function(){}},D=function(r){function o(e){t().velocity?t(L.target).stop().velocity("scroll",{duration:L.scrollSpeed,easing:L.easing,offset:e,mobileHA:!1}):t(L.target).stop().animate({scrollTop:e},L.scrollSpeed,L.easing)}function c(e){e&&(T=E.scrollTop());var n=L.section;m=[],L.interstitialSection.length&&(n+=","+L.interstitialSection),L.scrollbars===!1&&(L.overflowScroll=!1),l=i(),t(n).each(function(e){var n=t(this);L.setHeights?n.is(L.interstitialSection)?m[e]=!1:n.css("height","auto").outerHeight()<l||"hidden"===n.css("overflow")?(n.css({height:l}),m[e]=!1):(n.css({height:n.height()}),L.overflowScroll?m[e]=!0:m[e]=!1):n.outerHeight()<l||L.overflowScroll===!1?m[e]=!1:m[e]=!0}),e&&E.scrollTop(T)}function x(n,r){var i=L.section;L.interstitialSection.length&&(i+=","+L.interstitialSection),v=[],y=[],g=[],t(i).each(function(n){var r=t(this);n>0?v[n]=parseInt(r.offset().top)+L.offset:v[n]=parseInt(r.offset().top),L.sectionName&&r.data(L.sectionName)?y[n]="#"+r.data(L.sectionName).toString().replace(/ /g,"-"):r.is(L.interstitialSection)===!1?y[n]="#"+(n+1):(y[n]="#",n===t(i).length-1&&n>1&&(v[n]=v[n-1]+(parseInt(t(t(i)[n-1]).outerHeight())-parseInt(t(e).height()))+parseInt(r.outerHeight()))),g[n]=r;try{t(y[n]).length&&e.console&&console.warn("Scrollify warning: Section names can't match IDs - this will cause the browser to anchor.")}catch(o){}e.location.hash===y[n]&&(b=n,S=!0)}),!0===n&&u(b,!1,!1,!1)}function M(){return!m[b]||(T=E.scrollTop(),!(T>parseInt(v[b])))}function P(){return!m[b]||(T=E.scrollTop(),l=i(),!(T<parseInt(v[b])+(g[b].outerHeight()-l)-28))}N=!0,t.easing.easeOutExpo=function(t,e,n,r,i){return e==i?n+r:r*(-Math.pow(2,-10*e/i)+1)+n},h={handleMousedown:function(){return C===!0||(_=!1,void(j=!1))},handleMouseup:function(){return C===!0||(_=!0,void(j&&h.calculateNearest(!1,!0)))},handleScroll:function(){return C===!0||(a&&clearTimeout(a),void(a=setTimeout(function(){return j=!0,_!==!1&&(_=!1,void h.calculateNearest(!1,!0))},200)))},calculateNearest:function(t,e){T=E.scrollTop();for(var n,r=1,i=v.length,o=0,s=Math.abs(v[0]-T);r<i;r++)n=Math.abs(v[r]-T),n<s&&(s=n,o=r);(P()&&o>b||M())&&(b=o,u(o,t,e,!1))},wheelHandler:function(n){if(C===!0)return!0;if(L.standardScrollElements&&(t(n.target).is(L.standardScrollElements)||t(n.target).closest(L.standardScrollElements).length))return!0;m[b]||n.preventDefault();var r=(new Date).getTime();n=n||e.event;var i=n.originalEvent.wheelDelta||-n.originalEvent.deltaY||-n.originalEvent.detail,o=Math.max(-1,Math.min(1,i));if(O.length>149&&O.shift(),O.push(Math.abs(i)),r-A>200&&(O=[]),A=r,k)return!1;if(o<0){if(b<v.length-1&&P()){if(!s(O))return!1;n.preventDefault(),b++,k=!0,u(b,!1,!0,!1)}}else if(o>0&&b>0&&M()){if(!s(O))return!1;n.preventDefault(),b--,k=!0,u(b,!1,!0,!1)}},keyHandler:function(t){return C===!0||n.activeElement.readOnly===!1||k!==!0&&void(38==t.keyCode||33==t.keyCode?b>0&&M()&&(t.preventDefault(),b--,u(b,!1,!0,!1)):40!=t.keyCode&&34!=t.keyCode||b<v.length-1&&P()&&(t.preventDefault(),b++,u(b,!1,!0,!1)))},init:function(){L.scrollbars?(E.on("mousedown",h.handleMousedown),E.on("mouseup",h.handleMouseup),E.on("scroll",h.handleScroll)):t("body").css({overflow:"hidden"}),E.on(F,h.wheelHandler),E.on("keydown",h.keyHandler)}},p={touches:{touchstart:{y:-1,x:-1},touchmove:{y:-1,x:-1},touchend:!1,direction:"undetermined"},options:{distance:30,timeGap:800,timeStamp:(new Date).getTime()},touchHandler:function(e){if(C===!0)return!0;if(L.standardScrollElements&&(t(e.target).is(L.standardScrollElements)||t(e.target).closest(L.standardScrollElements).length))return!0;var n;if("undefined"!=typeof e&&"undefined"!=typeof e.touches)switch(n=e.touches[0],e.type){case"touchstart":p.touches.touchstart.y=n.pageY,p.touches.touchmove.y=-1,p.touches.touchstart.x=n.pageX,p.touches.touchmove.x=-1,p.options.timeStamp=(new Date).getTime(),p.touches.touchend=!1;case"touchmove":p.touches.touchmove.y=n.pageY,p.touches.touchmove.x=n.pageX,p.touches.touchstart.y!==p.touches.touchmove.y&&Math.abs(p.touches.touchstart.y-p.touches.touchmove.y)>Math.abs(p.touches.touchstart.x-p.touches.touchmove.x)&&(e.preventDefault(),p.touches.direction="y",p.options.timeStamp+p.options.timeGap<(new Date).getTime()&&0==p.touches.touchend&&(p.touches.touchend=!0,p.touches.touchstart.y>-1&&Math.abs(p.touches.touchmove.y-p.touches.touchstart.y)>p.options.distance&&(p.touches.touchstart.y<p.touches.touchmove.y?p.up():p.down())));break;case"touchend":p.touches[e.type]===!1&&(p.touches[e.type]=!0,p.touches.touchstart.y>-1&&p.touches.touchmove.y>-1&&"y"===p.touches.direction&&(Math.abs(p.touches.touchmove.y-p.touches.touchstart.y)>p.options.distance&&(p.touches.touchstart.y<p.touches.touchmove.y?p.up():p.down()),p.touches.touchstart.y=-1,p.touches.touchstart.x=-1,p.touches.direction="undetermined"))}},down:function(){b<v.length&&(P()&&b<v.length-1?(b++,u(b,!1,!0,!1)):(l=i(),Math.floor(g[b].height()/l)>w?(o(parseInt(v[b])+l*w),w+=1):o(parseInt(v[b])+(g[b].outerHeight()-l))))},up:function(){b>=0&&(M()&&b>0?(b--,u(b,!1,!0,!1)):w>2?(l=i(),w-=1,o(parseInt(v[b])+l*w)):(w=1,o(parseInt(v[b]))))},init:function(){if(n.addEventListener&&L.touchScroll){var t={passive:!1};n.addEventListener("touchstart",p.touchHandler,t),n.addEventListener("touchmove",p.touchHandler,t),n.addEventListener("touchend",p.touchHandler,t)}}},d={refresh:function(t,e){clearTimeout(f),f=setTimeout(function(){c(!0),x(e,!1),t&&L.afterResize()},400)},handleUpdate:function(){d.refresh(!1,!1)},handleResize:function(){d.refresh(!0,!1)},handleOrientation:function(){d.refresh(!0,!0)}},L=t.extend(L,r),c(!1),x(!1,!0),!0===S?u(b,!1,!0,!0):setTimeout(function(){h.calculateNearest(!0,!1)},200),v.length&&(h.init(),p.init(),E.on("resize",d.handleResize),n.addEventListener&&e.addEventListener("orientationchange",d.handleOrientation,!1))};return D.move=function(e){return e!==r&&(e.originalEvent&&(e=t(this).attr("href")),void c(e,!1))},D.instantMove=function(t){return t!==r&&void c(t,!0)},D.next=function(){b<y.length&&(b+=1,u(b,!1,!0,!0))},D.previous=function(){b>0&&(b-=1,u(b,!1,!0,!0))},D.instantNext=function(){b<y.length&&(b+=1,u(b,!0,!0,!0))},D.instantPrevious=function(){b>0&&(b-=1,u(b,!0,!0,!0))},D.destroy=function(){return!!N&&(L.setHeights&&t(L.section).each(function(){t(this).css("height","auto")}),E.off("resize",d.handleResize),L.scrollbars&&(E.off("mousedown",h.handleMousedown),E.off("mouseup",h.handleMouseup),E.off("scroll",h.handleScroll)),E.off(F,h.wheelHandler),E.off("keydown",h.keyHandler),n.addEventListener&&L.touchScroll&&(n.removeEventListener("touchstart",p.touchHandler,!1),n.removeEventListener("touchmove",p.touchHandler,!1),n.removeEventListener("touchend",p.touchHandler,!1)),v=[],y=[],g=[],void(m=[]))},D.update=function(){return!!N&&void d.handleUpdate()},D.current=function(){return g[b]},D.currentIndex=function(){return b},D.disable=function(){C=!0},D.enable=function(){C=!1,N&&h.calculateNearest(!1,!1)},D.isDisabled=function(){return C},D.setOptions=function(n){return!!N&&void("object"===("undefined"==typeof n?"undefined":o(n))?(L=t.extend(L,n),d.handleUpdate()):e.console&&console.warn("Scrollify warning: setOptions expects an object."))},t.scrollify=D,D})},function(t,e,n){"use strict";(function(t){function e(t,e,n){t[e]||Object[r](t,e,{writable:!0,configurable:!0,value:n})}if(n(137),n(334),n(335),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var r="defineProperty";e(String.prototype,"padLeft","".padStart),e(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&e(Array,t,Function.call.bind([][t]))})}).call(e,n(92))},function(t,e,n){"use strict";n(138),n(140),n(141),n(142),n(143),n(144),n(145),n(146),n(147),n(148),n(149),n(150),n(151),n(152),n(153),n(154),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(218),n(219),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(84),n(242),n(243),n(111),n(244),n(245),n(246),n(247),n(248),n(114),n(116),n(117),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(331),n(332),n(333),t.exports=n(21)},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(2),o=n(11),u=n(6),s=n(0),c=n(13),a=n(29).KEY,f=n(3),l=n(49),h=n(42),p=n(32),d=n(5),v=n(94),y=n(64),g=n(139),m=n(52),b=n(1),x=n(4),w=n(15),S=n(22),E=n(31),T=n(36),_=n(97),k=n(16),j=n(7),C=n(34),O=k.f,A=j.f,M=_.f,N=i.Symbol,P=i.JSON,F=P&&P.stringify,L="prototype",D=d("_hidden"),I=d("toPrimitive"),R={}.propertyIsEnumerable,H=l("symbol-registry"),q=l("symbols"),W=l("op-symbols"),B=Object[L],U="function"==typeof N,$=i.QObject,G=!$||!$[L]||!$[L].findChild,z=u&&f(function(){return 7!=T(A({},"a",{get:function(){return A(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=O(B,e);r&&delete B[e],A(t,e,n),r&&t!==B&&A(B,e,r)}:A,V=function(t){var e=q[t]=T(N[L]);return e._k=t,e},X=U&&"symbol"==r(N.iterator)?function(t){return"symbol"==("undefined"==typeof t?"undefined":r(t))}:function(t){return t instanceof N},Y=function(t,e,n){return t===B&&Y(W,e,n),b(t),e=S(e,!0),b(n),o(q,e)?(n.enumerable?(o(t,D)&&t[D][e]&&(t[D][e]=!1),n=T(n,{enumerable:E(0,!1)})):(o(t,D)||A(t,D,E(1,{})),t[D][e]=!0),z(t,e,n)):A(t,e,n)},J=function(t,e){b(t);for(var n,r=g(e=w(e)),i=0,o=r.length;o>i;)Y(t,n=r[i++],e[n]);return t},K=function(t,e){return void 0===e?T(t):J(T(t),e)},Q=function(t){var e=R.call(this,t=S(t,!0));return!(this===B&&o(q,t)&&!o(W,t))&&(!(e||!o(this,t)||!o(q,t)||o(this,D)&&this[D][t])||e)},Z=function(t,e){if(t=w(t),e=S(e,!0),t!==B||!o(q,e)||o(W,e)){var n=O(t,e);return!n||!o(q,e)||o(t,D)&&t[D][e]||(n.enumerable=!0),n}},tt=function(t){for(var e,n=M(w(t)),r=[],i=0;n.length>i;)o(q,e=n[i++])||e==D||e==a||r.push(e);return r},et=function(t){for(var e,n=t===B,r=M(n?W:w(t)),i=[],u=0;r.length>u;)!o(q,e=r[u++])||n&&!o(B,e)||i.push(q[e]);return i};U||(N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function n(e){this===B&&n.call(W,e),o(this,D)&&o(this[D],t)&&(this[D][t]=!1),z(this,t,E(1,e))};return u&&G&&z(B,t,{configurable:!0,set:e}),V(t)},c(N[L],"toString",function(){return this._k}),k.f=Z,j.f=Y,n(37).f=_.f=tt,n(47).f=Q,n(51).f=et,u&&!n(33)&&c(B,"propertyIsEnumerable",Q,!0),v.f=function(t){return V(d(t))}),s(s.G+s.W+s.F*!U,{Symbol:N});for(var nt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;nt.length>rt;)d(nt[rt++]);for(var it=C(d.store),ot=0;it.length>ot;)y(it[ot++]);s(s.S+s.F*!U,"Symbol",{"for":function(t){return o(H,t+="")?H[t]:H[t]=N(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var e in H)if(H[e]===t)return e},useSetter:function(){G=!0},useSimple:function(){G=!1}}),s(s.S+s.F*!U,"Object",{create:K,defineProperty:Y,defineProperties:J,getOwnPropertyDescriptor:Z,getOwnPropertyNames:tt,getOwnPropertySymbols:et}),P&&s(s.S+s.F*(!U||f(function(){var t=N();return"[null]"!=F([t])||"{}"!=F({a:t})||"{}"!=F(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(x(e)||void 0!==t)&&!X(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!X(e))return e}),r[1]=e,F.apply(P,r)}}),N[L][I]||n(12)(N[L],I,N[L].valueOf),h(N,"Symbol"),h(Math,"Math",!0),h(i.JSON,"JSON",!0)},function(t,e,n){"use strict";var r=n(34),i=n(51),o=n(47);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var u,s=n(t),c=o.f,a=0;s.length>a;)c.call(t,u=s[a++])&&e.push(u);return e}},function(t,e,n){"use strict";var r=n(0);r(r.S,"Object",{create:n(36)})},function(t,e,n){"use strict";var r=n(0);r(r.S+r.F*!n(6),"Object",{defineProperty:n(7).f})},function(t,e,n){"use strict";var r=n(0);r(r.S+r.F*!n(6),"Object",{defineProperties:n(96)})},function(t,e,n){"use strict";var r=n(15),i=n(16).f;n(25)("getOwnPropertyDescriptor",function(){return function(t,e){return i(r(t),e)}})},function(t,e,n){"use strict";var r=n(9),i=n(17);n(25)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,e,n){"use strict";var r=n(9),i=n(34);n(25)("keys",function(){return function(t){return i(r(t))}})},function(t,e,n){"use strict";n(25)("getOwnPropertyNames",function(){return n(97).f})},function(t,e,n){"use strict";var r=n(4),i=n(29).onFreeze;n(25)("freeze",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){"use strict";var r=n(4),i=n(29).onFreeze;n(25)("seal",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){"use strict";var r=n(4),i=n(29).onFreeze;n(25)("preventExtensions",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){"use strict";var r=n(4);n(25)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){"use strict";var r=n(4);n(25)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){"use strict";var r=n(4);n(25)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){"use strict";var r=n(0);r(r.S+r.F,"Object",{assign:n(98)})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Object",{is:n(155)})},function(t,e,n){"use strict";t.exports=Object.is||function(t,e){return t===e?0!==t||1/t===1/e:t!=t&&e!=e}},function(t,e,n){"use strict";var r=n(0);r(r.S,"Object",{setPrototypeOf:n(68).set})},function(t,e,n){"use strict";var r=n(48),i={};i[n(5)("toStringTag")]="z",i+""!="[object z]"&&n(13)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){"use strict";var r=n(0);r(r.P,"Function",{bind:n(99)})},function(t,e,n){"use strict";var r=n(7).f,i=Function.prototype,o=/^\s*function ([^ (]*)/,u="name";u in i||n(6)&&r(i,u,{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(4),i=n(17),o=n(5)("hasInstance"),u=Function.prototype;o in u||n(7).f(u,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){"use strict";var r=n(0),i=n(101);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,e,n){"use strict";var r=n(0),i=n(102);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,e,n){"use strict";var r=n(2),i=n(11),o=n(19),u=n(70),s=n(22),c=n(3),a=n(37).f,f=n(16).f,l=n(7).f,h=n(43).trim,p="Number",d=r[p],v=d,y=d.prototype,g=o(n(36)(y))==p,m="trim"in String.prototype,b=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){e=m?e.trim():h(e,3);var n,r,i,o=e.charCodeAt(0);if(43===o||45===o){if(n=e.charCodeAt(2),88===n||120===n)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+e}for(var u,c=e.slice(2),a=0,f=c.length;a<f;a++)if(u=c.charCodeAt(a),u<48||u>i)return NaN;return parseInt(c,r)}}return+e};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof d&&(g?c(function(){y.valueOf.call(n)}):o(n)!=p)?u(new v(b(e)),n,d):b(e)};for(var x,w=n(6)?a(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;w.length>S;S++)i(v,x=w[S])&&!i(d,x)&&l(d,x,f(v,x));d.prototype=y,y.constructor=d,n(13)(r,p,d)}},function(t,e,n){"use strict";var r=n(0),i=n(24),o=n(103),u=n(71),s=1..toFixed,c=Math.floor,a=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l="0",h=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*a[n],a[n]=r%1e7,r=c(r/1e7)},p=function(t){for(var e=6,n=0;--e>=0;)n+=a[e],a[e]=c(n/t),n=n%t*1e7},d=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==a[t]){var n=String(a[t]);e=""===e?n:e+u.call(l,7-n.length)+n}return e},v=function g(t,e,n){return 0===e?n:e%2===1?g(t,e-1,n*t):g(t*t,e/2,n)},y=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)(function(){s.call({})})),"Number",{toFixed:function(t){var e,n,r,s,c=o(this,f),a=i(t),g="",m=l;if(a<0||a>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(g="-",c=-c),c>1e-21)if(e=y(c*v(2,69,1))-69,n=e<0?c*v(2,-e,1):c/v(2,e,1),n*=4503599627370496,e=52-e,e>0){for(h(0,n),r=a;r>=7;)h(1e7,0),r-=7;for(h(v(10,r,1),0),r=e-1;r>=23;)p(1<<23),r-=23;p(1<<r),h(1,1),p(2),m=d()}else h(0,n),h(1<<-e,0),m=d()+u.call(l,a);return a>0?(s=m.length,
m=g+(s<=a?"0."+u.call(l,a-s)+m:m.slice(0,s-a)+"."+m.slice(s-a))):m=g+m,m}})},function(t,e,n){"use strict";var r=n(0),i=n(3),o=n(103),u=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(e):u.call(e,t)}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){"use strict";var r=n(0),i=n(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Number",{isInteger:n(104)})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){"use strict";var r=n(0),i=n(104),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){"use strict";var r=n(0),i=n(102);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,n){"use strict";var r=n(0),i=n(101);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,n){"use strict";var r=n(0),i=n(105),o=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,e,n){"use strict";function r(t){return isFinite(t=+t)&&0!=t?t<0?-r(-t):Math.log(t+Math.sqrt(t*t+1)):t}var i=n(0),o=Math.asinh;i(i.S+i.F*!(o&&1/o(0)>0),"Math",{asinh:r})},function(t,e,n){"use strict";var r=n(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){"use strict";var r=n(0),i=n(72);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){"use strict";var r=n(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,n){"use strict";var r=n(0),i=n(73);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{fround:n(106)})},function(t,e,n){"use strict";var r=n(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,o=0,u=0,s=arguments.length,c=0;u<s;)n=i(arguments[u++]),c<n?(r=c/n,o=o*r*r+1,c=n):n>0?(r=n/c,o+=r*r):o+=n;return c===1/0?1/0:c*Math.sqrt(o)}})},function(t,e,n){"use strict";var r=n(0),i=Math.imul;r(r.S+r.F*n(3)(function(){return i(4294967295,5)!=-5||2!=i.length}),"Math",{imul:function(t,e){var n=65535,r=+t,i=+e,o=n&r,u=n&i;return 0|o*u+((n&r>>>16)*u+o*(n&i>>>16)<<16>>>0)}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{log1p:n(105)})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{sign:n(72)})},function(t,e,n){"use strict";var r=n(0),i=n(73),o=Math.exp;r(r.S+r.F*n(3)(function(){return!Math.sinh(-2e-17)!=-2e-17}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,e,n){"use strict";var r=n(0),i=n(73),o=Math.exp;r(r.S,"Math",{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){"use strict";var r=n(0),i=n(35),o=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,u=0;r>u;){if(e=+arguments[u++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(((e-=65536)>>10)+55296,e%1024+56320))}return n.join("")}})},function(t,e,n){"use strict";var r=n(0),i=n(15),o=n(8);r(r.S,"String",{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,u=[],s=0;n>s;)u.push(String(e[s++])),s<r&&u.push(String(arguments[s]));return u.join("")}})},function(t,e,n){"use strict";n(43)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){"use strict";var r=n(74)(!0);n(75)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";var r=n(0),i=n(74)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,n){"use strict";var r=n(0),i=n(8),o=n(77),u="endsWith",s=""[u];r(r.P+r.F*n(78)(u),"String",{endsWith:function(t){var e=o(this,t,u),n=arguments.length>1?arguments[1]:void 0,r=i(e.length),c=void 0===n?r:Math.min(i(n),r),a=String(t);return s?s.call(e,a,c):e.slice(c-a.length,c)===a}})},function(t,e,n){"use strict";var r=n(0),i=n(77),o="includes";r(r.P+r.F*n(78)(o),"String",{includes:function(t){return!!~i(this,t,o).indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(0);r(r.P,"String",{repeat:n(71)})},function(t,e,n){"use strict";var r=n(0),i=n(8),o=n(77),u="startsWith",s=""[u];r(r.P+r.F*n(78)(u),"String",{startsWith:function(t){var e=o(this,t,u),n=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return s?s.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(14)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";n(14)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(14)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(14)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(14)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(14)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(14)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(14)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(14)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(14)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(14)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(14)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(14)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(22);r(r.P+r.F*n(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),n=o(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){"use strict";var r=n(0),i=n(217);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,n){"use strict";var r=n(3),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(n>99?n:"0"+u(n))+"Z"}:o},function(t,e,n){"use strict";var r=Date.prototype,i="Invalid Date",o="toString",u=r[o],s=r.getTime;new Date(NaN)+""!=i&&n(13)(r,o,function(){var t=s.call(this);return t===t?u.call(this):i})},function(t,e,n){"use strict";var r=n(5)("toPrimitive"),i=Date.prototype;r in i||n(12)(i,r,n(220))},function(t,e,n){"use strict";var r=n(1),i=n(22),o="number";t.exports=function(t){if("string"!==t&&t!==o&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),t!=o)}},function(t,e,n){"use strict";var r=n(0);r(r.S,"Array",{isArray:n(52)})},function(t,e,n){"use strict";var r=n(18),i=n(0),o=n(9),u=n(107),s=n(79),c=n(8),a=n(80),f=n(81);i(i.S+i.F*!n(54)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,i,l,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,y=void 0!==v,g=0,m=f(h);if(y&&(v=r(v,d>2?arguments[2]:void 0,2)),void 0==m||p==Array&&s(m))for(e=c(h.length),n=new p(e);e>g;g++)a(n,g,y?v(h[g],g):h[g]);else for(l=m.call(h),n=new p;!(i=l.next()).done;g++)a(n,g,y?u(l,v,[i.value,g],!0):i.value);return n.length=g,n}})},function(t,e,n){"use strict";var r=n(0),i=n(80);r(r.S+r.F*n(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)i(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(0),i=n(15),o=[].join;r(r.P+r.F*(n(46)!=Object||!n(20)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),i=n(67),o=n(19),u=n(35),s=n(8),c=[].slice;r(r.P+r.F*n(3)(function(){i&&c.call(i)}),"Array",{slice:function(t,e){var n=s(this.length),r=o(this);if(e=void 0===e?n:e,"Array"==r)return c.call(this,t,e);for(var i=u(t,n),a=u(e,n),f=s(a-i),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(i+h):this[i+h];return l}})},function(t,e,n){"use strict";var r=n(0),i=n(10),o=n(9),u=n(3),s=[].sort,c=[1,2,3];r(r.P+r.F*(u(function(){c.sort(void 0)})||!u(function(){c.sort(null)})||!n(20)(s)),"Array",{sort:function(t){return void 0===t?s.call(o(this)):s.call(o(this),i(t))}})},function(t,e,n){"use strict";var r=n(0),i=n(26)(0),o=n(20)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(4),i=n(52),o=n(5)("species");t.exports=function(t){var e;return i(t)&&(e=t.constructor,"function"!=typeof e||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&(e=e[o],null===e&&(e=void 0))),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),i=n(26)(1);r(r.P+r.F*!n(20)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(26)(2);r(r.P+r.F*!n(20)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(26)(3);r(r.P+r.F*!n(20)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(26)(4);r(r.P+r.F*!n(20)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(108);r(r.P+r.F*!n(20)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),i=n(108);r(r.P+r.F*!n(20)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),i=n(50)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!n(20)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(15),o=n(24),u=n(8),s=[].lastIndexOf,c=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!n(20)(s)),"Array",{lastIndexOf:function(t){if(c)return s.apply(this,arguments)||0;var e=i(this),n=u(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){"use strict";var r=n(0);r(r.P,"Array",{copyWithin:n(109)}),n(30)("copyWithin")},function(t,e,n){"use strict";var r=n(0);r(r.P,"Array",{fill:n(83)}),n(30)("fill")},function(t,e,n){"use strict";var r=n(0),i=n(26)(5),o="find",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(30)(o)},function(t,e,n){"use strict";var r=n(0),i=n(26)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(30)(o)},function(t,e,n){"use strict";n(38)("Array")},function(t,e,n){"use strict";var r=n(2),i=n(70),o=n(7).f,u=n(37).f,s=n(53),c=n(55),a=r.RegExp,f=a,l=a.prototype,h=/a/g,p=/a/g,d=new a(h)!==h;if(n(6)&&(!d||n(3)(function(){return p[n(5)("match")]=!1,a(h)!=h||a(p)==p||"/a/i"!=a(h,"i")}))){a=function(t,e){var n=this instanceof a,r=s(t),o=void 0===e;return!n&&r&&t.constructor===a&&o?t:i(d?new f(r&&!o?t.source:t,e):f((r=t instanceof a)?t.source:t,r&&o?c.call(t):e),n?this:l,a)};for(var v=(function(t){t in a||o(a,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})}),y=u(f),g=0;y.length>g;)v(y[g++]);l.constructor=a,a.prototype=l,n(13)(r,"RegExp",a)}n(38)("RegExp")},function(t,e,n){"use strict";n(111);var r=n(1),i=n(55),o=n(6),u="toString",s=/./[u],c=function(t){n(13)(RegExp.prototype,u,t,!0)};n(3)(function(){return"/a/b"!=s.call({source:"a",flags:"b"})})?c(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):s.name!=u&&c(function(){return s.call(this)})},function(t,e,n){"use strict";n(56)("match",1,function(t,e,n){return[function(n){var r=t(this),i=void 0==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){"use strict";n(56)("replace",2,function(t,e,n){return[function(r,i){var o=t(this),u=void 0==r?void 0:r[e];return void 0!==u?u.call(r,o,i):n.call(String(o),r,i)},n]})},function(t,e,n){"use strict";n(56)("search",1,function(t,e,n){return[function(n){var r=t(this),i=void 0==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){"use strict";n(56)("split",2,function(t,e,r){var i=n(53),o=r,u=[].push,s="split",c="length",a="lastIndex";if("c"=="abbc"[s](/(b)*/)[1]||4!="test"[s](/(?:)/,-1)[c]||2!="ab"[s](/(?:ab)*/)[c]||4!="."[s](/(.?)(.?)/)[c]||"."[s](/()()/)[c]>1||""[s](/.?/)[c]){var f=void 0===/()??/.exec("")[1];r=function(t,e){var n=String(this);if(void 0===t&&0===e)return[];if(!i(t))return o.call(n,t,e);var r,s,l,h,p,d=[],v=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),y=0,g=void 0===e?4294967295:e>>>0,m=new RegExp(t.source,v+"g");for(f||(r=new RegExp("^"+m.source+"$(?!\\s)",v));(s=m.exec(n))&&(l=s.index+s[0][c],!(l>y&&(d.push(n.slice(y,s.index)),!f&&s[c]>1&&s[0].replace(r,function(){for(p=1;p<arguments[c]-2;p++)void 0===arguments[p]&&(s[p]=void 0)}),s[c]>1&&s.index<n[c]&&u.apply(d,s.slice(1)),h=s[0][c],y=l,d[c]>=g)));)m[a]===s.index&&m[a]++;return y===n[c]?!h&&m.test("")||d.push(""):d.push(n.slice(y)),d[c]>g?d.slice(0,g):d}}else"0"[s](void 0,0)[c]&&(r=function(t,e){return void 0===t&&0===e?[]:o.call(this,t,e)});return[function(n,i){var o=t(this),u=void 0==n?void 0:n[e];return void 0!==u?u.call(n,o,i):r.call(String(o),n,i)},r]})},function(t,e,n){"use strict";var r,i,o,u,s=n(33),c=n(2),a=n(18),f=n(48),l=n(0),h=n(4),p=n(10),d=n(39),v=n(40),y=n(57),g=n(85).set,m=n(86)(),b=n(87),x=n(112),w=n(113),S="Promise",E=c.TypeError,T=c.process,_=c[S],k="process"==f(T),j=function(){},C=i=b.f,O=!!function(){try{var t=_.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t(j,j)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(j)instanceof e}catch(r){}}(),A=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},M=function(t,e){if(!t._n){t._n=!0;var n=t._c;m(function(){for(var r=t._v,i=1==t._s,o=0,u=function(e){var n,o,u=i?e.ok:e.fail,s=e.resolve,c=e.reject,a=e.domain;try{u?(i||(2==t._h&&F(t),t._h=1),u===!0?n=r:(a&&a.enter(),n=u(r),a&&a.exit()),n===e.promise?c(E("Promise-chain cycle")):(o=A(n))?o.call(n,s,c):s(n)):c(r)}catch(f){c(f)}};n.length>o;)u(n[o++]);t._c=[],t._n=!1,e&&!t._h&&N(t)})}},N=function(t){g.call(c,function(){var e,n,r,i=t._v,o=P(t);if(o&&(e=x(function(){k?T.emit("unhandledRejection",i,t):(n=c.onunhandledrejection)?n({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=k||P(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},P=function(t){return 1!==t._h&&0===(t._a||t._c).length},F=function(t){g.call(c,function(){var e;k?T.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,e=e._w||e,e._v=t,e._s=2,e._a||(e._a=e._c.slice()),M(e,!0))},D=function I(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw E("Promise can't be resolved itself");(e=A(t))?m(function(){var r={_w:n,_d:!1};try{e.call(t,a(I,r,1),a(L,r,1))}catch(i){L.call(r,i)}}):(n._v=t,n._s=1,M(n,!1))}catch(r){L.call({_w:n,_d:!1},r)}}};O||(_=function(t){d(this,_,S,"_h"),p(t),r.call(this);try{t(a(D,this,1),a(L,this,1))}catch(e){L.call(this,e)}},r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},r.prototype=n(41)(_.prototype,{then:function(t,e){var n=C(y(this,_));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=k?T.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},"catch":function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=a(D,t,1),this.reject=a(L,t,1)},b.f=C=function(t){return t===_||t===u?new o(t):i(t)}),l(l.G+l.W+l.F*!O,{Promise:_}),n(42)(_,S),n(38)(S),u=n(21)[S],l(l.S+l.F*!O,S,{reject:function(t){var e=C(this),n=e.reject;return n(t),e.promise}}),l(l.S+l.F*(s||!O),S,{resolve:function(t){return w(s&&this===u?_:this,t)}}),l(l.S+l.F*!(O&&n(54)(function(t){_.all(t)["catch"](j)})),S,{all:function(t){var e=this,n=C(e),r=n.resolve,i=n.reject,o=x(function(){var n=[],o=0,u=1;v(t,!1,function(t){var s=o++,c=!1;n.push(void 0),u++,e.resolve(t).then(function(t){c||(c=!0,n[s]=t,--u||r(n))},i)}),--u||r(n)});return o.e&&i(o.v),n.promise},race:function(t){var e=this,n=C(e),r=n.reject,i=x(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return i.e&&r(i.v),n.promise}})},function(t,e,n){"use strict";var r=n(118),i=n(45),o="WeakSet";n(58)(o,function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,o),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r=n(0),i=n(59),o=n(88),u=n(1),s=n(35),c=n(8),a=n(4),f=n(2).ArrayBuffer,l=n(57),h=o.ArrayBuffer,p=o.DataView,d=i.ABV&&f.isView,v=h.prototype.slice,y=i.VIEW,g="ArrayBuffer";r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,g,{isView:function(t){return d&&d(t)||a(t)&&y in t}}),r(r.P+r.U+r.F*n(3)(function(){return!new h(2).slice(1,void 0).byteLength}),g,{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(u(this),t);for(var n=u(this).byteLength,r=s(t,n),i=s(void 0===e?n:e,n),o=new(l(this,h))(c(i-r)),a=new p(this),f=new p(o),d=0;r<i;)f.setUint8(d++,a.getUint8(r++));return o}}),n(38)(g)},function(t,e,n){"use strict";var r=n(0);r(r.G+r.W+r.F*!n(59).ABV,{DataView:n(88).DataView})},function(t,e,n){"use strict";n(27)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){"use strict";n(27)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){"use strict";n(27)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){"use strict";n(27)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){"use strict";n(27)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){"use strict";n(27)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){"use strict";n(27)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){"use strict";n(27)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){"use strict";n(27)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){"use strict";var r=n(0),i=n(10),o=n(1),u=(n(2).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!n(3)(function(){u(function(){})}),"Reflect",{apply:function(t,e,n){var r=i(t),c=o(n);return u?u(r,e,c):s.call(r,e,c)}})},function(t,e,n){"use strict";var r=n(0),i=n(36),o=n(10),u=n(1),s=n(4),c=n(3),a=n(99),f=(n(2).Reflect||{}).construct,l=c(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!c(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,e){o(t),u(e);var n=arguments.length<3?t:o(arguments[2]);if(h&&!l)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(a.apply(t,r))}var c=n.prototype,p=i(s(c)?c:Object.prototype),d=Function.apply.call(t,p,e);return s(d)?d:p}})},function(t,e,n){"use strict";var r=n(7),i=n(0),o=n(1),u=n(22);i(i.S+i.F*n(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){o(t),e=u(e,!0),o(n);try{return r.f(t,e,n),!0}catch(i){return!1}}})},function(t,e,n){"use strict";var r=n(0),i=n(16).f,o=n(1);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=i(o(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){"use strict";var r=n(0),i=n(1),o=function(t){this._t=i(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(76)(o,"Object",function(){var t,e=this,n=e._k;do if(e._i>=n.length)return{value:void 0,done:!0};while(!((t=n[e._i++])in e._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,e,n){"use strict";function r(t,e){var n,s,f=arguments.length<3?t:arguments[2];return a(t)===f?t[e]:(n=i.f(t,e))?u(n,"value")?n.value:void 0!==n.get?n.get.call(f):void 0:c(s=o(t))?r(s,e,f):void 0}var i=n(16),o=n(17),u=n(11),s=n(0),c=n(4),a=n(1);s(s.S,"Reflect",{get:r})},function(t,e,n){"use strict";var r=n(16),i=n(0),o=n(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(o(t),e)}})},function(t,e,n){"use strict";var r=n(0),i=n(17),o=n(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){"use strict";var r=n(0),i=n(1),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Reflect",{ownKeys:n(120)})},function(t,e,n){"use strict";var r=n(0),i=n(1),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(e){return!1}}})},function(t,e,n){"use strict";function r(t,e,n){var c,h,p=arguments.length<4?t:arguments[3],d=o.f(f(t),e);if(!d){if(l(h=u(t)))return r(h,e,n,p);d=a(0)}return s(d,"value")?!(d.writable===!1||!l(p))&&(c=o.f(p,e)||a(0),c.value=n,i.f(p,e,c),!0):void 0!==d.set&&(d.set.call(p,n),!0)}var i=n(7),o=n(16),u=n(17),s=n(11),c=n(0),a=n(31),f=n(1),l=n(4);c(c.S,"Reflect",{set:r})},function(t,e,n){"use strict";var r=n(0),i=n(68);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(n){return!1}}})},function(t,e,n){"use strict";var r=n(0),i=n(50)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(30)("includes")},function(t,e,n){"use strict";var r=n(0),i=n(121),o=n(9),u=n(8),s=n(10),c=n(82);r(r.P,"Array",{flatMap:function(t){var e,n,r=o(this);return s(t),e=u(r.length),n=c(r,0),i(n,r,r,e,0,1,t,arguments[1]),n}}),n(30)("flatMap")},function(t,e,n){"use strict";var r=n(0),i=n(121),o=n(9),u=n(8),s=n(24),c=n(82);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=o(this),n=u(e.length),r=c(e,0);return i(r,e,e,n,0,void 0===t?1:s(t)),r}}),n(30)("flatten")},function(t,e,n){"use strict";var r=n(0),i=n(74)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},function(t,e,n){"use strict";var r=n(0),i=n(122),o=n(89);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){"use strict";var r=n(0),i=n(122),o=n(89);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){"use strict";n(43)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,n){"use strict";n(43)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,n){"use strict";var r=n(0),i=n(23),o=n(8),u=n(53),s=n(55),c=RegExp.prototype,a=function(t,e){this._r=t,this._s=e};n(76)(a,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in c?String(t.flags):s.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=o(t.lastIndex),new a(r,e)}})},function(t,e,n){"use strict";n(64)("asyncIterator")},function(t,e,n){"use strict";n(64)("observable")},function(t,e,n){"use strict";var r=n(0),i=n(120),o=n(15),u=n(16),s=n(80);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=o(t),c=u.f,a=i(r),f={},l=0;a.length>l;)n=c(r,e=a[l++]),void 0!==n&&s(f,e,n);return f}})},function(t,e,n){"use strict";var r=n(0),i=n(123)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,e,n){"use strict";var r=n(0),i=n(123)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(10),u=n(7);n(6)&&r(r.P+n(60),"Object",{__defineGetter__:function(t,e){u.f(i(this),t,{get:o(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(10),u=n(7);n(6)&&r(r.P+n(60),"Object",{__defineSetter__:function(t,e){u.f(i(this),t,{set:o(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(22),u=n(17),s=n(16).f;n(6)&&r(r.P+n(60),"Object",{__lookupGetter__:function(t){var e,n=i(this),r=o(t,!0);do if(e=s(n,r))return e.get;while(n=u(n))}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(22),u=n(17),s=n(16).f;n(6)&&r(r.P+n(60),"Object",{__lookupSetter__:function(t){var e,n=i(this),r=o(t,!0);do if(e=s(n,r))return e.set;while(n=u(n))}})},function(t,e,n){"use strict";var r=n(0);r(r.P+r.R,"Map",{toJSON:n(124)("Map")})},function(t,e,n){"use strict";var r=n(0);r(r.P+r.R,"Set",{toJSON:n(124)("Set")})},function(t,e,n){"use strict";n(61)("Map")},function(t,e,n){"use strict";n(61)("Set")},function(t,e,n){"use strict";n(61)("WeakMap")},function(t,e,n){"use strict";n(61)("WeakSet")},function(t,e,n){"use strict";n(62)("Map")},function(t,e,n){"use strict";n(62)("Set")},function(t,e,n){"use strict";n(62)("WeakMap")},function(t,e,n){"use strict";n(62)("WeakSet")},function(t,e,n){"use strict";var r=n(0);r(r.G,{global:n(2)})},function(t,e,n){"use strict";var r=n(0);r(r.S,"System",{global:n(2)})},function(t,e,n){"use strict";var r=n(0),i=n(19);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,n){"use strict";var r=n(0),i=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*i}})},function(t,e,n){"use strict";var r=n(0),i=n(126),o=n(106);r(r.S,"Math",{fscale:function(t,e,n,r,u){return o(i(t,e,n,r,u))}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{iaddh:function(t,e,n,r){var i=t>>>0,o=e>>>0,u=n>>>0;return o+(r>>>0)+((i&u|(i|u)&~(i+u>>>0))>>>31)|0}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{isubh:function(t,e,n,r){var i=t>>>0,o=e>>>0,u=n>>>0;return o-(r>>>0)-((~i&u|~(i^u)&i-u>>>0)>>>31)|0}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{imulh:function(t,e){var n=65535,r=+t,i=+e,o=r&n,u=i&n,s=r>>16,c=i>>16,a=(s*u>>>0)+(o*u>>>16);return s*c+(a>>16)+((o*c>>>0)+(a&n)>>16)}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,n){"use strict";var r=n(0),i=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*i}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{scale:n(126)})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{umulh:function(t,e){var n=65535,r=+t,i=+e,o=r&n,u=i&n,s=r>>>16,c=i>>>16,a=(s*u>>>0)+(o*u>>>16);return s*c+(a>>>16)+((o*c>>>0)+(a&n)>>>16)}})},function(t,e,n){"use strict";var r=n(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,n){"use strict";var r=n(0),i=n(21),o=n(2),u=n(57),s=n(113);r(r.P+r.R,"Promise",{"finally":function(t){var e=u(this,i.Promise||o.Promise),n="function"==typeof t;return this.then(n?function(n){return s(e,t()).then(function(){return n})}:t,n?function(n){return s(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){"use strict";var r=n(0),i=n(87),o=n(112);r(r.S,"Promise",{"try":function(t){var e=i.f(this),n=o(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){"use strict";var r=n(28),i=n(1),o=r.key,u=r.set;r.exp({defineMetadata:function(t,e,n,r){u(t,e,i(n),o(r))}})},function(t,e,n){"use strict";var r=n(28),i=n(1),o=r.key,u=r.map,s=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:o(arguments[2]),r=u(i(e),n,!1);if(void 0===r||!r["delete"](t))return!1;if(r.size)return!0;var c=s.get(e);return c["delete"](n),!!c.size||s["delete"](e)}})},function(t,e,n){"use strict";var r=n(28),i=n(1),o=n(17),u=r.has,s=r.get,c=r.key,a=function f(t,e,n){var r=u(t,e,n);if(r)return s(t,e,n);var i=o(e);return null!==i?f(t,i,n):void 0};r.exp({getMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:c(arguments[2]))}})},function(t,e,n){"use strict";var r=n(116),i=n(125),o=n(28),u=n(1),s=n(17),c=o.keys,a=o.key,f=function l(t,e){var n=c(t,e),o=s(t);if(null===o)return n;var u=l(o,e);return u.length?n.length?i(new r(n.concat(u))):u:n};o.exp({getMetadataKeys:function(t){return f(u(t),arguments.length<2?void 0:a(arguments[1]))}})},function(t,e,n){"use strict";var r=n(28),i=n(1),o=r.get,u=r.key;r.exp({getOwnMetadata:function(t,e){return o(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){"use strict";var r=n(28),i=n(1),o=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,e,n){"use strict";var r=n(28),i=n(1),o=n(17),u=r.has,s=r.key,c=function a(t,e,n){var r=u(t,e,n);if(r)return!0;var i=o(e);return null!==i&&a(t,i,n)};r.exp({hasMetadata:function(t,e){return c(t,i(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,n){"use strict";var r=n(28),i=n(1),o=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,e){return o(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){"use strict";var r=n(28),i=n(1),o=n(10),u=r.key,s=r.set;r.exp({metadata:function(t,e){return function(n,r){s(t,e,(void 0!==r?i:o)(n),u(r))}}})},function(t,e,n){"use strict";var r=n(0),i=n(86)(),o=n(2).process,u="process"==n(19)(o);r(r.G,{asap:function(t){var e=u&&o.domain;i(e?e.bind(t):t)}})},function(t,e,n){"use strict";var r=n(0),i=n(2),o=n(21),u=n(86)(),s=n(5)("observable"),c=n(10),a=n(1),f=n(39),l=n(41),h=n(12),p=n(40),d=p.RETURN,v=function(t){return null==t?void 0:c(t)},y=function(t){var e=t._c;e&&(t._c=void 0,e())},g=function(t){return void 0===t._o},m=function(t){g(t)||(t._o=void 0,y(t))},b=function(t,e){a(t),this._c=void 0,this._o=t,t=new x(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:c(n),this._c=n)}catch(i){
return void t.error(i)}g(this)&&y(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var x=function(t){this._s=t};x.prototype=l({},{next:function(t){var e=this._s;if(!g(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(i){try{m(e)}finally{throw i}}}},error:function(t){var e=this._s;if(g(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(i){try{y(e)}finally{throw i}}return y(e),t},complete:function(t){var e=this._s;if(!g(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(i){try{y(e)}finally{throw i}}return y(e),t}}});var w=function(t){f(this,w,"Observable","_f")._f=c(t)};l(w.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(o.Promise||i.Promise)(function(n,r){c(t);var i=e.subscribe({next:function(e){try{return t(e)}catch(n){r(n),i.unsubscribe()}},error:r,complete:n})})}}),l(w,{from:function(t){var e="function"==typeof this?this:w,n=v(a(t)[s]);if(n){var r=a(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return u(function(){if(!n){try{if(p(t,!1,function(t){if(e.next(t),n)return d})===d)return}catch(r){if(n)throw r;return void e.error(r)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return u(function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}}),function(){e=!0}})}}),h(w.prototype,s,function(){return this}),r(r.G,{Observable:w}),n(38)("Observable")},function(t,e,n){"use strict";var r=n(2),i=n(0),o=n(89),u=[].slice,s=/MSIE .\./.test(o),c=function(t){return function(e,n){var r=arguments.length>2,i=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};i(i.G+i.B+i.F*s,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,e,n){"use strict";var r=n(0),i=n(85);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,n){"use strict";for(var r=n(84),i=n(34),o=n(13),u=n(2),s=n(12),c=n(44),a=n(5),f=a("iterator"),l=a("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var y,g=d[v],m=p[g],b=u[g],x=b&&b.prototype;if(x&&(x[f]||s(x,f,h),x[l]||s(x,l,g),c[g]=h,m))for(y in r)x[y]||o(x,y,r[y],!0)}},function(t,e,n){"use strict";(function(t,e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t){function r(t,e,n,r){var i=e&&e.prototype instanceof o?e:o,u=Object.create(i.prototype),s=new d(r||[]);return u._invoke=f(t,n,s),u}function i(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(r){return{type:"throw",arg:r}}}function o(){}function u(){}function s(){}function c(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function a(e){function r(t,o,u,s){var c=i(e[t],e,o);if("throw"!==c.type){var a=c.arg,f=a.value;return f&&"object"===("undefined"==typeof f?"undefined":n(f))&&b.call(f,"__await")?Promise.resolve(f.__await).then(function(t){r("next",t,u,s)},function(t){r("throw",t,u,s)}):Promise.resolve(f).then(function(t){a.value=t,u(a)},s)}s(c.arg)}function o(t,e){function n(){return new Promise(function(n,i){r(t,e,n,i)})}return u=u?u.then(n,n):n()}"object"===n(t.process)&&t.process.domain&&(r=t.process.domain.bind(r));var u;this._invoke=o}function f(t,e,n){var r=k;return function(o,u){if(r===C)throw new Error("Generator is already running");if(r===O){if("throw"===o)throw u;return y()}for(n.method=o,n.arg=u;;){var s=n.delegate;if(s){var c=l(s,n);if(c){if(c===A)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===k)throw r=O,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=C;var a=i(t,e,n);if("normal"===a.type){if(r=n.done?O:j,a.arg===A)continue;return{value:a.arg,done:n.done}}"throw"===a.type&&(r=O,n.method="throw",n.arg=a.arg)}}}function l(t,e){var n=t.iterator[e.method];if(n===g){if(e.delegate=null,"throw"===e.method){if(t.iterator["return"]&&(e.method="return",e.arg=g,l(t,e),"throw"===e.method))return A;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var r=i(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,A;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=g),e.delegate=null,A):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,A)}function h(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function p(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function d(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(h,this),this.reset(!0)}function v(t){if(t){var e=t[w];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function i(){for(;++n<t.length;)if(b.call(t,n))return i.value=t[n],i.done=!1,i;return i.value=g,i.done=!0,i};return r.next=r}}return{next:y}}function y(){return{value:g,done:!0}}var g,m=Object.prototype,b=m.hasOwnProperty,x="function"==typeof Symbol?Symbol:{},w=x.iterator||"@@iterator",S=x.asyncIterator||"@@asyncIterator",E=x.toStringTag||"@@toStringTag",T="object"===n(e),_=t.regeneratorRuntime;if(_)return void(T&&(e.exports=_));_=t.regeneratorRuntime=T?e.exports:{},_.wrap=r;var k="suspendedStart",j="suspendedYield",C="executing",O="completed",A={},M={};M[w]=function(){return this};var N=Object.getPrototypeOf,P=N&&N(N(v([])));P&&P!==m&&b.call(P,w)&&(M=P);var F=s.prototype=o.prototype=Object.create(M);u.prototype=F.constructor=s,s.constructor=u,s[E]=u.displayName="GeneratorFunction",_.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===u||"GeneratorFunction"===(e.displayName||e.name))},_.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,s):(t.__proto__=s,E in t||(t[E]="GeneratorFunction")),t.prototype=Object.create(F),t},_.awrap=function(t){return{__await:t}},c(a.prototype),a.prototype[S]=function(){return this},_.AsyncIterator=a,_.async=function(t,e,n,i){var o=new a(r(t,e,n,i));return _.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},c(F),F[E]="Generator",F[w]=function(){return this},F.toString=function(){return"[object Generator]"},_.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},_.values=v,d.prototype={constructor:d,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=g,this.done=!1,this.delegate=null,this.method="next",this.arg=g,this.tryEntries.forEach(p),!t)for(var e in this)"t"===e.charAt(0)&&b.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=g)},stop:function(){this.done=!0;var t=this.tryEntries[0],e=t.completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){function e(e,r){return o.type="throw",o.arg=t,n.next=e,r&&(n.method="next",n.arg=g),!!r}if(this.done)throw t;for(var n=this,r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r],o=i.completion;if("root"===i.tryLoc)return e("end");if(i.tryLoc<=this.prev){var u=b.call(i,"catchLoc"),s=b.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return e(i.catchLoc,!0);if(this.prev<i.finallyLoc)return e(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return e(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return e(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&b.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,A):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),A},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),p(n),A}},"catch":function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;p(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:v(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=g),A}}}("object"===("undefined"==typeof t?"undefined":n(t))?t:"object"===("undefined"==typeof window?"undefined":n(window))?window:"object"===("undefined"==typeof self?"undefined":n(self))?self:void 0)}).call(e,n(92),n(91)(t))},function(t,e,n){"use strict";n(336),t.exports=n(21).RegExp.escape},function(t,e,n){"use strict";var r=n(0),i=n(337)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},function(t,e,n){"use strict";t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},function(t,e,n){"use strict";t.exports=n(339)},function(t,e,n){"use strict";e.__esModule=!0,e["default"]=function(){},t.exports=e["default"]}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCJQUk9UT1RZUEUiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsImtleSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJzdG9yZSIsInVpZCIsIl9TeW1ib2wiLCJVU0VfU1lNQk9MIiwiJGV4cG9ydHMiLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJ2YWx1ZSIsInRvSW50ZWdlciIsIm1pbiIsImRlZmluZWQiLCJjcmVhdGVEZXNjIiwiaGFzIiwiU1JDIiwiVE9fU1RSSU5HIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiU3RyaW5nIiwidGhpcyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiSU9iamVjdCIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ0b09iamVjdCIsIklFX1BST1RPIiwiT2JqZWN0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsInRvU3RyaW5nIiwic2xpY2UiLCJtZXRob2QiLCJhcmciLCJ2ZXJzaW9uIiwiX19lIiwidmFsdWVPZiIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiS0VZIiwidG9MZW5ndGgiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsImNyZWF0ZSIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInJlcyIsImluZGV4IiwicmVzdWx0IiwicHVzaCIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdPUE4iLCJnZXRJdGVyRm4iLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJBUlJBWV9CVUZGRVIiLCJTSEFSRURfQlVGRkVSIiwiQllURVNfUEVSX0VMRU1FTlQiLCJBcnJheVByb3RvIiwiQXJyYXkiLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlJbmRleE9mIiwiYXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJhcnJheUtleXMiLCJrZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIldST05HX0xFTkdUSCIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIkZPUkNFRF9TRVQiLCJzZXQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwic3RlcCIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwic3JjIiwibGVuIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwid3JpdGFibGUiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJCYXNlIiwiVEFDIiwiRk9SQ0VEIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImRhdGEiLCJ2Iiwic2V0dGVyIiwicm91bmQiLCJhZGRFbGVtZW50IiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsImNvbmNhdCIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJmcm9tIiwiTWFwIiwic2hhcmVkIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwia2V5TWV0YWRhdGEiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwiTWV0YWRhdGFLZXkiLCJtZXRhZGF0YU1hcCIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiTWV0YWRhdGFWYWx1ZSIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwiXyIsInRvTWV0YUtleSIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIm1ldGEiLCJORUVEIiwiVU5TQ09QQUJMRVMiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJtYXgiLCJkUHMiLCJFbXB0eSIsIl9jcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJsdCIsImd0Iiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93IiwiZG9jdW1lbnQiLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsIl9leHBvcnRzIiwiaXRlcmFibGUiLCJkZWYiLCJzdGF0Iiwic3BhY2VzIiwic3BhY2UiLCJub24iLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsIl90IiwiY29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJBUkciLCJ0cnlHZXQiLCJUIiwiY2FsbGVlIiwiU0hBUkVEIiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlzQXJyYXkiLCJNQVRDSCIsImlzUmVnRXhwIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiU1lNQk9MIiwiZm5zIiwic3RyZm4iLCJyeGZuIiwiRCIsImZvck9mIiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQURERVIiLCJmaXhNZXRob2QiLCJpbnN0YW5jZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsImNsZWFyIiwiZ2V0Q29uc3RydWN0b3IiLCJzZXRTdHJvbmciLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJLIiwiX19kZWZpbmVTZXR0ZXJfXyIsIkNPTExFQ1RJT04iLCJBIiwiY2IiLCJtYXBGbiIsIm5leHRJdGVtIiwiaXMiLCJjcmVhdGVFbGVtZW50Iiwid2tzRXh0IiwiJFN5bWJvbCIsImNoYXJBdCIsImRvY3VtZW50RWxlbWVudCIsImNoZWNrIiwic2V0UHJvdG90eXBlT2YiLCJidWdneSIsIl9fcHJvdG9fXyIsImNvdW50Iiwic3RyIiwiSW5maW5pdHkiLCJzaWduIiwieCIsIiRleHBtMSIsImV4cG0xIiwicG9zIiwiY2hhckNvZGVBdCIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJGRl9JVEVSQVRPUiIsIktFWVMiLCJWQUxVRVMiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZGVzY3JpcHRvciIsInNlYXJjaFN0cmluZyIsInJlIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJvcmlnaW5hbCIsImVuZFBvcyIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsImFyZ3MiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmF2aWdhdG9yIiwic3RhbmRhbG9uZSIsInJlc29sdmUiLCJwcm9taXNlIiwidGhlbiIsInRvZ2dsZSIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsIlByb21pc2VDYXBhYmlsaXR5IiwicmVqZWN0IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJwb3ciLCJhYnMiLCJsb2ciLCJMTjIiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJudW1JbmRleCIsImludEluZGV4IiwiJExFTkdUSCIsIldST05HX0lOREVYIiwiJEJVRkZFUiIsIl9iIiwiJE9GRlNFVCIsInBhY2siLCJjb252ZXJzaW9uIiwiREFUQV9WSUVXIiwiQmFzZUJ1ZmZlciIsIkJVRkZFUiIsIkJZVEVfTEVOR1RIIiwiQllURV9PRkZTRVQiLCJBcnJheUJ1ZmZlclByb3RvIiwiaiIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwidXNlckFnZW50IiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiZmFjdG9yeSIsIkVycm9yIiwibm9HbG9iYWwiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsInRleHQiLCJwYXJlbnROb2RlIiwiaXNBcnJheUxpa2UiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIm5vZGVOYW1lIiwiZWxlbSIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiZ3JlcCIsIm5vZGVUeXBlIiwicmlzU2ltcGxlIiwic2libGluZyIsImN1ciIsImRpciIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zIiwiZWFjaCIsIm1hdGNoIiwicm5vdGh0bWx3aGl0ZSIsImZsYWciLCJJZGVudGl0eSIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJub1ZhbHVlIiwiZmFpbCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeSIsIkRhdGEiLCJleHBhbmRvIiwiZ2V0RGF0YSIsInJicmFjZSIsIkpTT04iLCJwYXJzZSIsImRhdGFBdHRyIiwicm11bHRpRGFzaCIsImdldEF0dHJpYnV0ZSIsImRhdGFVc2VyIiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiY3NzIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsImdldERlZmF1bHREaXNwbGF5IiwidGVtcCIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJkYXRhUHJpdiIsImlzSGlkZGVuV2l0aGluVHJlZSIsImdldEFsbCIsImNvbnRleHQiLCJyZXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZXJnZSIsInNldEdsb2JhbEV2YWwiLCJlbGVtcyIsInJlZkVsZW1lbnRzIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwidG1wIiwid3JhcCIsImNvbnRhaW5zIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJyaHRtbCIsInJ0YWdOYW1lIiwid3JhcE1hcCIsIl9kZWZhdWx0IiwiaW5uZXJIVE1MIiwiaHRtbFByZWZpbHRlciIsImxhc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwidGV4dENvbnRlbnQiLCJpbkFycmF5IiwicnNjcmlwdFR5cGUiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJfb24iLCJ0eXBlcyIsInNlbGVjdG9yIiwib25lIiwib3JpZ0ZuIiwib2ZmIiwiZ3VpZCIsImFkZCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJldmVudHMiLCJoYXNEYXRhIiwiYWNjZXNzIiwiaGFuZGxlIiwiZXh0ZW5kIiwiZml4SW5wdXQiLCJyY2hlY2thYmxlVHlwZSIsImNoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJjYWxsYmFjayIsImZpcnN0IiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwic3VwcG9ydCIsImNoZWNrQ2xvbmUiLCJyY2hlY2tlZCIsImVxIiwiY2xvbmUiLCJfZXZhbFVybCIsInJjbGVhblNjcmlwdCIsIl9yZW1vdmUiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0U3R5bGVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJybnVtbm9ucHgiLCJybWFyZ2luIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJ2ZW5kb3JQcm9wTmFtZSIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwidG9VcHBlckNhc2UiLCJjc3NQcmVmaXhlcyIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXRjaGVzIiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJib3hTaXppbmdSZWxpYWJsZSIsInBhcnNlRmxvYXQiLCJUd2VlbiIsImVhc2luZyIsImluaXQiLCJzY2hlZHVsZSIsImluUHJvZ3Jlc3MiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmeCIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiYXR0cnMiLCJoZWlnaHQiLCJvcGFjaXR5IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJwcm9wcyIsIm9wdHMiLCJob29rcyIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiYW5pbSIsIm9yaWciLCJkYXRhU2hvdyIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJyZnh0eXBlcyIsImlzRW1wdHlPYmplY3QiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInJlbW92ZSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY2FtZWxDYXNlIiwiY3NzSG9va3MiLCJleHBhbmQiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJkZWZlcnJlZCIsIkRlZmVycmVkIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInBlcmNlbnQiLCJ0d2VlbnMiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJzdG9wIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJwcm94eSIsInByb2dyZXNzIiwiY29tcGxldGUiLCJ0aW1lciIsInN0cmlwQW5kQ29sbGFwc2UiLCJ0b2tlbnMiLCJnZXRDbGFzcyIsImJ1aWxkUGFyYW1zIiwicHJlZml4IiwidHJhZGl0aW9uYWwiLCJyYnJhY2tldCIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImZ1bmMiLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsInVuc2hpZnQiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdCIsInNlbGVjdGVkIiwiaW5zcGVjdGVkIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiY29udGVudHMiLCJzaGlmdCIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjb252ZXJ0ZXJzIiwiYWpheENvbnZlcnQiLCJyZXNwb25zZSIsImlzU3VjY2VzcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJwcmV2IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwic3RhdGUiLCJlcnJvciIsImdldFByb3RvIiwiX3NsaWNlIiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJpc051bWVyaWMiLCJDdG9yIiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJjYWxsYmFja0V4cGVjdCIsIkRhdGUiLCJTaXp6bGUiLCJzZWVkIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJjb21waWxlckNhY2hlIiwicmJ1Z2d5UVNBIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2tlbml6ZSIsInRvU2VsZWN0b3IiLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImNhY2hlIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJkaXNhYmxlZEFuY2VzdG9yIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwieG1sIiwib2xkQ2FjaGUiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJ1bmlxdWVJRCIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwicG9wIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJmcm9tQ2hhckNvZGUiLCJjaCIsImFzQ29kZVBvaW50IiwidW5sb2FkSGFuZGxlciIsImVscyIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwiX2RpciIsInVudGlsIiwidHJ1bmNhdGUiLCJfc2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsImNvbnRlbnREb2N1bWVudCIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsIl9maXJlZCIsIl9sb2NrZWQiLCJmaXJpbmdJbmRleCIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJmaXJlZCIsInR1cGxlcyIsIl9zdGF0ZSIsIl9wcm9taXNlIiwiY2F0Y2giLCJwaXBlIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsImRlcHRoIiwic3BlY2lhbCIsIm1pZ2h0VGhyb3ciLCJtYXhEZXB0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJfZGF0YSIsInJlbW92ZURhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImNsZWFyUXVldWUiLCJwbnVtIiwic3dhcCIsIm9sZCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2IiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwiX2hhbmRsZXJzIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJvbiIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJtYXJnaW5SaWdodCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsImVhc2VkIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJfc3RhdHVzQ29kZSIsImZpcmVHbG9iYWxzIiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInJlc3BvbnNlSGVhZGVycyIsInVybEFuY2hvciIsInVuY2FjaGVkIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsImFib3J0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRocm93cyIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsIl9jYWxsYmFjayIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJfY2FsbGJhY2syIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiYmluZCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiZyIsImV2YWwiLCJuYW1lcyIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImdPUFMiLCIkYXNzaWduIiwiYXNzaWduIiwiayIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJwYXJ0QXJncyIsImJvdW5kIiwidW4iLCIkcGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsImxvZzFwIiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJyb3VuZFRpZXNUb0V2ZW4iLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJtZW1vIiwiaXNSaWdodCIsImluYyIsImZsYWdzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsInN0cm9uZyIsIk1BUCIsImVudHJ5IiwiZ2V0RW50cnkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJfZiIsIl9sIiwiciIsImRlbGV0ZSIsIlNFVCIsIkludGVybmFsTWFwIiwid2VhayIsIldFQUtfTUFQIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsInVmc3RvcmUiLCIkV2Vha01hcCIsImZyZWV6ZSIsIiRoYXMiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwibWFwcGVyIiwidGhpc0FyZyIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsImlzRW50cmllcyIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJkZWZhdWx0IiwiX0JhY2tncm91bmQiLCJfQmFja2dyb3VuZDIiLCJfanF1ZXJ5IiwiX2pxdWVyeTIiLCJfQ29va2llQ29uc2VudCIsIl9Db29raWVDb25zZW50MiIsInNjcm9sbGlmeSIsInNlY3Rpb24iLCJzZXRIZWlnaHRzIiwiYmciLCJxdWVyeVNlbGVjdG9yIiwic3RhcnRBbmltYXRpb24iLCJtZW51IiwiY2xhc3NMaXN0IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX1BvaW50IiwiX1BvaW50MiIsIl9SZWN0IiwiX1JlY3QyIiwiX0NvbG9yIiwiX0NvbG9yMiIsIl9EZXZpY2VEZXRlY3RvciIsIl9EZXZpY2VEZXRlY3RvcjIiLCJCYWNrZ3JvdW5kIiwiY2FudmFzRWxlbWVudCIsIl90aGlzIiwiY29uZmlnIiwicG9pbnRDb3VudCIsInBvaW50U3BlZWQiLCJ0b3RhbFBvaW50Q291bnQiLCJpc01vYmlsZSIsImNhbnZhcyIsImdldENvbnRleHQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJtYXhEaXN0YW5jZSIsInBvaW50cyIsImdldFJhbmRvbVBvcyIsInZlbG9jaXR5IiwiZ2V0UmFuZG9tVmVsb2NpdHkiLCJjb2xvciIsInBoYXNlIiwibGFzdEZyYW1lIiwicmVzaXplIiwibW91c2VQb2ludCIsImFscGhhIiwiWCIsIlkiLCJhbnl3aGVyZSIsInBvaW50IiwieSIsInZlbCIsImluc2lkZSIsImRlbHRhIiwiX3RoaXMyIiwiQWxwaGEiLCJjbGllbnRXaWR0aCIsImZyYW1lRGVsdGFUaW1lIiwiY2xlYXJSZWN0IiwiZHJhd1BvaW50cyIsImRyYXdMaW5lcyIsInVwZGF0ZSIsInJlbmRlciIsIl90aGlzMyIsImZpbGxTdHlsZSIsIlJlZCIsIkdyZWVuIiwiQmx1ZSIsImJlZ2luUGF0aCIsImFyYyIsImNsb3NlUGF0aCIsImZyYWN0aW9uIiwic3FydCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiUG9pbnQiLCJSZWN0IiwicGFkIiwiQ29sb3IiLCJEZXZpY2VEZXRlY3RvciIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZ2VuIiwiaW5mbyIsIl9Db29raWVQYXJzZXIiLCJfQ29va2llUGFyc2VyMiIsIkNvb2tpZUNvbnNlbnQiLCJfcmVmIiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJfY29udGV4dCIsImFicnVwdCIsImdldFZhbHVlIiwiY29va2llIiwiQ29va2llUGFyc2VyIiwicGFyc2VDb29raWVzIiwiY29va2llcyIsImZpeGVkIiwic3BsIiwiZ2V0cG9ydEhlaWdodCIsIiR3aW5kb3ciLCJhbmltYXRlU2Nyb2xsIiwiaW5zdGFudCIsImNhbGxiYWNrcyIsInRvVG9wIiwiY3VycmVudEluZGV4Iiwic2Nyb2xsYWJsZSIsImZpcnN0TG9hZCIsImFmdGVyUmVuZGVyIiwiaW50ZXJzdGl0aWFsSW5kZXgiLCJkZXN0aW5hdGlvbiIsImhlaWdodHMiLCJwb3J0SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJ1cGRhdGVIYXNoIiwic2VjdGlvbk5hbWUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwicmVwbGFjZVN0YXRlIiwic2Nyb2xsU3BlZWQiLCJtb2JpbGVIQSIsImlzQWNjZWxlcmF0aW5nIiwic2FtcGxlcyIsImF2ZXJhZ2UiLCJzdW0iLCJsYXN0RWxlbWVudHMiLCJhdkVuZCIsImF2TWlkZGxlIiwibW92ZSIsInBhbmVsIiwieiIsInRpbWVvdXRJZCIsInRpbWVvdXRJZDIiLCJtYW51YWxTY3JvbGwiLCJzd2lwZVNjcm9sbCIsInV0aWwiLCJoYXNMb2NhdGlvbiIsInNjcm9sbGVkIiwic2Nyb2xsU2FtcGxlcyIsInNjcm9sbFRpbWUiLCJnZXRUaW1lIiwiaW5pdGlhbGlzZWQiLCJ3aGVlbEV2ZW50Iiwib25tb3VzZXdoZWVsIiwiaW50ZXJzdGl0aWFsU2VjdGlvbiIsInNjcm9sbGJhcnMiLCJzdGFuZGFyZFNjcm9sbEVsZW1lbnRzIiwib3ZlcmZsb3dTY3JvbGwiLCJ0b3VjaFNjcm9sbCIsImFmdGVyUmVzaXplIiwiaW50ZXJzdGl0aWFsU2Nyb2xsIiwic2l6ZVBhbmVscyIsImtlZXBQb3NpdGlvbiIsImNhbGN1bGF0ZVBvc2l0aW9ucyIsInNjcm9sbCIsImF0VG9wIiwiYXRCb3R0b20iLCJoYW5kbGVNb3VzZWRvd24iLCJoYW5kbGVNb3VzZXVwIiwiY2FsY3VsYXRlTmVhcmVzdCIsImhhbmRsZVNjcm9sbCIsIndoZWVsSGFuZGxlciIsImN1cnJlbnRTY3JvbGxUaW1lIiwid2hlZWxEZWx0YSIsImRlbHRhWSIsImtleUhhbmRsZXIiLCJyZWFkT25seSIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsImRpcmVjdGlvbiIsImRpc3RhbmNlIiwidGltZUdhcCIsInRvdWNoSGFuZGxlciIsInRvdWNoIiwidXAiLCJkb3duIiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJwYXNzaXZlIiwicmVmcmVzaCIsIndpdGhDYWxsYmFjayIsImhhbmRsZVVwZGF0ZSIsImhhbmRsZVJlc2l6ZSIsImhhbmRsZU9yaWVudGF0aW9uIiwiaW5zdGFudE1vdmUiLCJwcmV2aW91cyIsImluc3RhbnROZXh0IiwiaW5zdGFudFByZXZpb3VzIiwiZGVzdHJveSIsImVuYWJsZSIsInNldE9wdGlvbnMiLCJ1cGRhdGVkT3B0aW9ucyIsImRlZmluZSIsIkRFRklORV9QUk9QRVJUWSIsIl9iYWJlbFBvbHlmaWxsIiwicGFkU3RhcnQiLCJwYWRFbmQiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic3ltYm9scyIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiTlVNQkVSIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJ0aGlyZCIsIm1heENvZGUiLCJkaWdpdHMiLCJhTnVtYmVyVmFsdWUiLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIlpFUk8iLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJ4MiIsImZyYWN0aW9uRGlnaXRzIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsImFzaW5oIiwiJGFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImxhcmciLCIkaW11bCIsImltdWwiLCJVSU5UMTYiLCJ4biIsInluIiwieGwiLCJ5bCIsImxvZzEwIiwiTE9HMTBFIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJjYWxsU2l0ZSIsInRwbCIsIiRhdCIsImNvZGVQb2ludEF0IiwiRU5EU19XSVRIIiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsIklOQ0xVREVTIiwiU1RBUlRTX1dJVEgiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzaXplIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiSU5WQUxJRF9EQVRFIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCJmb3JjZWQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwicmUxIiwicmUyIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsIiRtYXRjaCIsInJlZ2V4cCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsIlNQTElUIiwiJHNwbGl0IiwiX3NwbGl0IiwiJHB1c2giLCIkU1BMSVQiLCJMRU5HVEgiLCJMQVNUX0lOREVYIiwiTlBDRyIsImxpbWl0Iiwic2VwYXJhdG9yMiIsImxhc3RJbmRleCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwiUFJPTUlTRSIsIiRQcm9taXNlIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwiY2FwYWJpbGl0eSIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiV0VBS19TRVQiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluYWwiLCJ2aWV3UyIsInZpZXdUIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXRNYXAiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCJhdCIsIiRwYWQiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiX3IiLCJtYXRjaEFsbCIsInJ4IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCIkdmFsdWVzIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiaXNFcnJvciIsImNsYW1wIiwibG93ZXIiLCJ1cHBlciIsIkRFR19QRVJfUkFEIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsImZzY2FsZSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeDEiLCIkeTAiLCJpc3ViaCIsImltdWxoIiwidSIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsInVtdWxoIiwic2lnbmJpdCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0cnkiLCJtZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiZGVsZXRlTWV0YWRhdGEiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJTZXQiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwiJG1ldGFkYXRhIiwiYXNhcCIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJvYnNlcnZhYmxlIiwiaXRlbXMiLCJPYnNlcnZhYmxlIiwiTVNJRSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInJlY29yZCIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJlbnF1ZXVlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJwcmV2aW91c1Byb21pc2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJpdGVyYXRvck1ldGhvZCIsIml0ZXJhdG9yU3ltYm9sIiwiT3AiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImF3cmFwIiwic2tpcFRlbXBSZXNldCIsInJvb3RFbnRyeSIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsIiRyZSIsInJlZ0V4cCIsInBhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0NBQUEsU0FBQUEsR0FLQSxRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBSSxFQUFBSixFQUNBSyxHQUFBLEVBQ0FILFdBVUEsT0FOQUosR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsRUFBQUEsRUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQTREQSxPQWhDQUYsR0FBQVEsRUFBQVQsRUFHQUMsRUFBQVMsRUFBQVAsRUFHQUYsRUFBQVUsRUFBQSxTQUFBUCxFQUFBUSxFQUFBQyxHQUNBWixFQUFBYSxFQUFBVixFQUFBUSxJQUNBRyxPQUFBQyxlQUFBWixFQUFBUSxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWYsR0FDQSxHQUFBUSxHQUFBUixHQUFBQSxFQUFBZ0IsV0FDQSxXQUFBLE1BQUFoQixHQUFBLFlBQ0EsV0FBQSxNQUFBQSxHQUVBLE9BREFKLEdBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBUSxFQUFBQyxHQUFBLE1BQUFSLFFBQUFTLFVBQUFDLGVBQUFqQixLQUFBYyxFQUFBQyxJQUdBdEIsRUFBQXlCLEVBQUEsR0FHQXpCLEVBQUFBLEVBQUEwQixFQUFBLE9BS0EsU0FBQXRCLEVBQUFELEVBQUFILEdBRUEsWUFHQSxJQUFBMkIsR0FBQTNCLEVBQUEsR0FDQTRCLEVBQUE1QixFQUFBLElBQ0E2QixFQUFBN0IsRUFBQSxJQUNBOEIsRUFBQTlCLEVBQUEsSUFDQStCLEVBQUEvQixF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QUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLElBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVB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T0FBQStGLEdBQUEsU0FBQSt2RSxHQUNBLE1BQUEvdkUsR0FBQSt2RSxJQUNBL3ZFLENBQ0EsT0FBQSxVQUFBbkQsR0FDQSxNQUFBMEMsUUFBQTFDLEdBQUFtRCxRQUFBOHZFLEVBQUEzWixNQU1BLFNBQUE1OEQsRUFBQUQsRUFBQUgsR0FFQSxZQUtBSSxHQUFBRCxRQUFBSCxFQUFBLE1BSUEsU0FBQUksRUFBQUQsRUFBQUgsR0FFQSxZQUdBRyxHQUFBaUIsWUFBQSxFQUVBakIsRUFBQUEsV0FBQSxhQUVBQyxFQUFBRCxRQUFBQSxFQUFBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEyNyk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIGNvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcbnZhciBjdHggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAkZXhwb3J0KHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7IC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7IC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7IC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aCA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG46IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAodHlwZW9mIGl0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpdCkpID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpKCd3a3MnKTtcbnZhciB1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcbnZhciBfU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBfU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9IFVTRV9TWU1CT0wgJiYgX1N5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IF9TeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIDc7XG4gICAgfSB9KS5hICE9IDc7XG59KTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgey8qIGVtcHR5ICovfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGRQID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbnZhciBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNikgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgU1JDID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMikoJ3NyYycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXTtcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjEpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4gIC8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gY3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XG52YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgcElFID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG52YXIgY3JlYXRlRGVzYyA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xudmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xudmFyIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgey8qIGVtcHR5ICovfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDE3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xudmFyIElFX1BST1RPID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9cmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgICAgfTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgICB9O1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIC8qIC4uLmFyZ3MgKi97XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7LyogZW1wdHkgKi99LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS4zJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGNvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIGZuKDEpO1xuICB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBJT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbnZhciBhc2MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgICBpZiAoVFlQRSkge1xuICAgICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7IC8vIG1hcFxuICAgICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gc29tZVxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDsgLy8gZmluZFxuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4OyAvLyBmaW5kSW5kZXhcbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbCk7IC8vIGZpbHRlclxuICAgICAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfXJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuaWYgKF9fd2VicGFja19yZXF1aXJlX18oNikpIHtcbiAgdmFyIExJQlJBUlkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcbiAgdmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4gIHZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4gIHZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbiAgdmFyICR0eXBlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuICB2YXIgJGJ1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oODgpO1xuICB2YXIgY3R4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG4gIHZhciBhbkluc3RhbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcbiAgdmFyIGhpZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG4gIHZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcbiAgdmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbiAgdmFyIHRvSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOSk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG4gIHZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbiAgdmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcbiAgdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbiAgdmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG4gIHZhciBjcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG4gIHZhciBnT1BOID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IF9fd2VicGFja19yZXF1aXJlX18oODEpO1xuICB2YXIgdWlkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG4gIHZhciB3a3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KTtcbiAgdmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTtcbiAgdmFyIHNldFNwZWNpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcbiAgdmFyIGFycmF5RmlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oODMpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpO1xuICB2YXIgJERQID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbiAgdmFyICRHT1BEID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIHRvT2Zmc2V0KGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIGFsbG9jYXRlKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH1yZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gc3BlY2llc0Zyb21MaXN0KE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIGZyb21MaXN0KEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIH1yZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiBhZGRHZXR0ZXIoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07XG4gICAgICB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfU8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoKSAvKiAuLi5pdGVtcyAqL3tcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICB9cmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpO1xuICB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9cmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKE8uYnVmZmVyLCBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULCB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbikpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KSAmJiB0YXJnZXRbVFlQRURfQVJSQVldICYmICh0eXBlb2Yga2V5ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihrZXkpKSAhPSAnc3ltYm9sJyAmJiBrZXkgaW4gdGFyZ2V0ICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKSA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKSAmJiBpc09iamVjdChkZXNjKSAmJiBoYXMoZGVzYywgJ3ZhbHVlJykgJiYgIWhhcyhkZXNjLCAnZ2V0JykgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZSAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKSAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfXJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTtcbiAgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHsvKiBub29wICovfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uIGdldHRlcih0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uIHNldHRlcih0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gYWRkRWxlbWVudCh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWQgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKSA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gTkFNRTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpO1xuICAgIH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgey8qIGVtcHR5ICovfTtcblxuLyoqKi8gfSksXG4vKiAyOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBNYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNCk7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSkoJ21ldGFkYXRhJyk7XG52YXIgc3RvcmUgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAoX193ZWJwYWNrX3JlcXVpcmVfXygxMTcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBjcmVhdGUpIHtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIGlmICghdGFyZ2V0TWV0YWRhdGEpIHtcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH1cbiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7XG4gIGlmICgha2V5TWV0YWRhdGEpIHtcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH1yZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufTtcbnZhciB0b01ldGFLZXkgPSBmdW5jdGlvbiB0b01ldGFLZXkoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgKHR5cGVvZiBpdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaXQpKSA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gZXhwKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG5cbi8qKiovIH0pLFxuLyogMjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgTUVUQSA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xudmFyIHNldERlc2MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIV9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIHNldE1ldGEoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgICB3OiB7fSAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICAgIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiBmYXN0S2V5KGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuICh0eXBlb2YgaXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGl0KSkgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH1yZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIGdldFdlYWsoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gICAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfXJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gb25GcmVlemUoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbi8qKiovIH0pLFxuLyogMzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgX193ZWJwYWNrX3JlcXVpcmVfXygxMikoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG5cbi8qKiovIH0pLFxuLyogMzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiAzMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuLyoqKi8gfSksXG4vKiAzMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuXG4vKioqLyB9KSxcbi8qIDM0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NSk7XG52YXIgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuLyoqKi8gfSksXG4vKiAzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgZFBzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Nik7XG52YXIgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcbnZhciBJRV9QUk9UTyA9IF9fd2VicGFja19yZXF1aXJlX18oNjUpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7LyogZW1wdHkgKi99O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgX2NyZWF0ZURpY3QgPSBmdW5jdGlvbiBjcmVhdGVEaWN0KCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIF9fd2VicGFja19yZXF1aXJlX18oNjcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgX2NyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgZGVsZXRlIF9jcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICB9cmV0dXJuIF9jcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gX2NyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuLyoqKi8gfSksXG4vKiAzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1KTtcbnZhciBoaWRkZW5LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NikuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDM4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIGRQID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG52YXIgU1BFQ0lFUyA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqKi8gfSksXG4vKiAzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9cmV0dXJuIGl0O1xufTtcblxuLyoqKi8gfSksXG4vKiA0MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY3R4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG52YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTA3KTtcbnZhciBpc0FycmF5SXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNzkpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG52YXIgZ2V0SXRlckZuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MSk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBfZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpdGVyYWJsZTtcbiAgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuX2V4cG9ydHMuQlJFQUsgPSBCUkVBSztcbl9leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcblxuLyoqKi8gfSksXG4vKiA0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICB9cmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKiovIH0pLFxuLyogNDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGRlZiA9IF9fd2VicGFja19yZXF1aXJlX18oNykuZjtcbnZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbnZhciBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIHNwYWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBCXFx4ODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gZXhwb3J0ZXIoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuXG4vKioqLyB9KSxcbi8qIDQ0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKiovIH0pLFxuLyogNDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDQ2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKiovIH0pLFxuLyogNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbnZhciBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXJndW1lbnRzO1xufSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiB0cnlHZXQoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7LyogZW1wdHkgKi99XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICA6IEFSRyA/IGNvZihPKVxuICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuLyoqKi8gfSksXG4vKiA0OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICAgIH1cbiAgICB9cmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqKi8gfSksXG4vKiA1MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcblxuLyoqKi8gfSksXG4vKiA1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgY29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG52YXIgTUFUQ0ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDU0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBJVEVSQVRPUiA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkge1xuICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyAyO1xuICB9KTtcbn0gY2F0Y2ggKGUpIHsvKiBlbXB0eSAqL31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9O1xuICAgIH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpdGVyO1xuICAgIH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7LyogZW1wdHkgKi99XG4gIHJldHVybiBzYWZlO1xufTtcblxuLyoqKi8gfSksXG4vKiA1NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcblxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDU2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xudmFyIHdrcyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcbiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKTtcbiAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICB2YXIgcnhmbiA9IGZuc1sxXTtcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiA3O1xuICAgIH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpIHtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykge1xuICAgICAgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7XG4gICAgfVxuICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTtcbiAgICB9KTtcbiAgfVxufTtcblxuLyoqKi8gfSksXG4vKiA1NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG52YXIgU1BFQ0lFUyA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcbnZhciByZWRlZmluZUFsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xudmFyIG1ldGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcbnZhciBmb3JPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xudmFyIGFuSW5zdGFuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyICRpdGVyRGV0ZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NCk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNzApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gZml4TWV0aG9kKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSwgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7XG4gICAgICBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7cmV0dXJuIHRoaXM7XG4gICAgfSA6IGZ1bmN0aW9uIHNldChhLCBiKSB7XG4gICAgICBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7cmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBpbnN0YW5jZS5oYXMoMSk7XG4gICAgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBDKGl0ZXIpO1xuICAgIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICB9cmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcblxuLyoqKi8gfSksXG4vKiA1OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgdWlkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcblxuLyoqKi8gfSksXG4vKiA2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpIHx8ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbFxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgey8qIGVtcHR5ICovfSk7XG4gIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpW0tdO1xufSk7XG5cbi8qKiovIH0pLFxuLyogNjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICAgIH1yZXR1cm4gbmV3IHRoaXMoQSk7XG4gICAgfSB9KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xudmFyIGN0eCA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIGZvck9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICAgIEEgPSBbXTtcbiAgICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICAgIG4gPSAwO1xuICAgICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICAgIH0gfSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDYzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuLyoqKi8gfSksXG4vKiA2NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBjb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG52YXIgTElCUkFSWSA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xudmFyIHdrc0V4dCA9IF9fd2VicGFja19yZXF1aXJlX18oOTQpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDY1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzaGFyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KSgna2V5cycpO1xudmFyIHVpZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDY2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZicuc3BsaXQoJywnKTtcblxuLyoqKi8gfSksXG4vKiA2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbi8qKiovIH0pLFxuLyogNjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiBjaGVjayhPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgIHRyeSB7XG4gICAgICBzZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KShGdW5jdGlvbi5jYWxsLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGJ1Z2d5ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87ZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgcmV0dXJuIE87XG4gICAgfTtcbiAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG4vKioqLyB9KSxcbi8qIDY5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gJ1xcdFxcblxceDBCXFxmXFxyIFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcblxuLyoqKi8gfSksXG4vKiA3MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIHNldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OCkuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfXJldHVybiB0aGF0O1xufTtcblxuLyoqKi8gfSksXG4vKiA3MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG52YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7IG4gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkge1xuICAgIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgfXJldHVybiByZXM7XG59O1xuXG4vKioqLyB9KSxcbi8qIDcyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG5cbi8qKiovIH0pLFxuLyogNzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAhJGV4cG0xXG4vLyBPbGQgRkYgYnVnXG58fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4vLyBUb3IgQnJvd3NlciBidWdcbnx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xNyA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG5cbi8qKiovIH0pLFxuLyogNzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xudmFyIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmYgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGEgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDc1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBMSUJSQVJZID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG52YXIgJGl0ZXJDcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG52YXIgSVRFUkFUT1IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiByZXR1cm5UaGlzKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiBnZXRNZXRob2Qoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpO1xuICAgICAgICB9O1xuICAgICAgY2FzZSBWQUxVRVM6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTtcbiAgICAgICAgfTtcbiAgICB9cmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpO1xuICAgIH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gIUJVR0dZICYmICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG4vKioqLyB9KSxcbi8qIDc2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcbnZhciBkZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuX193ZWJwYWNrX3JlcXVpcmVfXygxMikoSXRlcmF0b3JQcm90b3R5cGUsIF9fd2VicGFja19yZXF1aXJlX18oNSkoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuLyoqKi8gfSksXG4vKiA3NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XG52YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcblxuLyoqKi8gfSksXG4vKiA3OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgTUFUQ0ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgey8qIGVtcHR5ICovfVxuICB9cmV0dXJuIHRydWU7XG59O1xuXG4vKioqLyB9KSxcbi8qIDc5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcbnZhciBJVEVSQVRPUiA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cbi8qKiovIH0pLFxuLyogODAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG52YXIgY3JlYXRlRGVzYyA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7ZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG4vKioqLyB9KSxcbi8qIDgxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG52YXIgSVRFUkFUT1IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdIHx8IGl0WydAQGl0ZXJhdG9yJ10gfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cbi8qKiovIH0pLFxuLyogODIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oMjI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcblxuLyoqKi8gfSksXG4vKiA4MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuXG5cbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkge1xuICAgIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgfXJldHVybiBPO1xufTtcblxuLyoqKi8gfSksXG4vKiA4NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xudmFyIHN0ZXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMCk7XG52YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG52YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NSkoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAvLyBraW5kXG4gIC8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vKioqLyB9KSxcbi8qIDg1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjdHggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBpbnZva2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMCk7XG52YXIgaHRtbCA9IF9fd2VicGFja19yZXF1aXJlX18oNjcpO1xudmFyIGNlbCA9IF9fd2VicGFja19yZXF1aXJlX18oNjMpO1xudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uIHJ1bigpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcihldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIH1xdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKF9fd2VicGFja19yZXF1aXJlX18oMTkpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAgIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gICAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gICAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gICAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuXG4vKioqLyB9KSxcbi8qIDg2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIG1hY3JvdGFzayA9IF9fd2VicGFja19yZXF1aXJlX18oODUpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7ZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1sYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gICAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAgIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAgIC8vIC0gc2V0SW1tZWRpYXRlXG4gICAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAgIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAgIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH1sYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogODcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG5cbnZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG5cbi8qKiovIH0pLFxuLyogODggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xudmFyIExJQlJBUlkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcbnZhciAkdHlwZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTtcbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgcmVkZWZpbmVBbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgYW5JbnN0YW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpO1xudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbnZhciB0b0luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTkpO1xudmFyIGdPUE4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KS5mO1xudmFyIGRQID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KS5mO1xudmFyIGFycmF5RmlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oODMpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Mik7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCkge31cbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KSB7fVxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH1yZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXNbaW50ZXJuYWxdO1xuICAgIH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHtcbiAgICBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbiAgfVxufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG5cbi8qKiovIH0pLFxuLyogODkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcblxuLyoqKi8gfSksXG4vKiA5MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHt2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTctMDMtMjBUMTg6NTlaXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCggZmFsc2UgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIiAmJiBfdHlwZW9mKG1vZHVsZS5leHBvcnRzKSA9PT0gXCJvYmplY3RcIikge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID8gZmFjdG9yeShnbG9iYWwsIHRydWUpIDogZnVuY3Rpb24gKHcpIHtcblx0XHRcdGlmICghdy5kb2N1bWVudCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhY3Rvcnkodyk7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KGdsb2JhbCk7XG5cdH1cblxuXHQvLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSkodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHVuZGVmaW5lZCwgZnVuY3Rpb24gKHdpbmRvdywgbm9HbG9iYWwpIHtcblxuXHQvLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcblx0Ly8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG5cdC8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG5cdC8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgYXJyID0gW107XG5cblx0dmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cdHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuXHR2YXIgX3NsaWNlID0gYXJyLnNsaWNlO1xuXG5cdHZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG5cdHZhciBwdXNoID0gYXJyLnB1c2g7XG5cblx0dmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxuXHR2YXIgY2xhc3MydHlwZSA9IHt9O1xuXG5cdHZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cblx0dmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cblx0dmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cblx0dmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKE9iamVjdCk7XG5cblx0dmFyIHN1cHBvcnQgPSB7fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKGNvZGUsIGRvYykge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0fVxuXHQvKiBnbG9iYWwgU3ltYm9sICovXG5cdC8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG5cdC8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXHR2YXIgdmVyc2lvbiA9IFwiMy4yLjFcIixcblxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uIGpRdWVyeShzZWxlY3RvciwgY29udGV4dCkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KHNlbGVjdG9yLCBjb250ZXh0KTtcblx0fSxcblxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0ICAgIHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uIGZjYW1lbENhc2UoYWxsLCBsZXR0ZXIpIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cblx0alF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHRcdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0XHRqcXVlcnk6IHZlcnNpb24sXG5cblx0XHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdFx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdFx0bGVuZ3RoOiAwLFxuXG5cdFx0dG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcblx0XHRcdHJldHVybiBfc2xpY2UuY2FsbCh0aGlzKTtcblx0XHR9LFxuXG5cdFx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHRcdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdFx0Z2V0OiBmdW5jdGlvbiBnZXQobnVtKSB7XG5cblx0XHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRcdGlmIChudW0gPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gX3NsaWNlLmNhbGwodGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdHJldHVybiBudW0gPCAwID8gdGhpc1tudW0gKyB0aGlzLmxlbmd0aF0gOiB0aGlzW251bV07XG5cdFx0fSxcblxuXHRcdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0XHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0XHRwdXNoU3RhY2s6IGZ1bmN0aW9uIHB1c2hTdGFjayhlbGVtcykge1xuXG5cdFx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zKTtcblxuXHRcdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSxcblxuXHRcdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdFx0ZWFjaDogZnVuY3Rpb24gZWFjaChjYWxsYmFjaykge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5lYWNoKHRoaXMsIGNhbGxiYWNrKTtcblx0XHR9LFxuXG5cdFx0bWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2spIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uIChlbGVtLCBpKSB7XG5cdFx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKGVsZW0sIGksIGVsZW0pO1xuXHRcdFx0fSkpO1xuXHRcdH0sXG5cblx0XHRzbGljZTogZnVuY3Rpb24gc2xpY2UoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soX3NsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHRcdH0sXG5cblx0XHRmaXJzdDogZnVuY3Rpb24gZmlyc3QoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcSgwKTtcblx0XHR9LFxuXG5cdFx0bGFzdDogZnVuY3Rpb24gbGFzdCgpIHtcblx0XHRcdHJldHVybiB0aGlzLmVxKC0xKTtcblx0XHR9LFxuXG5cdFx0ZXE6IGZ1bmN0aW9uIGVxKGkpIHtcblx0XHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdCAgICBqID0gK2kgKyAoaSA8IDAgPyBsZW4gOiAwKTtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhqID49IDAgJiYgaiA8IGxlbiA/IFt0aGlzW2pdXSA6IFtdKTtcblx0XHR9LFxuXG5cdFx0ZW5kOiBmdW5jdGlvbiBlbmQoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHRcdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRcdHB1c2g6IHB1c2gsXG5cdFx0c29ydDogYXJyLnNvcnQsXG5cdFx0c3BsaWNlOiBhcnIuc3BsaWNlXG5cdH07XG5cblx0alF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG9wdGlvbnMsXG5cdFx0ICAgIG5hbWUsXG5cdFx0ICAgIHNyYyxcblx0XHQgICAgY29weSxcblx0XHQgICAgY29weUlzQXJyYXksXG5cdFx0ICAgIGNsb25lLFxuXHRcdCAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0ICAgIGkgPSAxLFxuXHRcdCAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdCAgICBkZWVwID0gZmFsc2U7XG5cblx0XHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdFx0aWYgKHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0XHR0YXJnZXQgPSBhcmd1bWVudHNbaV0gfHwge307XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdFx0aWYgKCh0eXBlb2YgdGFyZ2V0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodGFyZ2V0KSkgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkpIHtcblx0XHRcdHRhcmdldCA9IHt9O1xuXHRcdH1cblxuXHRcdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRcdGlmIChpID09PSBsZW5ndGgpIHtcblx0XHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0XHRpLS07XG5cdFx0fVxuXG5cdFx0Zm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuXG5cdFx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRpZiAoKG9wdGlvbnMgPSBhcmd1bWVudHNbaV0pICE9IG51bGwpIHtcblxuXHRcdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHRcdGNvcHkgPSBvcHRpb25zW25hbWVdO1xuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRcdGlmICh0YXJnZXQgPT09IGNvcHkpIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmIChkZWVwICYmIGNvcHkgJiYgKGpRdWVyeS5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY29weSkpKSkge1xuXG5cdFx0XHRcdFx0XHRpZiAoY29weUlzQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0galF1ZXJ5LmV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNvcHkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0gY29weTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH07XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cblx0XHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0XHRleHBhbmRvOiBcImpRdWVyeVwiICsgKHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZywgXCJcIiksXG5cblx0XHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRcdGlzUmVhZHk6IHRydWUsXG5cblx0XHRlcnJvcjogZnVuY3Rpb24gZXJyb3IobXNnKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IobXNnKTtcblx0XHR9LFxuXG5cdFx0bm9vcDogZnVuY3Rpb24gbm9vcCgpIHt9LFxuXG5cdFx0aXNGdW5jdGlvbjogZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcblx0XHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImZ1bmN0aW9uXCI7XG5cdFx0fSxcblxuXHRcdGlzV2luZG93OiBmdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcblx0XHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdFx0fSxcblxuXHRcdGlzTnVtZXJpYzogZnVuY3Rpb24gaXNOdW1lcmljKG9iaikge1xuXG5cdFx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUob2JqKTtcblx0XHRcdHJldHVybiAodHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiKSAmJlxuXG5cdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0IWlzTmFOKG9iaiAtIHBhcnNlRmxvYXQob2JqKSk7XG5cdFx0fSxcblxuXHRcdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdFx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0XHRpZiAoIW9iaiB8fCB0b1N0cmluZy5jYWxsKG9iaikgIT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRwcm90byA9IGdldFByb3RvKG9iaik7XG5cblx0XHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRcdGlmICghcHJvdG8pIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0XHRDdG9yID0gaGFzT3duLmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoQ3RvcikgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHRcdH0sXG5cblx0XHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiBpc0VtcHR5T2JqZWN0KG9iaikge1xuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0Zm9yIChuYW1lIGluIG9iaikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dHlwZTogZnVuY3Rpb24gdHlwZShvYmopIHtcblx0XHRcdGlmIChvYmogPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0XHRyZXR1cm4gKHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzczJ0eXBlW3RvU3RyaW5nLmNhbGwob2JqKV0gfHwgXCJvYmplY3RcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xuXHRcdH0sXG5cblx0XHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRcdGdsb2JhbEV2YWw6IGZ1bmN0aW9uIGdsb2JhbEV2YWwoY29kZSkge1xuXHRcdFx0RE9NRXZhbChjb2RlKTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdFx0Y2FtZWxDYXNlOiBmdW5jdGlvbiBjYW1lbENhc2Uoc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2Uocm1zUHJlZml4LCBcIm1zLVwiKS5yZXBsYWNlKHJkYXNoQWxwaGEsIGZjYW1lbENhc2UpO1xuXHRcdH0sXG5cblx0XHRlYWNoOiBmdW5jdGlvbiBlYWNoKG9iaiwgY2FsbGJhY2spIHtcblx0XHRcdHZhciBsZW5ndGgsXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGlmIChpc0FycmF5TGlrZShvYmopKSB7XG5cdFx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRcdGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoaSBpbiBvYmopIHtcblx0XHRcdFx0XHRpZiAoY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdFx0dHJpbTogZnVuY3Rpb24gdHJpbSh0ZXh0KSB7XG5cdFx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID8gXCJcIiA6ICh0ZXh0ICsgXCJcIikucmVwbGFjZShydHJpbSwgXCJcIik7XG5cdFx0fSxcblxuXHRcdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0XHRtYWtlQXJyYXk6IGZ1bmN0aW9uIG1ha2VBcnJheShhcnIsIHJlc3VsdHMpIHtcblx0XHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0XHRpZiAoYXJyICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKGlzQXJyYXlMaWtlKE9iamVjdChhcnIpKSkge1xuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZShyZXQsIHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgPyBbYXJyXSA6IGFycik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHVzaC5jYWxsKHJldCwgYXJyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0sXG5cblx0XHRpbkFycmF5OiBmdW5jdGlvbiBpbkFycmF5KGVsZW0sIGFyciwgaSkge1xuXHRcdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoYXJyLCBlbGVtLCBpKTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdG1lcmdlOiBmdW5jdGlvbiBtZXJnZShmaXJzdCwgc2Vjb25kKSB7XG5cdFx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHQgICAgaiA9IDAsXG5cdFx0XHQgICAgaSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdFx0Zm9yICg7IGogPCBsZW47IGorKykge1xuXHRcdFx0XHRmaXJzdFtpKytdID0gc2Vjb25kW2pdO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3Q7XG5cdFx0fSxcblxuXHRcdGdyZXA6IGZ1bmN0aW9uIGdyZXAoZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQpIHtcblx0XHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHQgICAgbWF0Y2hlcyA9IFtdLFxuXHRcdFx0ICAgIGkgPSAwLFxuXHRcdFx0ICAgIGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdCAgICBjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0XHRmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayhlbGVtc1tpXSwgaSk7XG5cdFx0XHRcdGlmIChjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0KSB7XG5cdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKGVsZW1zW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlcztcblx0XHR9LFxuXG5cdFx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdFx0bWFwOiBmdW5jdGlvbiBtYXAoZWxlbXMsIGNhbGxiYWNrLCBhcmcpIHtcblx0XHRcdHZhciBsZW5ndGgsXG5cdFx0XHQgICAgdmFsdWUsXG5cdFx0XHQgICAgaSA9IDAsXG5cdFx0XHQgICAgcmV0ID0gW107XG5cblx0XHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0XHRpZiAoaXNBcnJheUxpa2UoZWxlbXMpKSB7XG5cdFx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdFx0Zm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soZWxlbXNbaV0sIGksIGFyZyk7XG5cblx0XHRcdFx0XHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0cmV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGkgaW4gZWxlbXMpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKGVsZW1zW2ldLCBpLCBhcmcpO1xuXG5cdFx0XHRcdFx0aWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdHJldC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdFx0cmV0dXJuIGNvbmNhdC5hcHBseShbXSwgcmV0KTtcblx0XHR9LFxuXG5cdFx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdFx0Z3VpZDogMSxcblxuXHRcdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHRcdC8vIGFyZ3VtZW50cy5cblx0XHRwcm94eTogZnVuY3Rpb24gcHJveHkoZm4sIGNvbnRleHQpIHtcblx0XHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0XHRpZiAodHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dG1wID0gZm5bY29udGV4dF07XG5cdFx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdFx0Zm4gPSB0bXA7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdFx0aWYgKCFqUXVlcnkuaXNGdW5jdGlvbihmbikpIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRcdGFyZ3MgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuXHRcdFx0cHJveHkgPSBmdW5jdGlvbiBwcm94eSgpIHtcblx0XHRcdFx0cmV0dXJuIGZuLmFwcGx5KGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoX3NsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdFx0cmV0dXJuIHByb3h5O1xuXHRcdH0sXG5cblx0XHRub3c6IERhdGUubm93LFxuXG5cdFx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdFx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0XHRzdXBwb3J0OiBzdXBwb3J0XG5cdH0pO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRqUXVlcnkuZm5bU3ltYm9sLml0ZXJhdG9yXSA9IGFycltTeW1ib2wuaXRlcmF0b3JdO1xuXHR9XG5cblx0Ly8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5cdGpRdWVyeS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdChcIiBcIiksIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG5cdFx0Y2xhc3MydHlwZVtcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCJdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9KTtcblxuXHRmdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHtcblxuXHRcdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0XHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdFx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdFx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHRcdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdCAgICB0eXBlID0galF1ZXJ5LnR5cGUob2JqKTtcblxuXHRcdGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KG9iaikpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgbGVuZ3RoIC0gMSBpbiBvYmo7XG5cdH1cblx0dmFyIFNpenpsZSA9XG5cdC8qIVxuICAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICAqXG4gICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gICpcbiAgKiBEYXRlOiAyMDE2LTA4LTA4XG4gICovXG5cdGZ1bmN0aW9uICh3aW5kb3cpIHtcblxuXHRcdHZhciBpLFxuXHRcdCAgICBzdXBwb3J0LFxuXHRcdCAgICBFeHByLFxuXHRcdCAgICBnZXRUZXh0LFxuXHRcdCAgICBpc1hNTCxcblx0XHQgICAgdG9rZW5pemUsXG5cdFx0ICAgIGNvbXBpbGUsXG5cdFx0ICAgIHNlbGVjdCxcblx0XHQgICAgb3V0ZXJtb3N0Q29udGV4dCxcblx0XHQgICAgc29ydElucHV0LFxuXHRcdCAgICBoYXNEdXBsaWNhdGUsXG5cblxuXHRcdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0XHRzZXREb2N1bWVudCxcblx0XHQgICAgZG9jdW1lbnQsXG5cdFx0ICAgIGRvY0VsZW0sXG5cdFx0ICAgIGRvY3VtZW50SXNIVE1MLFxuXHRcdCAgICByYnVnZ3lRU0EsXG5cdFx0ICAgIHJidWdneU1hdGNoZXMsXG5cdFx0ICAgIG1hdGNoZXMsXG5cdFx0ICAgIGNvbnRhaW5zLFxuXG5cblx0XHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdFx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0XHQgICAgcHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRcdCAgICBkaXJydW5zID0gMCxcblx0XHQgICAgZG9uZSA9IDAsXG5cdFx0ICAgIGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRcdCAgICB0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0XHQgICAgY29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdFx0ICAgIHNvcnRPcmRlciA9IGZ1bmN0aW9uIHNvcnRPcmRlcihhLCBiKSB7XG5cdFx0XHRpZiAoYSA9PT0gYikge1xuXHRcdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSxcblxuXG5cdFx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRcdGhhc093biA9IHt9Lmhhc093blByb3BlcnR5LFxuXHRcdCAgICBhcnIgPSBbXSxcblx0XHQgICAgcG9wID0gYXJyLnBvcCxcblx0XHQgICAgcHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0XHQgICAgcHVzaCA9IGFyci5wdXNoLFxuXHRcdCAgICBzbGljZSA9IGFyci5zbGljZSxcblxuXHRcdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHRcdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0XHRpbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihsaXN0LCBlbGVtKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHQgICAgbGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGlmIChsaXN0W2ldID09PSBlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiAtMTtcblx0XHR9LFxuXHRcdCAgICBib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXG5cdFx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0XHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0XHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cblx0XHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0XHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblx0XHQgICAgcHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArIFwiKVxcXFwpfClcIixcblxuXG5cdFx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRcdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCh3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiKSxcblx0XHQgICAgcnRyaW0gPSBuZXcgUmVnRXhwKFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiKSxcblx0XHQgICAgcmNvbW1hID0gbmV3IFJlZ0V4cChcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIpLFxuXHRcdCAgICByY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiksXG5cdFx0ICAgIHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIpLFxuXHRcdCAgICBycHNldWRvID0gbmV3IFJlZ0V4cChwc2V1ZG9zKSxcblx0XHQgICAgcmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiKSxcblx0XHQgICAgbWF0Y2hFeHByID0ge1xuXHRcdFx0XCJJRFwiOiBuZXcgUmVnRXhwKFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIpLFxuXHRcdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiKSxcblx0XHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiksXG5cdFx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cChcIl5cIiArIGF0dHJpYnV0ZXMpLFxuXHRcdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cChcIl5cIiArIHBzZXVkb3MpLFxuXHRcdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIpLFxuXHRcdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIpLFxuXHRcdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIpXG5cdFx0fSxcblx0XHQgICAgcmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdFx0ICAgIHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cdFx0ICAgIHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cblx0XHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0XHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cdFx0ICAgIHJzaWJsaW5nID0gL1srfl0vLFxuXG5cblx0XHQvLyBDU1MgZXNjYXBlc1xuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0XHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiKSxcblx0XHQgICAgZnVuZXNjYXBlID0gZnVuY3Rpb24gZnVuZXNjYXBlKF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlKSB7XG5cdFx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgPyBlc2NhcGVkIDogaGlnaCA8IDAgP1xuXHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZShoaWdoICsgMHgxMDAwMCkgOlxuXHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCk7XG5cdFx0fSxcblxuXG5cdFx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0XHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdFx0ICAgIGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiBmY3NzZXNjYXBlKGNoLCBhc0NvZGVQb2ludCkge1xuXHRcdFx0aWYgKGFzQ29kZVBvaW50KSB7XG5cblx0XHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRcdGlmIChjaCA9PT0gXCJcXDBcIikge1xuXHRcdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRcdHJldHVybiBjaC5zbGljZSgwLCAtMSkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoY2gubGVuZ3RoIC0gMSkudG9TdHJpbmcoMTYpICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHRcdH0sXG5cblxuXHRcdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0XHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHRcdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHRcdC8vIGVycm9yIGluIElFXG5cdFx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uIHVubG9hZEhhbmRsZXIoKSB7XG5cdFx0XHRzZXREb2N1bWVudCgpO1xuXHRcdH0sXG5cdFx0ICAgIGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSwgeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH0pO1xuXG5cdFx0Ly8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcblx0XHR0cnkge1xuXHRcdFx0cHVzaC5hcHBseShhcnIgPSBzbGljZS5jYWxsKHByZWZlcnJlZERvYy5jaGlsZE5vZGVzKSwgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMpO1xuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHRcdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0XHRcdGFycltwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdFx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdFx0XHRmdW5jdGlvbiAodGFyZ2V0LCBlbHMpIHtcblx0XHRcdFx0XHRwdXNoX25hdGl2ZS5hcHBseSh0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSk7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdFx0XHRmdW5jdGlvbiAodGFyZ2V0LCBlbHMpIHtcblx0XHRcdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdFx0ICAgIGkgPSAwO1xuXHRcdFx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0XHRcdHdoaWxlICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSB7fVxuXHRcdFx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBTaXp6bGUoc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQpIHtcblx0XHRcdHZhciBtLFxuXHRcdFx0ICAgIGksXG5cdFx0XHQgICAgZWxlbSxcblx0XHRcdCAgICBuaWQsXG5cdFx0XHQgICAgbWF0Y2gsXG5cdFx0XHQgICAgZ3JvdXBzLFxuXHRcdFx0ICAgIG5ld1NlbGVjdG9yLFxuXHRcdFx0ICAgIG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXG5cdFx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRcdFx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRcdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdFx0XHRpZiAodHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fCBub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEpIHtcblxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRcdFx0aWYgKCFzZWVkKSB7XG5cblx0XHRcdFx0aWYgKChjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MpICE9PSBkb2N1bWVudCkge1xuXHRcdFx0XHRcdHNldERvY3VtZW50KGNvbnRleHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0XHRcdGlmIChkb2N1bWVudElzSFRNTCkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRcdFx0aWYgKG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoc2VsZWN0b3IpKSkge1xuXG5cdFx0XHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRcdFx0aWYgKG0gPSBtYXRjaFsxXSkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRcdFx0aWYgKG5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKG0pKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGVsZW0uaWQgPT09IG0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRcdGlmIChuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZChtKSkgJiYgY29udGFpbnMoY29udGV4dCwgZWxlbSkgJiYgZWxlbS5pZCA9PT0gbSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goZWxlbSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKG1hdGNoWzJdKSB7XG5cdFx0XHRcdFx0XHRcdHB1c2guYXBwbHkocmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3RvcikpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICgobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB7XG5cblx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobSkpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRcdFx0aWYgKHN1cHBvcnQucXNhICYmICFjb21waWxlckNhY2hlW3NlbGVjdG9yICsgXCIgXCJdICYmICghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdChzZWxlY3RvcikpKSB7XG5cblx0XHRcdFx0XHRcdGlmIChub2RlVHlwZSAhPT0gMSkge1xuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIikge1xuXG5cdFx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRcdGlmIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZShcImlkXCIpKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UocmNzc2VzY2FwZSwgZmNzc2VzY2FwZSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBuaWQgPSBleHBhbmRvKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZShzZWxlY3Rvcik7XG5cdFx0XHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoZ3JvdXBzW2ldKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKFwiLFwiKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3Qoc2VsZWN0b3IpICYmIHRlc3RDb250ZXh0KGNvbnRleHQucGFyZW50Tm9kZSkgfHwgY29udGV4dDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKG5ld1NlbGVjdG9yKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwobmV3U2VsZWN0b3IpKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAocXNhRXJyb3IpIHt9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChuaWQgPT09IGV4cGFuZG8pIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsbCBvdGhlcnNcblx0XHRcdHJldHVybiBzZWxlY3Qoc2VsZWN0b3IucmVwbGFjZShydHJpbSwgXCIkMVwiKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCk7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gICAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICAgKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICAgKi9cblx0XHRmdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0XHRcdHZhciBrZXlzID0gW107XG5cblx0XHRcdGZ1bmN0aW9uIGNhY2hlKGtleSwgdmFsdWUpIHtcblx0XHRcdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRcdFx0aWYgKGtleXMucHVzaChrZXkgKyBcIiBcIikgPiBFeHByLmNhY2hlTGVuZ3RoKSB7XG5cdFx0XHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRcdFx0ZGVsZXRlIGNhY2hlW2tleXMuc2hpZnQoKV07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGNhY2hlW2tleSArIFwiIFwiXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNhY2hlO1xuXHRcdH1cblxuXHRcdC8qKlxuICAgKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICAgKi9cblx0XHRmdW5jdGlvbiBtYXJrRnVuY3Rpb24oZm4pIHtcblx0XHRcdGZuW2V4cGFuZG9dID0gdHJ1ZTtcblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cblx0XHQvKipcbiAgICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICAgKi9cblx0XHRmdW5jdGlvbiBhc3NlcnQoZm4pIHtcblx0XHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuICEhZm4oZWwpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRcdFx0aWYgKGVsLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdFx0XHRlbCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAgICovXG5cdFx0ZnVuY3Rpb24gYWRkSGFuZGxlKGF0dHJzLCBoYW5kbGVyKSB7XG5cdFx0XHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdFx0ICAgIGkgPSBhcnIubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdEV4cHIuYXR0ckhhbmRsZVthcnJbaV1dID0gaGFuZGxlcjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKipcbiAgICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAgICogQHBhcmFtIHtFbGVtZW50fSBiXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICAgKi9cblx0XHRmdW5jdGlvbiBzaWJsaW5nQ2hlY2soYSwgYikge1xuXHRcdFx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRcdCAgICBkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJiBhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHRcdFx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdFx0XHRpZiAoZGlmZikge1xuXHRcdFx0XHRyZXR1cm4gZGlmZjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0XHRcdGlmIChjdXIpIHtcblx0XHRcdFx0d2hpbGUgKGN1ciA9IGN1ci5uZXh0U2libGluZykge1xuXHRcdFx0XHRcdGlmIChjdXIgPT09IGIpIHtcblx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGEgPyAxIDogLTE7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICovXG5cdFx0ZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8odHlwZSkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKi9cblx0XHRmdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8odHlwZSkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8qKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gICAqL1xuXHRcdGZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKGRpc2FibGVkKSB7XG5cblx0XHRcdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cblx0XHRcdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdFx0XHRpZiAoXCJmb3JtXCIgaW4gZWxlbSkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdFx0XHRpZiAoZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdFx0XHRpZiAoXCJsYWJlbFwiIGluIGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0aWYgKFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiYgZGlzYWJsZWRBbmNlc3RvcihlbGVtKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0XHRcdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdFx0XHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdFx0XHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdFx0XHR9IGVsc2UgaWYgKFwibGFiZWxcIiBpbiBlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKi9cblx0XHRmdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZuKSB7XG5cdFx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChhcmd1bWVudCkge1xuXHRcdFx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRcdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiAoc2VlZCwgbWF0Y2hlcykge1xuXHRcdFx0XHRcdHZhciBqLFxuXHRcdFx0XHRcdCAgICBtYXRjaEluZGV4ZXMgPSBmbihbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50KSxcblx0XHRcdFx0XHQgICAgaSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRpZiAoc2VlZFtqID0gbWF0Y2hJbmRleGVzW2ldXSkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8qKlxuICAgKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gICAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gICAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICAgKi9cblx0XHRmdW5jdGlvbiB0ZXN0Q29udGV4dChjb250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xuXHRcdH1cblxuXHRcdC8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5cdFx0c3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cblx0XHQvKipcbiAgICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAgICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICAgKi9cblx0XHRpc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdFx0XHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0XHRcdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcblx0XHR9O1xuXG5cdFx0LyoqXG4gICAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICAgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gICAqL1xuXHRcdHNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0XHRcdHZhciBoYXNDb21wYXJlLFxuXHRcdFx0ICAgIHN1YldpbmRvdyxcblx0XHRcdCAgICBkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0XHRcdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdFx0XHRpZiAoZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQpIHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRcdFx0ZG9jdW1lbnQgPSBkb2M7XG5cdFx0XHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoZG9jdW1lbnQpO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdFx0XHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdFx0XHRpZiAocHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJiAoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdykge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0XHRcdGlmIChzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdFx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0XHRcdH0gZWxzZSBpZiAoc3ViV2luZG93LmF0dGFjaEV2ZW50KSB7XG5cdFx0XHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyogQXR0cmlidXRlc1xuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0XHRcdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRcdFx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRcdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdFx0XHR9KTtcblxuXHRcdFx0LyogZ2V0RWxlbWVudChzKUJ5KlxuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdFx0XHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdFx0XHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpKTtcblx0XHRcdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8MTBcblx0XHRcdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHRcdFx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdFx0XHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0XHRcdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZChlbCkuaWQgPSBleHBhbmRvO1xuXHRcdFx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShleHBhbmRvKS5sZW5ndGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdFx0XHRpZiAoc3VwcG9ydC5nZXRCeUlkKSB7XG5cdFx0XHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiAoaWQpIHtcblx0XHRcdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSk7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cdFx0XHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24gKGlkLCBjb250ZXh0KSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MKSB7XG5cdFx0XHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbZWxlbV0gOiBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpO1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0XHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24gKGlkLCBjb250ZXh0KSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MKSB7XG5cdFx0XHRcdFx0XHR2YXIgbm9kZSxcblx0XHRcdFx0XHRcdCAgICBpLFxuXHRcdFx0XHRcdFx0ICAgIGVsZW1zLFxuXHRcdFx0XHRcdFx0ICAgIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKGlkKTtcblxuXHRcdFx0XHRcdFx0aWYgKGVsZW0pIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRcdGlmIChub2RlICYmIG5vZGUudmFsdWUgPT09IGlkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFtlbGVtXTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoaWQpO1xuXHRcdFx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSBlbGVtc1tpKytdKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChub2RlICYmIG5vZGUudmFsdWUgPT09IGlkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gW2VsZW1dO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWdcblx0XHRcdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBmdW5jdGlvbiAodGFnLCBjb250ZXh0KSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdFx0fSBlbHNlIGlmIChzdXBwb3J0LnFzYSkge1xuXHRcdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwodGFnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSA6IGZ1bmN0aW9uICh0YWcsIGNvbnRleHQpIHtcblx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdCAgICB0bXAgPSBbXSxcblx0XHRcdFx0ICAgIGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKTtcblxuXHRcdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRcdGlmICh0YWcgPT09IFwiKlwiKSB7XG5cdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSByZXN1bHRzW2krK10pIHtcblx0XHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdHRtcC5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDbGFzc1xuXHRcdFx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24gKGNsYXNzTmFtZSwgY29udGV4dCkge1xuXHRcdFx0XHRpZiAodHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCkge1xuXHRcdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdFx0XHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0XHRcdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdFx0XHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0XHRcdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdFx0XHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0XHRcdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0XHRcdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdFx0XHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRcdFx0aWYgKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpKSB7XG5cdFx0XHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdFx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0XHRcdGFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKGVsKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICsgXCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArIFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRcdFx0aWYgKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdFx0XHRpZiAoIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRcdFx0aWYgKCFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdFx0XHRpZiAoIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0XHRcdGlmICghZWwucXVlcnlTZWxlY3RvckFsbChcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRhc3NlcnQoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICsgXCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImhpZGRlblwiKTtcblx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZChpbnB1dCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcIkRcIik7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdFx0XHRpZiAoZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRcdFx0aWYgKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoZWwpLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRpZiAoZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fCBkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fCBkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHwgZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikpIHtcblxuXHRcdFx0XHRhc3NlcnQoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKGVsLCBcIipcIik7XG5cblx0XHRcdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0XHRcdG1hdGNoZXMuY2FsbChlbCwgXCJbcyE9JyddOnhcIik7XG5cdFx0XHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKFwiIT1cIiwgcHNldWRvcyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAocmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpKTtcblx0XHRcdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKHJidWdneU1hdGNoZXMuam9pbihcInxcIikpO1xuXG5cdFx0XHQvKiBDb250YWluc1xuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRcdFx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdChkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKTtcblxuXHRcdFx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdFx0XHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0XHRcdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdFx0XHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KGRvY0VsZW0uY29udGFpbnMpID8gZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0ICAgIGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKGFkb3duLmNvbnRhaW5zID8gYWRvd24uY29udGFpbnMoYnVwKSA6IGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihidXApICYgMTYpKTtcblx0XHRcdH0gOiBmdW5jdGlvbiAoYSwgYikge1xuXHRcdFx0XHRpZiAoYikge1xuXHRcdFx0XHRcdHdoaWxlIChiID0gYi5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0XHRpZiAoYiA9PT0gYSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblxuXHRcdFx0LyogU29ydGluZ1xuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdFx0XHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdFx0XHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID8gZnVuY3Rpb24gKGEsIGIpIHtcblxuXHRcdFx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdFx0XHRpZiAoYSA9PT0gYikge1xuXHRcdFx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0XHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRcdFx0aWYgKGNvbXBhcmUpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRcdFx0Y29tcGFyZSA9IChhLm93bmVyRG9jdW1lbnQgfHwgYSkgPT09IChiLm93bmVyRG9jdW1lbnQgfHwgYikgPyBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdFx0MTtcblxuXHRcdFx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdFx0aWYgKGNvbXBhcmUgJiAxIHx8ICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGEpID09PSBjb21wYXJlKSB7XG5cblx0XHRcdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdFx0XHRpZiAoYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdFx0XHRyZXR1cm4gc29ydElucHV0ID8gaW5kZXhPZihzb3J0SW5wdXQsIGEpIC0gaW5kZXhPZihzb3J0SW5wdXQsIGIpIDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0XHRcdH0gOiBmdW5jdGlvbiAoYSwgYikge1xuXHRcdFx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0XHRcdGlmIChhID09PSBiKSB7XG5cdFx0XHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBjdXIsXG5cdFx0XHRcdCAgICBpID0gMCxcblx0XHRcdFx0ICAgIGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdFx0ICAgIGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdFx0ICAgIGFwID0gW2FdLFxuXHRcdFx0XHQgICAgYnAgPSBbYl07XG5cblx0XHRcdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRcdFx0aWYgKCFhdXAgfHwgIWJ1cCkge1xuXHRcdFx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDogYiA9PT0gZG9jdW1lbnQgPyAxIDogYXVwID8gLTEgOiBidXAgPyAxIDogc29ydElucHV0ID8gaW5kZXhPZihzb3J0SW5wdXQsIGEpIC0gaW5kZXhPZihzb3J0SW5wdXQsIGIpIDogMDtcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0XHRcdH0gZWxzZSBpZiAoYXVwID09PSBidXApIHtcblx0XHRcdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKGEsIGIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRcdFx0Y3VyID0gYTtcblx0XHRcdFx0d2hpbGUgKGN1ciA9IGN1ci5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0YXAudW5zaGlmdChjdXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1ciA9IGI7XG5cdFx0XHRcdHdoaWxlIChjdXIgPSBjdXIucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdGJwLnVuc2hpZnQoY3VyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0XHRcdHdoaWxlIChhcFtpXSA9PT0gYnBbaV0pIHtcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gaSA/XG5cdFx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0XHRzaWJsaW5nQ2hlY2soYXBbaV0sIGJwW2ldKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6IGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDogMDtcblx0XHRcdH07XG5cblx0XHRcdHJldHVybiBkb2N1bWVudDtcblx0XHR9O1xuXG5cdFx0U2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiAoZXhwciwgZWxlbWVudHMpIHtcblx0XHRcdHJldHVybiBTaXp6bGUoZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMpO1xuXHRcdH07XG5cblx0XHRTaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24gKGVsZW0sIGV4cHIpIHtcblx0XHRcdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRcdFx0aWYgKChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkgIT09IGRvY3VtZW50KSB7XG5cdFx0XHRcdHNldERvY3VtZW50KGVsZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0XHRcdGV4cHIgPSBleHByLnJlcGxhY2UocmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIik7XG5cblx0XHRcdGlmIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJiAhY29tcGlsZXJDYWNoZVtleHByICsgXCIgXCJdICYmICghcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KGV4cHIpKSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoZXhwcikpKSB7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKGVsZW0sIGV4cHIpO1xuXG5cdFx0XHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0XHRcdGlmIChyZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEpIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gU2l6emxlKGV4cHIsIGRvY3VtZW50LCBudWxsLCBbZWxlbV0pLmxlbmd0aCA+IDA7XG5cdFx0fTtcblxuXHRcdFNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uIChjb250ZXh0LCBlbGVtKSB7XG5cdFx0XHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0XHRcdGlmICgoY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQpICE9PSBkb2N1bWVudCkge1xuXHRcdFx0XHRzZXREb2N1bWVudChjb250ZXh0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjb250YWlucyhjb250ZXh0LCBlbGVtKTtcblx0XHR9O1xuXG5cdFx0U2l6emxlLmF0dHIgPSBmdW5jdGlvbiAoZWxlbSwgbmFtZSkge1xuXHRcdFx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdFx0XHRpZiAoKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKSAhPT0gZG9jdW1lbnQpIHtcblx0XHRcdFx0c2V0RG9jdW1lbnQoZWxlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVtuYW1lLnRvTG93ZXJDYXNlKCldLFxuXG5cdFx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpKSA/IGZuKGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCkgOiB1bmRlZmluZWQ7XG5cblx0XHRcdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/IHZhbCA6IHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgPyBlbGVtLmdldEF0dHJpYnV0ZShuYW1lKSA6ICh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgPyB2YWwudmFsdWUgOiBudWxsO1xuXHRcdH07XG5cblx0XHRTaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24gKHNlbCkge1xuXHRcdFx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUpO1xuXHRcdH07XG5cblx0XHRTaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiAobXNnKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyk7XG5cdFx0fTtcblxuXHRcdC8qKlxuICAgKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gICAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gICAqL1xuXHRcdFNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0ICAgIGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRcdCAgICBqID0gMCxcblx0XHRcdCAgICBpID0gMDtcblxuXHRcdFx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRcdFx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0XHRcdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSgwKTtcblx0XHRcdHJlc3VsdHMuc29ydChzb3J0T3JkZXIpO1xuXG5cdFx0XHRpZiAoaGFzRHVwbGljYXRlKSB7XG5cdFx0XHRcdHdoaWxlIChlbGVtID0gcmVzdWx0c1tpKytdKSB7XG5cdFx0XHRcdFx0aWYgKGVsZW0gPT09IHJlc3VsdHNbaV0pIHtcblx0XHRcdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHdoaWxlIChqLS0pIHtcblx0XHRcdFx0XHRyZXN1bHRzLnNwbGljZShkdXBsaWNhdGVzW2pdLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdFx0XHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdFx0LyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gICAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICAgKi9cblx0XHRnZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0dmFyIG5vZGUsXG5cdFx0XHQgICAgcmV0ID0gXCJcIixcblx0XHRcdCAgICBpID0gMCxcblx0XHRcdCAgICBub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHRcdGlmICghbm9kZVR5cGUpIHtcblx0XHRcdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHRcdFx0d2hpbGUgKG5vZGUgPSBlbGVtW2krK10pIHtcblx0XHRcdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0XHRcdHJldCArPSBnZXRUZXh0KG5vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSkge1xuXHRcdFx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0XHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0XHRcdGlmICh0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0XHRcdGZvciAoZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcpIHtcblx0XHRcdFx0XHRcdHJldCArPSBnZXRUZXh0KGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdFx0XHR9XG5cdFx0XHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9O1xuXG5cdFx0RXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0XHRcdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRcdFx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdFx0XHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRcdFx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRcdFx0YXR0ckhhbmRsZToge30sXG5cblx0XHRcdGZpbmQ6IHt9LFxuXG5cdFx0XHRyZWxhdGl2ZToge1xuXHRcdFx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0XHRcdH0sXG5cblx0XHRcdHByZUZpbHRlcjoge1xuXHRcdFx0XHRcIkFUVFJcIjogZnVuY3Rpb24gQVRUUihtYXRjaCkge1xuXHRcdFx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSk7XG5cblx0XHRcdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0XHRcdG1hdGNoWzNdID0gKG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIpLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpO1xuXG5cdFx0XHRcdFx0aWYgKG1hdGNoWzJdID09PSBcIn49XCIpIHtcblx0XHRcdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBtYXRjaC5zbGljZSgwLCA0KTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uIENISUxEKG1hdGNoKSB7XG5cdFx0XHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG4gICAgIFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG4gICAgIFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuICAgICBcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG4gICAgIFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG4gICAgIFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuICAgICBcdDYgeCBvZiB4bi1jb21wb25lbnRcbiAgICAgXHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcbiAgICAgXHQ4IHkgb2YgeS1jb21wb25lbnRcbiAgICAgKi9cblx0XHRcdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdFx0XHRpZiAobWF0Y2hbMV0uc2xpY2UoMCwgMykgPT09IFwibnRoXCIpIHtcblx0XHRcdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdFx0XHRpZiAoIW1hdGNoWzNdKSB7XG5cdFx0XHRcdFx0XHRcdFNpenpsZS5lcnJvcihtYXRjaFswXSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRcdFx0bWF0Y2hbNF0gPSArKG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIikpO1xuXHRcdFx0XHRcdFx0bWF0Y2hbNV0gPSArKG1hdGNoWzddICsgbWF0Y2hbOF0gfHwgbWF0Y2hbM10gPT09IFwib2RkXCIpO1xuXG5cdFx0XHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG1hdGNoWzNdKSB7XG5cdFx0XHRcdFx0XHRTaXp6bGUuZXJyb3IobWF0Y2hbMF0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiBQU0VVRE8obWF0Y2gpIHtcblx0XHRcdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHRcdCAgICB1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0XHRcdGlmIChtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KG1hdGNoWzBdKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdFx0XHRpZiAobWF0Y2hbM10pIHtcblx0XHRcdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0XHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCh1bnF1b3RlZCkgJiYgKFxuXHRcdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdFx0ZXhjZXNzID0gdG9rZW5pemUodW5xdW90ZWQsIHRydWUpKSAmJiAoXG5cdFx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdFx0ZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZihcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzKSAtIHVucXVvdGVkLmxlbmd0aCkpIHtcblxuXHRcdFx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoMCwgZXhjZXNzKTtcblx0XHRcdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoMCwgZXhjZXNzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoMCwgMyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGZpbHRlcjoge1xuXG5cdFx0XHRcdFwiVEFHXCI6IGZ1bmN0aW9uIFRBRyhub2RlTmFtZVNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH0gOiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24gQ0xBU1MoY2xhc3NOYW1lKSB7XG5cdFx0XHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlW2NsYXNzTmFtZSArIFwiIFwiXTtcblxuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuIHx8IChwYXR0ZXJuID0gbmV3IFJlZ0V4cChcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIikpICYmIGNsYXNzQ2FjaGUoY2xhc3NOYW1lLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCh0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJBVFRSXCI6IGZ1bmN0aW9uIEFUVFIobmFtZSwgb3BlcmF0b3IsIGNoZWNrKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoZWxlbSwgbmFtZSk7XG5cblx0XHRcdFx0XHRcdGlmIChyZXN1bHQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3BlcmF0b3IpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6IG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDogb3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKGNoZWNrKSA9PT0gMCA6IG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZihjaGVjaykgPiAtMSA6IG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoLWNoZWNrLmxlbmd0aCkgPT09IGNoZWNrIDogb3BlcmF0b3IgPT09IFwifj1cIiA/IChcIiBcIiArIHJlc3VsdC5yZXBsYWNlKHJ3aGl0ZXNwYWNlLCBcIiBcIikgKyBcIiBcIikuaW5kZXhPZihjaGVjaykgPiAtMSA6IG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSgwLCBjaGVjay5sZW5ndGggKyAxKSA9PT0gY2hlY2sgKyBcIi1cIiA6IGZhbHNlO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJDSElMRFwiOiBmdW5jdGlvbiBDSElMRCh0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QpIHtcblx0XHRcdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSgwLCAzKSAhPT0gXCJudGhcIixcblx0XHRcdFx0XHQgICAgZm9yd2FyZCA9IHR5cGUuc2xpY2UoLTQpICE9PSBcImxhc3RcIixcblx0XHRcdFx0XHQgICAgb2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHR9IDogZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHRcdFx0dmFyIGNhY2hlLFxuXHRcdFx0XHRcdFx0ICAgIHVuaXF1ZUNhY2hlLFxuXHRcdFx0XHRcdFx0ICAgIG91dGVyQ2FjaGUsXG5cdFx0XHRcdFx0XHQgICAgbm9kZSxcblx0XHRcdFx0XHRcdCAgICBub2RlSW5kZXgsXG5cdFx0XHRcdFx0XHQgICAgc3RhcnQsXG5cdFx0XHRcdFx0XHQgICAgZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdCAgICBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHQgICAgbmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHQgICAgdXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHQgICAgZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0XHRpZiAocGFyZW50KSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0XHRpZiAoc2ltcGxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKGRpcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSAobm9kZSA9IG5vZGVbZGlyXSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAob2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRzdGFydCA9IFtmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0XHRpZiAoZm9yd2FyZCAmJiB1c2VDYWNoZSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVtleHBhbmRvXSB8fCAobm9kZVtleHBhbmRvXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gfHwgKG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlW3R5cGVdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzFdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbMl07XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1tub2RlSW5kZXhdO1xuXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbZGlyXSB8fCAoXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbdHlwZV0gPSBbZGlycnVucywgbm9kZUluZGV4LCBkaWZmXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRcdGlmICh1c2VDYWNoZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVtleHBhbmRvXSB8fCAobm9kZVtleHBhbmRvXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gfHwgKG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbdHlwZV0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGlmZiA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVtkaXJdIHx8IChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoKG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEpICYmICsrZGlmZikge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICh1c2VDYWNoZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbZXhwYW5kb10gfHwgKG5vZGVbZXhwYW5kb10gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlW25vZGUudW5pcXVlSURdIHx8IChvdXRlckNhY2hlW25vZGUudW5pcXVlSURdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVt0eXBlXSA9IFtkaXJydW5zLCBkaWZmXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAobm9kZSA9PT0gZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24gUFNFVURPKHBzZXVkbywgYXJndW1lbnQpIHtcblx0XHRcdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdFx0ICAgIGZuID0gRXhwci5wc2V1ZG9zW3BzZXVkb10gfHwgRXhwci5zZXRGaWx0ZXJzW3BzZXVkby50b0xvd2VyQ2FzZSgpXSB8fCBTaXp6bGUuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvKTtcblxuXHRcdFx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdFx0XHRpZiAoZm5bZXhwYW5kb10pIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbihhcmd1bWVudCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRcdFx0aWYgKGZuLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdGFyZ3MgPSBbcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50XTtcblx0XHRcdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkocHNldWRvLnRvTG93ZXJDYXNlKCkpID8gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChzZWVkLCBtYXRjaGVzKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdCAgICBtYXRjaGVkID0gZm4oc2VlZCwgYXJndW1lbnQpLFxuXHRcdFx0XHRcdFx0XHQgICAgaSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZihzZWVkLCBtYXRjaGVkW2ldKTtcblx0XHRcdFx0XHRcdFx0XHRzZWVkW2lkeF0gPSAhKG1hdGNoZXNbaWR4XSA9IG1hdGNoZWRbaV0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KSA6IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmbihlbGVtLCAwLCBhcmdzKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGZuO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRwc2V1ZG9zOiB7XG5cdFx0XHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRcdCAgICByZXN1bHRzID0gW10sXG5cdFx0XHRcdFx0ICAgIG1hdGNoZXIgPSBjb21waWxlKHNlbGVjdG9yLnJlcGxhY2UocnRyaW0sIFwiJDFcIikpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXJbZXhwYW5kb10gPyBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHQgICAgdW5tYXRjaGVkID0gbWF0Y2hlcihzZWVkLCBudWxsLCB4bWwsIFtdKSxcblx0XHRcdFx0XHRcdCAgICBpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHRcdFx0aWYgKGVsZW0gPSB1bm1hdGNoZWRbaV0pIHtcblx0XHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6IGZ1bmN0aW9uIChlbGVtLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRcdG1hdGNoZXIoaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyk7XG5cdFx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0pLFxuXG5cdFx0XHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiAoc2VsZWN0b3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBTaXp6bGUoc2VsZWN0b3IsIGVsZW0pLmxlbmd0aCA+IDA7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHRleHQpIHtcblx0XHRcdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKTtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiAoZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KGVsZW0pKS5pbmRleE9mKHRleHQpID4gLTE7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0XHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0XHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0XHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0XHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdFx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiAobGFuZykge1xuXHRcdFx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdFx0XHRpZiAoIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSkge1xuXHRcdFx0XHRcdFx0U2l6emxlLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRcdFx0aWYgKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgPyBlbGVtLmxhbmcgOiBlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKGxhbmcgKyBcIi1cIikgPT09IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gd2hpbGUgKChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uIHRhcmdldChlbGVtKSB7XG5cdFx0XHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSgxKSA9PT0gZWxlbS5pZDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcInJvb3RcIjogZnVuY3Rpb24gcm9vdChlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiBmb2N1cyhlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKGZhbHNlKSxcblx0XHRcdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyh0cnVlKSxcblxuXHRcdFx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24gY2hlY2tlZChlbGVtKSB7XG5cdFx0XHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgfHwgbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24gc2VsZWN0ZWQoZWxlbSkge1xuXHRcdFx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRcdFx0aWYgKGVsZW0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ29udGVudHNcblx0XHRcdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiBlbXB0eShlbGVtKSB7XG5cdFx0XHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRcdFx0Zm9yIChlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZykge1xuXHRcdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPCA2KSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24gcGFyZW50KGVsZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKGVsZW0pO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24gaGVhZGVyKGVsZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KGVsZW0ubm9kZU5hbWUpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiaW5wdXRcIjogZnVuY3Rpb24gaW5wdXQoZWxlbSkge1xuXHRcdFx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoZWxlbS5ub2RlTmFtZSk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJidXR0b25cIjogZnVuY3Rpb24gYnV0dG9uKGVsZW0pIHtcblx0XHRcdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwidGV4dFwiOiBmdW5jdGlvbiB0ZXh0KGVsZW0pIHtcblx0XHRcdFx0XHR2YXIgYXR0cjtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcInRleHRcIiAmJiAoXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0XHQoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFswXTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24gKG1hdGNoSW5kZXhlcywgbGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFtsZW5ndGggLSAxXTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uIChtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQpIHtcblx0XHRcdFx0XHRyZXR1cm4gW2FyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnRdO1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiAobWF0Y2hJbmRleGVzLCBsZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRcdFx0Zm9yICg7IGkgPCBsZW5ndGg7IGkgKz0gMikge1xuXHRcdFx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0XHRcdH0pLFxuXG5cdFx0XHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24gKG1hdGNoSW5kZXhlcywgbGVuZ3RoKSB7XG5cdFx0XHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0XHRcdGZvciAoOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHtcblx0XHRcdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKGkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24gKG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCkge1xuXHRcdFx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdFx0XHRmb3IgKDsgLS1pID49IDA7KSB7XG5cdFx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaChpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uIChtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQpIHtcblx0XHRcdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRcdFx0Zm9yICg7ICsraSA8IGxlbmd0aDspIHtcblx0XHRcdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKGkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRFeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuXHRcdC8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5cdFx0Zm9yIChpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSkge1xuXHRcdFx0RXhwci5wc2V1ZG9zW2ldID0gY3JlYXRlSW5wdXRQc2V1ZG8oaSk7XG5cdFx0fVxuXHRcdGZvciAoaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSkge1xuXHRcdFx0RXhwci5wc2V1ZG9zW2ldID0gY3JlYXRlQnV0dG9uUHNldWRvKGkpO1xuXHRcdH1cblxuXHRcdC8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuXHRcdGZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuXHRcdHNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuXHRcdEV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cblx0XHR0b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChzZWxlY3RvciwgcGFyc2VPbmx5KSB7XG5cdFx0XHR2YXIgbWF0Y2hlZCxcblx0XHRcdCAgICBtYXRjaCxcblx0XHRcdCAgICB0b2tlbnMsXG5cdFx0XHQgICAgdHlwZSxcblx0XHRcdCAgICBzb0Zhcixcblx0XHRcdCAgICBncm91cHMsXG5cdFx0XHQgICAgcHJlRmlsdGVycyxcblx0XHRcdCAgICBjYWNoZWQgPSB0b2tlbkNhY2hlW3NlbGVjdG9yICsgXCIgXCJdO1xuXG5cdFx0XHRpZiAoY2FjaGVkKSB7XG5cdFx0XHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKDApO1xuXHRcdFx0fVxuXG5cdFx0XHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRcdFx0Z3JvdXBzID0gW107XG5cdFx0XHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0XHRcdHdoaWxlIChzb0Zhcikge1xuXG5cdFx0XHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRcdFx0aWYgKCFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKHNvRmFyKSkpIHtcblx0XHRcdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKG1hdGNoWzBdLmxlbmd0aCkgfHwgc29GYXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdyb3Vwcy5wdXNoKHRva2VucyA9IFtdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyhzb0ZhcikpIHtcblx0XHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZShydHJpbSwgXCIgXCIpXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZShtYXRjaGVkLmxlbmd0aCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGaWx0ZXJzXG5cdFx0XHRcdGZvciAodHlwZSBpbiBFeHByLmZpbHRlcikge1xuXHRcdFx0XHRcdGlmICgobWF0Y2ggPSBtYXRjaEV4cHJbdHlwZV0uZXhlYyhzb0ZhcikpICYmICghcHJlRmlsdGVyc1t0eXBlXSB8fCAobWF0Y2ggPSBwcmVGaWx0ZXJzW3R5cGVdKG1hdGNoKSkpKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UobWF0Y2hlZC5sZW5ndGgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghbWF0Y2hlZCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHRcdFx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdFx0XHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0XHRcdHJldHVybiBwYXJzZU9ubHkgPyBzb0Zhci5sZW5ndGggOiBzb0ZhciA/IFNpenpsZS5lcnJvcihzZWxlY3RvcikgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZShzZWxlY3RvciwgZ3JvdXBzKS5zbGljZSgwKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdG9TZWxlY3Rvcih0b2tlbnMpIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdCAgICBsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdFx0ICAgIHNlbGVjdG9yID0gXCJcIjtcblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFkZENvbWJpbmF0b3IobWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSkge1xuXHRcdFx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdFx0ICAgIHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0XHQgICAga2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0XHQgICAgY2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRcdCAgICBkb25lTmFtZSA9IGRvbmUrKztcblxuXHRcdFx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0XHRmdW5jdGlvbiAoZWxlbSwgY29udGV4dCwgeG1sKSB7XG5cdFx0XHRcdHdoaWxlIChlbGVtID0gZWxlbVtkaXJdKSB7XG5cdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cykge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoZWxlbSwgY29udGV4dCwgeG1sKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSA6XG5cblx0XHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdFx0ZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHR2YXIgb2xkQ2FjaGUsXG5cdFx0XHRcdCAgICB1bmlxdWVDYWNoZSxcblx0XHRcdFx0ICAgIG91dGVyQ2FjaGUsXG5cdFx0XHRcdCAgICBuZXdDYWNoZSA9IFtkaXJydW5zLCBkb25lTmFtZV07XG5cblx0XHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRcdGlmICh4bWwpIHtcblx0XHRcdFx0XHR3aGlsZSAoZWxlbSA9IGVsZW1bZGlyXSkge1xuXHRcdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cykge1xuXHRcdFx0XHRcdFx0XHRpZiAobWF0Y2hlcihlbGVtLCBjb250ZXh0LCB4bWwpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSBlbGVtW2Rpcl0pIHtcblx0XHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMpIHtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bZXhwYW5kb10gfHwgKGVsZW1bZXhwYW5kb10gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlW2VsZW0udW5pcXVlSURdIHx8IChvdXRlckNhY2hlW2VsZW0udW5pcXVlSURdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkge1xuXHRcdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtW2Rpcl0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICgob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVtrZXldKSAmJiBvbGRDYWNoZVswXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsxXSA9PT0gZG9uZU5hbWUpIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG5ld0NhY2hlWzJdID0gb2xkQ2FjaGVbMl07XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlW2tleV0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRcdGlmIChuZXdDYWNoZVsyXSA9IG1hdGNoZXIoZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIobWF0Y2hlcnMpIHtcblx0XHRcdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID8gZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdGlmICghbWF0Y2hlcnNbaV0oZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gOiBtYXRjaGVyc1swXTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cykge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0ICAgIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0U2l6emxlKHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb25kZW5zZSh1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0ICAgIG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdFx0ICAgIGkgPSAwLFxuXHRcdFx0ICAgIGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0XHQgICAgbWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW0gPSB1bm1hdGNoZWRbaV0pIHtcblx0XHRcdFx0XHRpZiAoIWZpbHRlciB8fCBmaWx0ZXIoZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goZWxlbSk7XG5cdFx0XHRcdFx0XHRpZiAobWFwcGVkKSB7XG5cdFx0XHRcdFx0XHRcdG1hcC5wdXNoKGkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNldE1hdGNoZXIocHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yKSB7XG5cdFx0XHRpZiAocG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlcltleHBhbmRvXSkge1xuXHRcdFx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlcihwb3N0RmlsdGVyKTtcblx0XHRcdH1cblx0XHRcdGlmIChwb3N0RmluZGVyICYmICFwb3N0RmluZGVyW2V4cGFuZG9dKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKHBvc3RGaW5kZXIsIHBvc3RTZWxlY3Rvcik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdFx0dmFyIHRlbXAsXG5cdFx0XHRcdCAgICBpLFxuXHRcdFx0XHQgICAgZWxlbSxcblx0XHRcdFx0ICAgIHByZU1hcCA9IFtdLFxuXHRcdFx0XHQgICAgcG9zdE1hcCA9IFtdLFxuXHRcdFx0XHQgICAgcHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXG5cdFx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gW2NvbnRleHRdIDogY29udGV4dCwgW10pLFxuXG5cblx0XHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoc2VlZCB8fCAhc2VsZWN0b3IpID8gY29uZGVuc2UoZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwpIDogZWxlbXMsXG5cdFx0XHRcdCAgICBtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyKSA/XG5cblx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFtdIDpcblxuXHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0cmVzdWx0cyA6IG1hdGNoZXJJbjtcblxuXHRcdFx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdFx0XHRpZiAobWF0Y2hlcikge1xuXHRcdFx0XHRcdG1hdGNoZXIobWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdFx0XHRpZiAocG9zdEZpbHRlcikge1xuXHRcdFx0XHRcdHRlbXAgPSBjb25kZW5zZShtYXRjaGVyT3V0LCBwb3N0TWFwKTtcblx0XHRcdFx0XHRwb3N0RmlsdGVyKHRlbXAsIFtdLCBjb250ZXh0LCB4bWwpO1xuXG5cdFx0XHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRpZiAoZWxlbSA9IHRlbXBbaV0pIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlck91dFtwb3N0TWFwW2ldXSA9ICEobWF0Y2hlckluW3Bvc3RNYXBbaV1dID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRpZiAocG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIpIHtcblx0XHRcdFx0XHRcdGlmIChwb3N0RmluZGVyKSB7XG5cdFx0XHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChlbGVtID0gbWF0Y2hlck91dFtpXSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0XHRcdHRlbXAucHVzaChtYXRjaGVySW5baV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cG9zdEZpbmRlcihudWxsLCBtYXRjaGVyT3V0ID0gW10sIHRlbXAsIHhtbCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdGlmICgoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmICh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2Yoc2VlZCwgZWxlbSkgOiBwcmVNYXBbaV0pID4gLTEpIHtcblxuXHRcdFx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShtYXRjaGVyT3V0ID09PSByZXN1bHRzID8gbWF0Y2hlck91dC5zcGxpY2UocHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoKSA6IG1hdGNoZXJPdXQpO1xuXHRcdFx0XHRcdGlmIChwb3N0RmluZGVyKSB7XG5cdFx0XHRcdFx0XHRwb3N0RmluZGVyKG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkocmVzdWx0cywgbWF0Y2hlck91dCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtYXRjaGVyRnJvbVRva2Vucyh0b2tlbnMpIHtcblx0XHRcdHZhciBjaGVja0NvbnRleHQsXG5cdFx0XHQgICAgbWF0Y2hlcixcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0XHQgICAgbGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVt0b2tlbnNbMF0udHlwZV0sXG5cdFx0XHQgICAgaW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRcdCAgICBpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblxuXHRcdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUpLFxuXHRcdFx0ICAgIG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4T2YoY2hlY2tDb250ZXh0LCBlbGVtKSA+IC0xO1xuXHRcdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSksXG5cdFx0XHQgICAgbWF0Y2hlcnMgPSBbZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHR2YXIgcmV0ID0gIWxlYWRpbmdSZWxhdGl2ZSAmJiAoeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQpIHx8ICgoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgPyBtYXRjaENvbnRleHQoZWxlbSwgY29udGV4dCwgeG1sKSA6IG1hdGNoQW55Q29udGV4dChlbGVtLCBjb250ZXh0LCB4bWwpKTtcblx0XHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XTtcblxuXHRcdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRpZiAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbdG9rZW5zW2ldLnR5cGVdKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcnMgPSBbYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlcihtYXRjaGVycyksIG1hdGNoZXIpXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbdG9rZW5zW2ldLnR5cGVdLmFwcGx5KG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzKTtcblxuXHRcdFx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRcdFx0aWYgKG1hdGNoZXJbZXhwYW5kb10pIHtcblx0XHRcdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0XHRcdGZvciAoOyBqIDwgbGVuOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKEV4cHIucmVsYXRpdmVbdG9rZW5zW2pdLnR5cGVdKSB7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKG1hdGNoZXJzKSwgaSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoMCwgaSAtIDEpLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbaSAtIDJdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pKS5yZXBsYWNlKHJ0cmltLCBcIiQxXCIpLCBtYXRjaGVyLCBpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2Vucyh0b2tlbnMuc2xpY2UoaSwgaikpLCBqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKHRva2VucyA9IHRva2Vucy5zbGljZShqKSksIGogPCBsZW4gJiYgdG9TZWxlY3Rvcih0b2tlbnMpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bWF0Y2hlcnMucHVzaChtYXRjaGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbWVudE1hdGNoZXIobWF0Y2hlcnMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyhlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzKSB7XG5cdFx0XHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdFx0ICAgIGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdFx0ICAgIHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uIHN1cGVyTWF0Y2hlcihzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCkge1xuXHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0ICAgIGosXG5cdFx0XHRcdCAgICBtYXRjaGVyLFxuXHRcdFx0XHQgICAgbWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0ICAgIGkgPSBcIjBcIixcblx0XHRcdFx0ICAgIHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdCAgICBzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdCAgICBjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKFwiKlwiLCBvdXRlcm1vc3QpLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSxcblx0XHRcdFx0ICAgIGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAob3V0ZXJtb3N0KSB7XG5cdFx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0XHRmb3IgKDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKykge1xuXHRcdFx0XHRcdGlmIChieUVsZW1lbnQgJiYgZWxlbSkge1xuXHRcdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0XHRpZiAoIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCkge1xuXHRcdFx0XHRcdFx0XHRzZXREb2N1bWVudChlbGVtKTtcblx0XHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0d2hpbGUgKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkge1xuXHRcdFx0XHRcdFx0XHRpZiAobWF0Y2hlcihlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAob3V0ZXJtb3N0KSB7XG5cdFx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0XHRpZiAoYnlTZXQpIHtcblx0XHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRcdGlmIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdFx0aWYgKGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlcih1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRcdGlmIChtYXRjaGVkQ291bnQgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbChyZXN1bHRzKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZShzZXRNYXRjaGVkKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBzZXRNYXRjaGVkKTtcblxuXHRcdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRcdGlmIChvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCA+IDEpIHtcblxuXHRcdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQocmVzdWx0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRcdGlmIChvdXRlcm1vc3QpIHtcblx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gYnlTZXQgPyBtYXJrRnVuY3Rpb24oc3VwZXJNYXRjaGVyKSA6IHN1cGVyTWF0Y2hlcjtcblx0XHR9XG5cblx0XHRjb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBzZXRNYXRjaGVycyA9IFtdLFxuXHRcdFx0ICAgIGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdFx0ICAgIGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbc2VsZWN0b3IgKyBcIiBcIl07XG5cblx0XHRcdGlmICghY2FjaGVkKSB7XG5cdFx0XHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdFx0XHRpZiAoIW1hdGNoKSB7XG5cdFx0XHRcdFx0bWF0Y2ggPSB0b2tlbml6ZShzZWxlY3Rvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKG1hdGNoW2ldKTtcblx0XHRcdFx0XHRpZiAoY2FjaGVkW2V4cGFuZG9dKSB7XG5cdFx0XHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKGNhY2hlZCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKGNhY2hlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0XHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyhlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzKSk7XG5cblx0XHRcdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0XHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblx0XHR9O1xuXG5cdFx0LyoqXG4gICAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAgICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICAgKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gICAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gICAqL1xuXHRcdHNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQpIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0ICAgIHRva2Vucyxcblx0XHRcdCAgICB0b2tlbixcblx0XHRcdCAgICB0eXBlLFxuXHRcdFx0ICAgIGZpbmQsXG5cdFx0XHQgICAgY29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRcdCAgICBtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpO1xuXG5cdFx0XHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdFx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0XHRcdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0XHRcdGlmIChtYXRjaC5sZW5ndGggPT09IDEpIHtcblxuXHRcdFx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdFx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKDApO1xuXHRcdFx0XHRpZiAodG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlW3Rva2Vuc1sxXS50eXBlXSkge1xuXG5cdFx0XHRcdFx0Y29udGV4dCA9IChFeHByLmZpbmRbXCJJRFwiXSh0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0KSB8fCBbXSlbMF07XG5cdFx0XHRcdFx0aWYgKCFjb250ZXh0KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY29tcGlsZWQpIHtcblx0XHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSh0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdFx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3Qoc2VsZWN0b3IpID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdFx0XHRpZiAoRXhwci5yZWxhdGl2ZVt0eXBlID0gdG9rZW4udHlwZV0pIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZmluZCA9IEV4cHIuZmluZFt0eXBlXSkge1xuXHRcdFx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdFx0XHRpZiAoc2VlZCA9IGZpbmQodG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgcnNpYmxpbmcudGVzdCh0b2tlbnNbMF0udHlwZSkgJiYgdGVzdENvbnRleHQoY29udGV4dC5wYXJlbnROb2RlKSB8fCBjb250ZXh0KSkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IodG9rZW5zKTtcblx0XHRcdFx0XHRcdFx0aWYgKCFzZWxlY3Rvcikge1xuXHRcdFx0XHRcdFx0XHRcdHB1c2guYXBwbHkocmVzdWx0cywgc2VlZCk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdFx0XHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdFx0XHQoY29tcGlsZWQgfHwgY29tcGlsZShzZWxlY3RvciwgbWF0Y2gpKShzZWVkLCBjb250ZXh0LCAhZG9jdW1lbnRJc0hUTUwsIHJlc3VsdHMsICFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3Qoc2VsZWN0b3IpICYmIHRlc3RDb250ZXh0KGNvbnRleHQucGFyZW50Tm9kZSkgfHwgY29udGV4dCk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdFx0Ly8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuXHRcdC8vIFNvcnQgc3RhYmlsaXR5XG5cdFx0c3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KHNvcnRPcmRlcikuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcblx0XHQvLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5cdFx0c3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cblx0XHQvLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcblx0XHRzZXREb2N1bWVudCgpO1xuXG5cdFx0Ly8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcblx0XHQvLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcblx0XHRzdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRcdFx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSkgJiAxO1xuXHRcdH0pO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdC8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG5cdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcblx0XHRpZiAoIWFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRcdFx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCI7XG5cdFx0fSkpIHtcblx0XHRcdGFkZEhhbmRsZShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24gKGVsZW0sIG5hbWUsIGlzWE1MKSB7XG5cdFx0XHRcdGlmICghaXNYTUwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUobmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcblx0XHRpZiAoIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRcdFx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIlwiKTtcblx0XHRcdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBcIlwiO1xuXHRcdH0pKSB7XG5cdFx0XHRhZGRIYW5kbGUoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoZWxlbSwgbmFtZSwgaXNYTUwpIHtcblx0XHRcdFx0aWYgKCFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIikge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcblx0XHRpZiAoIWFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xuXHRcdH0pKSB7XG5cdFx0XHRhZGRIYW5kbGUoYm9vbGVhbnMsIGZ1bmN0aW9uIChlbGVtLCBuYW1lLCBpc1hNTCkge1xuXHRcdFx0XHR2YXIgdmFsO1xuXHRcdFx0XHRpZiAoIWlzWE1MKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1bbmFtZV0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOiAodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID8gdmFsLnZhbHVlIDogbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFNpenpsZTtcblx0fSh3aW5kb3cpO1xuXG5cdGpRdWVyeS5maW5kID0gU2l6emxlO1xuXHRqUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cblx0Ly8gRGVwcmVjYXRlZFxuXHRqUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xuXHRqUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcblx0alF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcblx0alF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xuXHRqUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5cdGpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblx0dmFyIGRpciA9IGZ1bmN0aW9uIGRpcihlbGVtLCBfZGlyLCB1bnRpbCkge1xuXHRcdHZhciBtYXRjaGVkID0gW10sXG5cdFx0ICAgIHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHRcdHdoaWxlICgoZWxlbSA9IGVsZW1bX2Rpcl0pICYmIGVsZW0ubm9kZVR5cGUgIT09IDkpIHtcblx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdGlmICh0cnVuY2F0ZSAmJiBqUXVlcnkoZWxlbSkuaXModW50aWwpKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF0Y2hlZC5wdXNoKGVsZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fTtcblxuXHR2YXIgX3NpYmxpbmdzID0gZnVuY3Rpb24gX3NpYmxpbmdzKG4sIGVsZW0pIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdFx0Zm9yICg7IG47IG4gPSBuLm5leHRTaWJsaW5nKSB7XG5cdFx0XHRpZiAobi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtKSB7XG5cdFx0XHRcdG1hdGNoZWQucHVzaChuKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fTtcblxuXHR2YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXHRmdW5jdGlvbiBub2RlTmFtZShlbGVtLCBuYW1lKSB7XG5cblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fTtcblx0dmFyIHJzaW5nbGVUYWcgPSAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaTtcblxuXHR2YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG5cdC8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5cdGZ1bmN0aW9uIHdpbm5vdyhlbGVtZW50cywgcXVhbGlmaWVyLCBub3QpIHtcblx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ocXVhbGlmaWVyKSkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbSwgaSkge1xuXHRcdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbChlbGVtLCBpLCBlbGVtKSAhPT0gbm90O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0XHRpZiAocXVhbGlmaWVyLm5vZGVUeXBlKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtID09PSBxdWFsaWZpZXIgIT09IG5vdDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRcdGlmICh0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwocXVhbGlmaWVyLCBlbGVtKSA+IC0xICE9PSBub3Q7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRcdGlmIChyaXNTaW1wbGUudGVzdChxdWFsaWZpZXIpKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlcihxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QpO1xuXHRcdH1cblxuXHRcdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKHF1YWxpZmllciwgZWxlbWVudHMpO1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcChlbGVtZW50cywgZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwocXVhbGlmaWVyLCBlbGVtKSA+IC0xICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0XHR9KTtcblx0fVxuXG5cdGpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiAoZXhwciwgZWxlbXMsIG5vdCkge1xuXHRcdHZhciBlbGVtID0gZWxlbXNbMF07XG5cblx0XHRpZiAobm90KSB7XG5cdFx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHRcdH1cblxuXHRcdGlmIChlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihlbGVtLCBleHByKSA/IFtlbGVtXSA6IFtdO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKGV4cHIsIGpRdWVyeS5ncmVwKGVsZW1zLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSkpO1xuXHR9O1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGZpbmQ6IGZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0ICAgIHJldCxcblx0XHRcdCAgICBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdCAgICBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soalF1ZXJ5KHNlbGVjdG9yKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5jb250YWlucyhzZWxmW2ldLCB0aGlzKSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soW10pO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0alF1ZXJ5LmZpbmQoc2VsZWN0b3IsIHNlbGZbaV0sIHJldCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQocmV0KSA6IHJldDtcblx0XHR9LFxuXHRcdGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKHNlbGVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2sod2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkpO1xuXHRcdH0sXG5cdFx0bm90OiBmdW5jdGlvbiBub3Qoc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayh3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpKTtcblx0XHR9LFxuXHRcdGlzOiBmdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuXHRcdFx0cmV0dXJuICEhd2lubm93KHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3Qoc2VsZWN0b3IpID8galF1ZXJ5KHNlbGVjdG9yKSA6IHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkubGVuZ3RoO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG5cdC8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxuXHR2YXIgcm9vdGpRdWVyeSxcblxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXHQgICAgaW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb250ZXh0LCByb290KSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCFzZWxlY3Rvcikge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0aWYgKHNlbGVjdG9yWzBdID09PSBcIjxcIiAmJiBzZWxlY3RvcltzZWxlY3Rvci5sZW5ndGggLSAxXSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMpIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFtudWxsLCBzZWxlY3RvciwgbnVsbF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyhzZWxlY3Rvcik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmIChtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmIChtYXRjaFsxXSkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSh0aGlzLCBqUXVlcnkucGFyc2VIVE1MKG1hdGNoWzFdLCBjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LCB0cnVlKSk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKHJzaW5nbGVUYWcudGVzdChtYXRjaFsxXSkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29udGV4dCkpIHtcblx0XHRcdFx0XHRcdGZvciAobWF0Y2ggaW4gY29udGV4dCkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKHRoaXNbbWF0Y2hdKSkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbbWF0Y2hdKGNvbnRleHRbbWF0Y2hdKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIobWF0Y2gsIGNvbnRleHRbbWF0Y2hdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWF0Y2hbMl0pO1xuXG5cdFx0XHRcdFx0aWYgKGVsZW0pIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5KSB7XG5cdFx0XHRcdHJldHVybiAoY29udGV4dCB8fCByb290KS5maW5kKHNlbGVjdG9yKTtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcihjb250ZXh0KS5maW5kKHNlbGVjdG9yKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSkge1xuXHRcdFx0dGhpc1swXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoalF1ZXJ5LmlzRnVuY3Rpb24oc2VsZWN0b3IpKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID8gcm9vdC5yZWFkeShzZWxlY3RvcikgOlxuXG5cdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRzZWxlY3RvcihqUXVlcnkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KHNlbGVjdG9yLCB0aGlzKTtcblx0fTtcblxuXHQvLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5cdGluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG5cdC8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2Vcblx0cm9vdGpRdWVyeSA9IGpRdWVyeShkb2N1bWVudCk7XG5cblx0dmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQpIHtcblx0XHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KHRhcmdldCwgdGhpcyksXG5cdFx0XHQgICAgbCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKGpRdWVyeS5jb250YWlucyh0aGlzLCB0YXJnZXRzW2ldKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Y2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdChzZWxlY3RvcnMsIGNvbnRleHQpIHtcblx0XHRcdHZhciBjdXIsXG5cdFx0XHQgICAgaSA9IDAsXG5cdFx0XHQgICAgbCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0ICAgIG1hdGNoZWQgPSBbXSxcblx0XHRcdCAgICB0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoc2VsZWN0b3JzKTtcblxuXHRcdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdFx0aWYgKCFybmVlZHNDb250ZXh0LnRlc3Qoc2VsZWN0b3JzKSkge1xuXHRcdFx0XHRmb3IgKDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGZvciAoY3VyID0gdGhpc1tpXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0XHRpZiAoY3VyLm5vZGVUeXBlIDwgMTEgJiYgKHRhcmdldHMgPyB0YXJnZXRzLmluZGV4KGN1cikgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykpKSB7XG5cblx0XHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKGN1cik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2sobWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQobWF0Y2hlZCkgOiBtYXRjaGVkKTtcblx0XHR9LFxuXG5cdFx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdFx0aW5kZXg6IGZ1bmN0aW9uIGluZGV4KGVsZW0pIHtcblxuXHRcdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRcdGlmICghZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpc1swXSAmJiB0aGlzWzBdLnBhcmVudE5vZGUgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdFx0aWYgKHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoalF1ZXJ5KGVsZW0pLCB0aGlzWzBdKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWzBdIDogZWxlbSk7XG5cdFx0fSxcblxuXHRcdGFkZDogZnVuY3Rpb24gYWRkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soalF1ZXJ5LnVuaXF1ZVNvcnQoalF1ZXJ5Lm1lcmdlKHRoaXMuZ2V0KCksIGpRdWVyeShzZWxlY3RvciwgY29udGV4dCkpKSk7XG5cdFx0fSxcblxuXHRcdGFkZEJhY2s6IGZ1bmN0aW9uIGFkZEJhY2soc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiB0aGlzLmFkZChzZWxlY3RvciA9PSBudWxsID8gdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3RvcikpO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gc2libGluZyhjdXIsIGRpcikge1xuXHRcdHdoaWxlICgoY3VyID0gY3VyW2Rpcl0pICYmIGN1ci5ub2RlVHlwZSAhPT0gMSkge31cblx0XHRyZXR1cm4gY3VyO1xuXHR9XG5cblx0alF1ZXJ5LmVhY2goe1xuXHRcdHBhcmVudDogZnVuY3Rpb24gcGFyZW50KGVsZW0pIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHRcdH0sXG5cdFx0cGFyZW50czogZnVuY3Rpb24gcGFyZW50cyhlbGVtKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwicGFyZW50Tm9kZVwiKTtcblx0XHR9LFxuXHRcdHBhcmVudHNVbnRpbDogZnVuY3Rpb24gcGFyZW50c1VudGlsKGVsZW0sIGksIHVudGlsKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCk7XG5cdFx0fSxcblx0XHRuZXh0OiBmdW5jdGlvbiBuZXh0KGVsZW0pIHtcblx0XHRcdHJldHVybiBzaWJsaW5nKGVsZW0sIFwibmV4dFNpYmxpbmdcIik7XG5cdFx0fSxcblx0XHRwcmV2OiBmdW5jdGlvbiBwcmV2KGVsZW0pIHtcblx0XHRcdHJldHVybiBzaWJsaW5nKGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIpO1xuXHRcdH0sXG5cdFx0bmV4dEFsbDogZnVuY3Rpb24gbmV4dEFsbChlbGVtKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwibmV4dFNpYmxpbmdcIik7XG5cdFx0fSxcblx0XHRwcmV2QWxsOiBmdW5jdGlvbiBwcmV2QWxsKGVsZW0pIHtcblx0XHRcdHJldHVybiBkaXIoZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIik7XG5cdFx0fSxcblx0XHRuZXh0VW50aWw6IGZ1bmN0aW9uIG5leHRVbnRpbChlbGVtLCBpLCB1bnRpbCkge1xuXHRcdFx0cmV0dXJuIGRpcihlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsKTtcblx0XHR9LFxuXHRcdHByZXZVbnRpbDogZnVuY3Rpb24gcHJldlVudGlsKGVsZW0sIGksIHVudGlsKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsKTtcblx0XHR9LFxuXHRcdHNpYmxpbmdzOiBmdW5jdGlvbiBzaWJsaW5ncyhlbGVtKSB7XG5cdFx0XHRyZXR1cm4gX3NpYmxpbmdzKChlbGVtLnBhcmVudE5vZGUgfHwge30pLmZpcnN0Q2hpbGQsIGVsZW0pO1xuXHRcdH0sXG5cdFx0Y2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKGVsZW0pIHtcblx0XHRcdHJldHVybiBfc2libGluZ3MoZWxlbS5maXJzdENoaWxkKTtcblx0XHR9LFxuXHRcdGNvbnRlbnRzOiBmdW5jdGlvbiBjb250ZW50cyhlbGVtKSB7XG5cdFx0XHRpZiAobm9kZU5hbWUoZWxlbSwgXCJpZnJhbWVcIikpIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRcdGlmIChub2RlTmFtZShlbGVtLCBcInRlbXBsYXRlXCIpKSB7XG5cdFx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGpRdWVyeS5tZXJnZShbXSwgZWxlbS5jaGlsZE5vZGVzKTtcblx0XHR9XG5cdH0sIGZ1bmN0aW9uIChuYW1lLCBmbikge1xuXHRcdGpRdWVyeS5mbltuYW1lXSA9IGZ1bmN0aW9uICh1bnRpbCwgc2VsZWN0b3IpIHtcblx0XHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCh0aGlzLCBmbiwgdW50aWwpO1xuXG5cdFx0XHRpZiAobmFtZS5zbGljZSgtNSkgIT09IFwiVW50aWxcIikge1xuXHRcdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKHNlbGVjdG9yLCBtYXRjaGVkKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubGVuZ3RoID4gMSkge1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRcdGlmICghZ3VhcmFudGVlZFVuaXF1ZVtuYW1lXSkge1xuXHRcdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KG1hdGNoZWQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdFx0aWYgKHJwYXJlbnRzcHJldi50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKG1hdGNoZWQpO1xuXHRcdH07XG5cdH0pO1xuXHR2YXIgcm5vdGh0bWx3aGl0ZSA9IC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztcblxuXHQvLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuXHRmdW5jdGlvbiBjcmVhdGVPcHRpb25zKG9wdGlvbnMpIHtcblx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0alF1ZXJ5LmVhY2gob3B0aW9ucy5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXSwgZnVuY3Rpb24gKF8sIGZsYWcpIHtcblx0XHRcdG9iamVjdFtmbGFnXSA9IHRydWU7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG9iamVjdDtcblx0fVxuXG5cdC8qXG4gICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICpcbiAgKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICAqXG4gICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAgKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gICpcbiAgKiBQb3NzaWJsZSBvcHRpb25zOlxuICAqXG4gICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICAqXG4gICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICAqXG4gICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAgKlxuICAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICAqXG4gICovXG5cdGpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG5cdFx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHRcdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0XHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgPyBjcmVhdGVPcHRpb25zKG9wdGlvbnMpIDogalF1ZXJ5LmV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cblx0XHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0X2ZpcmVkLFxuXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0X2xvY2tlZCxcblxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24gZmlyZSgpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRfbG9ja2VkID0gX2xvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0X2ZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEpIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAobGlzdFtmaXJpbmdJbmRleF0uYXBwbHkobWVtb3J5WzBdLCBtZW1vcnlbMV0pID09PSBmYWxzZSAmJiBvcHRpb25zLnN0b3BPbkZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCFvcHRpb25zLm1lbW9yeSkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoX2xvY2tlZCkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKG1lbW9yeSkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbiBhZGQoKSB7XG5cdFx0XHRcdGlmIChsaXN0KSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmIChtZW1vcnkgJiYgIWZpcmluZykge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKG1lbW9yeSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KGZ1bmN0aW9uIGFkZChhcmdzKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaChhcmdzLCBmdW5jdGlvbiAoXywgYXJnKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihhcmcpKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoYXJnKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKGFyZyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKGFyZykgIT09IFwic3RyaW5nXCIpIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoYXJnKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSkoYXJndW1lbnRzKTtcblxuXHRcdFx0XHRcdGlmIChtZW1vcnkgJiYgIWZpcmluZykge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uIChfLCBhcmcpIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKChpbmRleCA9IGpRdWVyeS5pbkFycmF5KGFyZywgbGlzdCwgaW5kZXgpKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZShpbmRleCwgMSk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKGluZGV4IDw9IGZpcmluZ0luZGV4KSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uIGhhcyhmbikge1xuXHRcdFx0XHRyZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheShmbiwgbGlzdCkgPiAtMSA6IGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbiBlbXB0eSgpIHtcblx0XHRcdFx0aWYgKGxpc3QpIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRcdFx0X2xvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbiBsb2NrKCkge1xuXHRcdFx0XHRfbG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCFtZW1vcnkgJiYgIWZpcmluZykge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24gbG9ja2VkKCkge1xuXHRcdFx0XHRyZXR1cm4gISFfbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uIGZpcmVXaXRoKGNvbnRleHQsIGFyZ3MpIHtcblx0XHRcdFx0aWYgKCFfbG9ja2VkKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFtjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJnc107XG5cdFx0XHRcdFx0cXVldWUucHVzaChhcmdzKTtcblx0XHRcdFx0XHRpZiAoIWZpcmluZykge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbiBmaXJlKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24gZmlyZWQoKSB7XG5cdFx0XHRcdHJldHVybiAhIV9maXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH07XG5cblx0ZnVuY3Rpb24gSWRlbnRpdHkodikge1xuXHRcdHJldHVybiB2O1xuXHR9XG5cdGZ1bmN0aW9uIFRocm93ZXIoZXgpIHtcblx0XHR0aHJvdyBleDtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkb3B0VmFsdWUodmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSkge1xuXHRcdHZhciBtZXRob2Q7XG5cblx0XHR0cnkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0XHRpZiAodmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24obWV0aG9kID0gdmFsdWUucHJvbWlzZSkpIHtcblx0XHRcdFx0bWV0aG9kLmNhbGwodmFsdWUpLmRvbmUocmVzb2x2ZSkuZmFpbChyZWplY3QpO1xuXG5cdFx0XHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbihtZXRob2QgPSB2YWx1ZS50aGVuKSkge1xuXHRcdFx0XHRtZXRob2QuY2FsbCh2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcblxuXHRcdFx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0XHRyZXNvbHZlLmFwcGx5KHVuZGVmaW5lZCwgW3ZhbHVlXS5zbGljZShub1ZhbHVlKSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHRcdFx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHRcdFx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0XHR9IGNhdGNoICh2YWx1ZSkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0XHRyZWplY3QuYXBwbHkodW5kZWZpbmVkLCBbdmFsdWVdKTtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKHtcblxuXHRcdERlZmVycmVkOiBmdW5jdGlvbiBEZWZlcnJlZChmdW5jKSB7XG5cdFx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0W1wibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwgMl0sIFtcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCAwLCBcInJlc29sdmVkXCJdLCBbXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCAxLCBcInJlamVjdGVkXCJdXSxcblx0XHRcdCAgICBfc3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdCAgICBfcHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uIHN0YXRlKCkge1xuXHRcdFx0XHRcdHJldHVybiBfc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24gYWx3YXlzKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24gX2NhdGNoKGZuKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF9wcm9taXNlLnRoZW4obnVsbCwgZm4pO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24gcGlwZSgpIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICove1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uIChuZXdEZWZlcikge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2godHVwbGVzLCBmdW5jdGlvbiAoaSwgdHVwbGUpIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oZm5zW3R1cGxlWzRdXSkgJiYgZm5zW3R1cGxlWzRdXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkW3R1cGxlWzFdXShmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAocmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24ocmV0dXJuZWQucHJvbWlzZSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKS5wcm9ncmVzcyhuZXdEZWZlci5ub3RpZnkpLmRvbmUobmV3RGVmZXIucmVzb2x2ZSkuZmFpbChuZXdEZWZlci5yZWplY3QpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclt0dXBsZVswXSArIFwiV2l0aFwiXSh0aGlzLCBmbiA/IFtyZXR1cm5lZF0gOiBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHQgICAgYXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0ICAgIG1pZ2h0VGhyb3cgPSBmdW5jdGlvbiBtaWdodFRocm93KCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGVwdGggPCBtYXhEZXB0aCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSh0aGF0LCBhcmdzKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdGlmIChyZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmIChcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdCh0eXBlb2YgcmV0dXJuZWQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihyZXR1cm5lZCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiKSAmJiByZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24odGhlbikpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHNwZWNpYWwpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKHJldHVybmVkLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwpLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCkpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKHJldHVybmVkLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwpLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCksIHJlc29sdmUobWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgZGVmZXJyZWQubm90aWZ5V2l0aCkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGhhbmRsZXIgIT09IElkZW50aXR5KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbcmV0dXJuZWRdO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdChzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoKSh0aGF0LCBhcmdzKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0sXG5cblxuXHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgPyBtaWdodFRocm93IDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2spIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soZSwgcHJvY2Vzcy5zdGFja1RyYWNlKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGRlcHRoICsgMSA+PSBtYXhEZXB0aCkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChoYW5kbGVyICE9PSBUaHJvd2VyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gW2VdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCh0aGF0LCBhcmdzKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoZGVwdGgpIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaykge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChwcm9jZXNzKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uIChuZXdEZWZlcikge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbMF1bM10uYWRkKHJlc29sdmUoMCwgbmV3RGVmZXIsIGpRdWVyeS5pc0Z1bmN0aW9uKG9uUHJvZ3Jlc3MpID8gb25Qcm9ncmVzcyA6IElkZW50aXR5LCBuZXdEZWZlci5ub3RpZnlXaXRoKSk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbMV1bM10uYWRkKHJlc29sdmUoMCwgbmV3RGVmZXIsIGpRdWVyeS5pc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogSWRlbnRpdHkpKTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWzJdWzNdLmFkZChyZXNvbHZlKDAsIG5ld0RlZmVyLCBqUXVlcnkuaXNGdW5jdGlvbihvblJlamVjdGVkKSA/IG9uUmVqZWN0ZWQgOiBUaHJvd2VyKSk7XG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKG9iaikge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQob2JqLCBfcHJvbWlzZSkgOiBfcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCAgICBkZWZlcnJlZCA9IHt9O1xuXG5cdFx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0XHRqUXVlcnkuZWFjaCh0dXBsZXMsIGZ1bmN0aW9uIChpLCB0dXBsZSkge1xuXHRcdFx0XHR2YXIgbGlzdCA9IHR1cGxlWzJdLFxuXHRcdFx0XHQgICAgc3RhdGVTdHJpbmcgPSB0dXBsZVs1XTtcblxuXHRcdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdFx0X3Byb21pc2VbdHVwbGVbMV1dID0gbGlzdC5hZGQ7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRcdGlmIChzdGF0ZVN0cmluZykge1xuXHRcdFx0XHRcdGxpc3QuYWRkKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRfc3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbMyAtIGldWzJdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1swXVsyXS5sb2NrKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0XHRsaXN0LmFkZCh0dXBsZVszXS5maXJlKTtcblxuXHRcdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRcdGRlZmVycmVkW3R1cGxlWzBdXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRkZWZlcnJlZFt0dXBsZVswXSArIFwiV2l0aFwiXSh0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRcdGRlZmVycmVkW3R1cGxlWzBdICsgXCJXaXRoXCJdID0gbGlzdC5maXJlV2l0aDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRcdF9wcm9taXNlLnByb21pc2UoZGVmZXJyZWQpO1xuXG5cdFx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0XHRpZiAoZnVuYykge1xuXHRcdFx0XHRmdW5jLmNhbGwoZGVmZXJyZWQsIGRlZmVycmVkKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWxsIGRvbmUhXG5cdFx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdFx0fSxcblxuXHRcdC8vIERlZmVycmVkIGhlbHBlclxuXHRcdHdoZW46IGZ1bmN0aW9uIHdoZW4oc2luZ2xlVmFsdWUpIHtcblx0XHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KGkpLFxuXHRcdFx0ICAgIHJlc29sdmVWYWx1ZXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiB1cGRhdGVGdW5jKGkpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1tpXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1tpXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gX3NsaWNlLmNhbGwoYXJndW1lbnRzKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICghIC0tcmVtYWluaW5nKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgocmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRcdGlmIChyZW1haW5pbmcgPD0gMSkge1xuXHRcdFx0XHRhZG9wdFZhbHVlKHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSh1cGRhdGVGdW5jKGkpKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LCAhcmVtYWluaW5nKTtcblxuXHRcdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRcdGlmIChtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHwgalF1ZXJ5LmlzRnVuY3Rpb24ocmVzb2x2ZVZhbHVlc1tpXSAmJiByZXNvbHZlVmFsdWVzW2ldLnRoZW4pKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRhZG9wdFZhbHVlKHJlc29sdmVWYWx1ZXNbaV0sIHVwZGF0ZUZ1bmMoaSksIG1hc3Rlci5yZWplY3QpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuXHQvLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cblx0dmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cblx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiAoZXJyb3IsIHN0YWNrKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdFx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0XHRpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KGVycm9yLm5hbWUpKSB7XG5cdFx0XHR3aW5kb3cuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2spO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9KTtcblx0fTtcblxuXHQvLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcblx0dmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5cdGpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uIChmbikge1xuXG5cdFx0cmVhZHlMaXN0LnRoZW4oZm4pXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oZXJyb3IpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cblx0XHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRcdGlzUmVhZHk6IGZhbHNlLFxuXG5cdFx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHRcdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdFx0cmVhZHlXYWl0OiAxLFxuXG5cdFx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRcdHJlYWR5OiBmdW5jdGlvbiByZWFkeSh3YWl0KSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRcdGlmICh3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRcdGlmICh3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoZG9jdW1lbnQsIFtqUXVlcnldKTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cblx0Ly8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2Rcblx0ZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCk7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNvbXBsZXRlZCk7XG5cdFx0alF1ZXJ5LnJlYWR5KCk7XG5cdH1cblxuXHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuXHQvLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuXHQvLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cblx0aWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKSB7XG5cblx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHR3aW5kb3cuc2V0VGltZW91dChqUXVlcnkucmVhZHkpO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCk7XG5cblx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBjb21wbGV0ZWQpO1xuXHR9XG5cblx0Ly8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG5cdC8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxuXHR2YXIgYWNjZXNzID0gZnVuY3Rpb24gYWNjZXNzKGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3KSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdCAgICBsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0ICAgIGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHRcdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0XHRpZiAoalF1ZXJ5LnR5cGUoa2V5KSA9PT0gXCJvYmplY3RcIikge1xuXHRcdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRcdGZvciAoaSBpbiBrZXkpIHtcblx0XHRcdFx0YWNjZXNzKGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0XHR9IGVsc2UgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRcdGlmICghalF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdFx0XHRcdHJhdyA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChidWxrKSB7XG5cblx0XHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRcdGlmIChyYXcpIHtcblx0XHRcdFx0XHRmbi5jYWxsKGVsZW1zLCB2YWx1ZSk7XG5cdFx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0XHRmbiA9IGZ1bmN0aW9uIGZuKGVsZW0sIGtleSwgdmFsdWUpIHtcblx0XHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoalF1ZXJ5KGVsZW0pLCB2YWx1ZSk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZm4pIHtcblx0XHRcdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGZuKGVsZW1zW2ldLCBrZXksIHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbChlbGVtc1tpXSwgaSwgZm4oZWxlbXNbaV0sIGtleSkpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChjaGFpbmFibGUpIHtcblx0XHRcdHJldHVybiBlbGVtcztcblx0XHR9XG5cblx0XHQvLyBHZXRzXG5cdFx0aWYgKGJ1bGspIHtcblx0XHRcdHJldHVybiBmbi5jYWxsKGVsZW1zKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID8gZm4oZWxlbXNbMF0sIGtleSkgOiBlbXB0eUdldDtcblx0fTtcblx0dmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiBhY2NlcHREYXRhKG93bmVyKSB7XG5cblx0XHQvLyBBY2NlcHRzIG9ubHk6XG5cdFx0Ly8gIC0gTm9kZVxuXHRcdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0XHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHRcdC8vICAtIE9iamVjdFxuXHRcdC8vICAgIC0gQW55XG5cdFx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICErb3duZXIubm9kZVR5cGU7XG5cdH07XG5cblx0ZnVuY3Rpb24gRGF0YSgpIHtcblx0XHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG5cdH1cblxuXHREYXRhLnVpZCA9IDE7XG5cblx0RGF0YS5wcm90b3R5cGUgPSB7XG5cblx0XHRjYWNoZTogZnVuY3Rpb24gY2FjaGUob3duZXIpIHtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0XHR2YXIgdmFsdWUgPSBvd25lclt0aGlzLmV4cGFuZG9dO1xuXG5cdFx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRcdGlmICghdmFsdWUpIHtcblx0XHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRcdGlmIChhY2NlcHREYXRhKG93bmVyKSkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdFx0aWYgKG93bmVyLm5vZGVUeXBlKSB7XG5cdFx0XHRcdFx0XHRvd25lclt0aGlzLmV4cGFuZG9dID0gdmFsdWU7XG5cblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIHNldChvd25lciwgZGF0YSwgdmFsdWUpIHtcblx0XHRcdHZhciBwcm9wLFxuXHRcdFx0ICAgIGNhY2hlID0gdGhpcy5jYWNoZShvd25lcik7XG5cblx0XHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRjYWNoZVtqUXVlcnkuY2FtZWxDYXNlKGRhdGEpXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRcdGZvciAocHJvcCBpbiBkYXRhKSB7XG5cdFx0XHRcdFx0Y2FjaGVbalF1ZXJ5LmNhbWVsQ2FzZShwcm9wKV0gPSBkYXRhW3Byb3BdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY2FjaGU7XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIGdldChvd25lciwga2V5KSB7XG5cdFx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyB0aGlzLmNhY2hlKG93bmVyKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyW3RoaXMuZXhwYW5kb10gJiYgb3duZXJbdGhpcy5leHBhbmRvXVtqUXVlcnkuY2FtZWxDYXNlKGtleSldO1xuXHRcdH0sXG5cdFx0YWNjZXNzOiBmdW5jdGlvbiBhY2Nlc3Mob3duZXIsIGtleSwgdmFsdWUpIHtcblxuXHRcdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdFx0Ly9cblx0XHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdFx0Ly9cblx0XHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdFx0Ly9cblx0XHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHRcdC8vXG5cdFx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLmdldChvd25lciwga2V5KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdFx0Ly9cblx0XHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0XHQvL1xuXHRcdFx0dGhpcy5zZXQob3duZXIsIGtleSwgdmFsdWUpO1xuXG5cdFx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0XHR9LFxuXHRcdHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG93bmVyLCBrZXkpIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0ICAgIGNhY2hlID0gb3duZXJbdGhpcy5leHBhbmRvXTtcblxuXHRcdFx0aWYgKGNhY2hlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRcdGtleSA9IGtleS5tYXAoalF1ZXJ5LmNhbWVsQ2FzZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZShrZXkpO1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID8gW2tleV0gOiBrZXkubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIGNhY2hlW2tleVtpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoY2FjaGUpKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRcdGlmIChvd25lci5ub2RlVHlwZSkge1xuXHRcdFx0XHRcdG93bmVyW3RoaXMuZXhwYW5kb10gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVsZXRlIG93bmVyW3RoaXMuZXhwYW5kb107XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhc0RhdGE6IGZ1bmN0aW9uIGhhc0RhdGEob3duZXIpIHtcblx0XHRcdHZhciBjYWNoZSA9IG93bmVyW3RoaXMuZXhwYW5kb107XG5cdFx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoY2FjaGUpO1xuXHRcdH1cblx0fTtcblx0dmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxuXHR2YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cdC8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG5cdC8vXG5cdC8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG5cdC8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcblx0Ly9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuXHQvL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cblx0Ly9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcblx0Ly9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuXHQvL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cblx0dmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0ICAgIHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuXHRmdW5jdGlvbiBnZXREYXRhKGRhdGEpIHtcblx0XHRpZiAoZGF0YSA9PT0gXCJ0cnVlXCIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChkYXRhID09PSBcImZhbHNlXCIpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoZGF0YSA9PT0gXCJudWxsXCIpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0aWYgKGRhdGEgPT09ICtkYXRhICsgXCJcIikge1xuXHRcdFx0cmV0dXJuICtkYXRhO1xuXHRcdH1cblxuXHRcdGlmIChyYnJhY2UudGVzdChkYXRhKSkge1xuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRmdW5jdGlvbiBkYXRhQXR0cihlbGVtLCBrZXksIGRhdGEpIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0XHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0XHRpZiAoZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZShybXVsdGlEYXNoLCBcIi0kJlwiKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG5cdFx0XHRpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRkYXRhID0gZ2V0RGF0YShkYXRhKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KGVsZW0sIGtleSwgZGF0YSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdGpRdWVyeS5leHRlbmQoe1xuXHRcdGhhc0RhdGE6IGZ1bmN0aW9uIGhhc0RhdGEoZWxlbSkge1xuXHRcdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoZWxlbSkgfHwgZGF0YVByaXYuaGFzRGF0YShlbGVtKTtcblx0XHR9LFxuXG5cdFx0ZGF0YTogZnVuY3Rpb24gZGF0YShlbGVtLCBuYW1lLCBfZGF0YSkge1xuXHRcdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyhlbGVtLCBuYW1lLCBfZGF0YSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZURhdGE6IGZ1bmN0aW9uIHJlbW92ZURhdGEoZWxlbSwgbmFtZSkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKGVsZW0sIG5hbWUpO1xuXHRcdH0sXG5cblx0XHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHRcdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRcdF9kYXRhOiBmdW5jdGlvbiBfZGF0YShlbGVtLCBuYW1lLCBkYXRhKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKGVsZW0sIG5hbWUsIGRhdGEpO1xuXHRcdH0sXG5cblx0XHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24gX3JlbW92ZURhdGEoZWxlbSwgbmFtZSkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKGVsZW0sIG5hbWUpO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0ZGF0YTogZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBuYW1lLFxuXHRcdFx0ICAgIGRhdGEsXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF0sXG5cdFx0XHQgICAgYXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKHRoaXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldChlbGVtKTtcblxuXHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoZWxlbSwgXCJoYXNEYXRhQXR0cnNcIikpIHtcblx0XHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdFx0aWYgKGF0dHJzW2ldKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzW2ldLm5hbWU7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG5hbWUuaW5kZXhPZihcImRhdGEtXCIpID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZShuYW1lLnNsaWNlKDUpKTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKGVsZW0sIG5hbWUsIGRhdGFbbmFtZV0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdFx0aWYgKCh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yoa2V5KSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KHRoaXMsIGtleSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRcdGlmIChlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcblxuXHRcdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoZWxlbSwga2V5KTtcblx0XHRcdFx0XHRpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoZWxlbSwga2V5KTtcblx0XHRcdFx0XHRpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KHRoaXMsIGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZURhdGE6IGZ1bmN0aW9uIHJlbW92ZURhdGEoa2V5KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0ZGF0YVVzZXIucmVtb3ZlKHRoaXMsIGtleSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5leHRlbmQoe1xuXHRcdHF1ZXVlOiBmdW5jdGlvbiBxdWV1ZShlbGVtLCB0eXBlLCBkYXRhKSB7XG5cdFx0XHR2YXIgcXVldWU7XG5cblx0XHRcdGlmIChlbGVtKSB7XG5cdFx0XHRcdHR5cGUgPSAodHlwZSB8fCBcImZ4XCIpICsgXCJxdWV1ZVwiO1xuXHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldChlbGVtLCB0eXBlKTtcblxuXHRcdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRcdGlmIChkYXRhKSB7XG5cdFx0XHRcdFx0aWYgKCFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KGRhdGEpKSB7XG5cdFx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyhlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaChkYXRhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRkZXF1ZXVlOiBmdW5jdGlvbiBkZXF1ZXVlKGVsZW0sIHR5cGUpIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKGVsZW0sIHR5cGUpLFxuXHRcdFx0ICAgIHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0ICAgIGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdCAgICBob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyhlbGVtLCB0eXBlKSxcblx0XHRcdCAgICBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoZWxlbSwgdHlwZSk7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0XHRpZiAoZm4gPT09IFwiaW5wcm9ncmVzc1wiKSB7XG5cdFx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZuKSB7XG5cblx0XHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRcdGlmICh0eXBlID09PSBcImZ4XCIpIHtcblx0XHRcdFx0XHRxdWV1ZS51bnNoaWZ0KFwiaW5wcm9ncmVzc1wiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRcdGZuLmNhbGwoZWxlbSwgbmV4dCwgaG9va3MpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXN0YXJ0TGVuZ3RoICYmIGhvb2tzKSB7XG5cdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0XHRfcXVldWVIb29rczogZnVuY3Rpb24gX3F1ZXVlSG9va3MoZWxlbSwgdHlwZSkge1xuXHRcdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRcdHJldHVybiBkYXRhUHJpdi5nZXQoZWxlbSwga2V5KSB8fCBkYXRhUHJpdi5hY2Nlc3MoZWxlbSwga2V5LCB7XG5cdFx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZWxlbSwgW3R5cGUgKyBcInF1ZXVlXCIsIGtleV0pO1xuXHRcdFx0XHR9KVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRxdWV1ZTogZnVuY3Rpb24gcXVldWUodHlwZSwgZGF0YSkge1xuXHRcdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRcdGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdFx0c2V0dGVyLS07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkucXVldWUodGhpc1swXSwgdHlwZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKHRoaXMsIHR5cGUsIGRhdGEpO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyh0aGlzLCB0eXBlKTtcblxuXHRcdFx0XHRpZiAodHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWzBdICE9PSBcImlucHJvZ3Jlc3NcIikge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKHRoaXMsIHR5cGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdGRlcXVldWU6IGZ1bmN0aW9uIGRlcXVldWUodHlwZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKHRoaXMsIHR5cGUpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRjbGVhclF1ZXVlOiBmdW5jdGlvbiBjbGVhclF1ZXVlKHR5cGUpIHtcblx0XHRcdHJldHVybiB0aGlzLnF1ZXVlKHR5cGUgfHwgXCJmeFwiLCBbXSk7XG5cdFx0fSxcblxuXHRcdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0XHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0XHRwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKHR5cGUsIG9iaikge1xuXHRcdFx0dmFyIHRtcCxcblx0XHRcdCAgICBjb3VudCA9IDEsXG5cdFx0XHQgICAgZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdCAgICBlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHQgICAgaSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0ICAgIHJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xuXHRcdFx0XHRpZiAoISAtLWNvdW50KSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoZWxlbWVudHMsIFtlbGVtZW50c10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAodHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoZWxlbWVudHNbaV0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIik7XG5cdFx0XHRcdGlmICh0bXAgJiYgdG1wLmVtcHR5KSB7XG5cdFx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0XHR0bXAuZW1wdHkuYWRkKHJlc29sdmUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZShvYmopO1xuXHRcdH1cblx0fSk7XG5cdHZhciBwbnVtID0gL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlO1xuXG5cdHZhciByY3NzTnVtID0gbmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIik7XG5cblx0dmFyIGNzc0V4cGFuZCA9IFtcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiXTtcblxuXHR2YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24gaXNIaWRkZW5XaXRoaW5UcmVlKGVsZW0sIGVsKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0alF1ZXJ5LmNvbnRhaW5zKGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSkgJiYgalF1ZXJ5LmNzcyhlbGVtLCBcImRpc3BsYXlcIikgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cdHZhciBzd2FwID0gZnVuY3Rpb24gc3dhcChlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncykge1xuXHRcdHZhciByZXQsXG5cdFx0ICAgIG5hbWUsXG5cdFx0ICAgIG9sZCA9IHt9O1xuXG5cdFx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdG9sZFtuYW1lXSA9IGVsZW0uc3R5bGVbbmFtZV07XG5cdFx0XHRlbGVtLnN0eWxlW25hbWVdID0gb3B0aW9uc1tuYW1lXTtcblx0XHR9XG5cblx0XHRyZXQgPSBjYWxsYmFjay5hcHBseShlbGVtLCBhcmdzIHx8IFtdKTtcblxuXHRcdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRlbGVtLnN0eWxlW25hbWVdID0gb2xkW25hbWVdO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH07XG5cblx0ZnVuY3Rpb24gYWRqdXN0Q1NTKGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuKSB7XG5cdFx0dmFyIGFkanVzdGVkLFxuXHRcdCAgICBzY2FsZSA9IDEsXG5cdFx0ICAgIG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHQgICAgY3VycmVudFZhbHVlID0gdHdlZW4gPyBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0fSA6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY3NzKGVsZW0sIHByb3AsIFwiXCIpO1xuXHRcdH0sXG5cdFx0ICAgIGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHQgICAgdW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1szXSB8fCAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSA/IFwiXCIgOiBcInB4XCIpLFxuXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwpICYmIHJjc3NOdW0uZXhlYyhqUXVlcnkuY3NzKGVsZW0sIHByb3ApKTtcblxuXHRcdGlmIChpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbM10gIT09IHVuaXQpIHtcblxuXHRcdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFszXTtcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZShlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCk7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHRcdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHRcdH0gd2hpbGUgKHNjYWxlICE9PSAoc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyk7XG5cdFx0fVxuXG5cdFx0aWYgKHZhbHVlUGFydHMpIHtcblx0XHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sxXSA/IGluaXRpYWxJblVuaXQgKyAodmFsdWVQYXJ0c1sxXSArIDEpICogdmFsdWVQYXJ0c1syXSA6ICt2YWx1ZVBhcnRzWzJdO1xuXHRcdFx0aWYgKHR3ZWVuKSB7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gYWRqdXN0ZWQ7XG5cdH1cblxuXHR2YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuXHRmdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheShlbGVtKSB7XG5cdFx0dmFyIHRlbXAsXG5cdFx0ICAgIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHQgICAgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdCAgICBkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbbm9kZU5hbWVdO1xuXG5cdFx0aWYgKGRpc3BsYXkpIHtcblx0XHRcdHJldHVybiBkaXNwbGF5O1xuXHRcdH1cblxuXHRcdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlRWxlbWVudChub2RlTmFtZSkpO1xuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKHRlbXAsIFwiZGlzcGxheVwiKTtcblxuXHRcdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0ZW1wKTtcblxuXHRcdGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuXHRcdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0XHR9XG5cdFx0ZGVmYXVsdERpc3BsYXlNYXBbbm9kZU5hbWVdID0gZGlzcGxheTtcblxuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2hvd0hpZGUoZWxlbWVudHMsIHNob3cpIHtcblx0XHR2YXIgZGlzcGxheSxcblx0XHQgICAgZWxlbSxcblx0XHQgICAgdmFsdWVzID0gW10sXG5cdFx0ICAgIGluZGV4ID0gMCxcblx0XHQgICAgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdFx0Zm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRlbGVtID0gZWxlbWVudHNbaW5kZXhdO1xuXHRcdFx0aWYgKCFlbGVtLnN0eWxlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdFx0aWYgKHNob3cpIHtcblxuXHRcdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRcdGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuXHRcdFx0XHRcdHZhbHVlc1tpbmRleF0gPSBkYXRhUHJpdi5nZXQoZWxlbSwgXCJkaXNwbGF5XCIpIHx8IG51bGw7XG5cdFx0XHRcdFx0aWYgKCF2YWx1ZXNbaW5kZXhdKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZShlbGVtKSkge1xuXHRcdFx0XHRcdHZhbHVlc1tpbmRleF0gPSBnZXREZWZhdWx0RGlzcGxheShlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKGRpc3BsYXkgIT09IFwibm9uZVwiKSB7XG5cdFx0XHRcdFx0dmFsdWVzW2luZGV4XSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldChlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdFx0Zm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRpZiAodmFsdWVzW2luZGV4XSAhPSBudWxsKSB7XG5cdFx0XHRcdGVsZW1lbnRzW2luZGV4XS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzW2luZGV4XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbWVudHM7XG5cdH1cblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuXHRcdFx0cmV0dXJuIHNob3dIaWRlKHRoaXMsIHRydWUpO1xuXHRcdH0sXG5cdFx0aGlkZTogZnVuY3Rpb24gaGlkZSgpIHtcblx0XHRcdHJldHVybiBzaG93SGlkZSh0aGlzKTtcblx0XHR9LFxuXHRcdHRvZ2dsZTogZnVuY3Rpb24gdG9nZ2xlKHN0YXRlKSB7XG5cdFx0XHRpZiAodHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIikge1xuXHRcdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKGlzSGlkZGVuV2l0aGluVHJlZSh0aGlzKSkge1xuXHRcdFx0XHRcdGpRdWVyeSh0aGlzKS5zaG93KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblx0dmFyIHJjaGVja2FibGVUeXBlID0gL14oPzpjaGVja2JveHxyYWRpbykkL2k7XG5cblx0dmFyIHJ0YWdOYW1lID0gLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pO1xuXG5cdHZhciByc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2k7XG5cblx0Ly8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcblx0dmFyIHdyYXBNYXAgPSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdG9wdGlvbjogWzEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiXSxcblxuXHRcdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdFx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHRcdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0XHR0aGVhZDogWzEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCJdLFxuXHRcdGNvbDogWzIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLFxuXHRcdHRyOiBbMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIl0sXG5cdFx0dGQ6IFszLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxcblxuXHRcdF9kZWZhdWx0OiBbMCwgXCJcIiwgXCJcIl1cblx0fTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cblx0d3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcblx0d3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblx0ZnVuY3Rpb24gZ2V0QWxsKGNvbnRleHQsIHRhZykge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0XHR2YXIgcmV0O1xuXG5cdFx0aWYgKHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyB8fCBcIipcIik7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwodGFnIHx8IFwiKlwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ID0gW107XG5cdFx0fVxuXG5cdFx0aWYgKHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZShjb250ZXh0LCB0YWcpKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKFtjb250ZXh0XSwgcmV0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0Ly8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5cdGZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoZWxlbXMsIHJlZkVsZW1lbnRzKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdCAgICBsID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0Zm9yICg7IGkgPCBsOyBpKyspIHtcblx0XHRcdGRhdGFQcml2LnNldChlbGVtc1tpXSwgXCJnbG9iYWxFdmFsXCIsICFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQocmVmRWxlbWVudHNbaV0sIFwiZ2xvYmFsRXZhbFwiKSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5cdGZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdCAgICB0bXAsXG5cdFx0ICAgIHRhZyxcblx0XHQgICAgd3JhcCxcblx0XHQgICAgY29udGFpbnMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ICAgIG5vZGVzID0gW10sXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBsID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0Zm9yICg7IGkgPCBsOyBpKyspIHtcblx0XHRcdGVsZW0gPSBlbGVtc1tpXTtcblxuXHRcdFx0aWYgKGVsZW0gfHwgZWxlbSA9PT0gMCkge1xuXG5cdFx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0XHRpZiAoalF1ZXJ5LnR5cGUoZWxlbSkgPT09IFwib2JqZWN0XCIpIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2Uobm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbZWxlbV0gOiBlbGVtKTtcblxuXHRcdFx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0XHR9IGVsc2UgaWYgKCFyaHRtbC50ZXN0KGVsZW0pKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaChjb250ZXh0LmNyZWF0ZVRleHROb2RlKGVsZW0pKTtcblxuXHRcdFx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZChjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuXG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHRcdHRhZyA9IChydGFnTmFtZS5leGVjKGVsZW0pIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR3cmFwID0gd3JhcE1hcFt0YWddIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBqUXVlcnkuaHRtbFByZWZpbHRlcihlbGVtKSArIHdyYXBbMl07XG5cblx0XHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0XHRqID0gd3JhcFswXTtcblx0XHRcdFx0XHR3aGlsZSAoai0tKSB7XG5cdFx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2Uobm9kZXMsIHRtcC5jaGlsZE5vZGVzKTtcblxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlIChlbGVtID0gbm9kZXNbaSsrXSkge1xuXG5cdFx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdFx0aWYgKHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheShlbGVtLCBzZWxlY3Rpb24pID4gLTEpIHtcblx0XHRcdFx0aWYgKGlnbm9yZWQpIHtcblx0XHRcdFx0XHRpZ25vcmVkLnB1c2goZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSk7XG5cblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdFx0dG1wID0gZ2V0QWxsKGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW0pLCBcInNjcmlwdFwiKTtcblxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdFx0aWYgKGNvbnRhaW5zKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwodG1wKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdFx0aWYgKHNjcmlwdHMpIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlIChlbGVtID0gdG1wW2orK10pIHtcblx0XHRcdFx0XHRpZiAocnNjcmlwdFR5cGUudGVzdChlbGVtLnR5cGUgfHwgXCJcIikpIHtcblx0XHRcdFx0XHRcdHNjcmlwdHMucHVzaChlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZnJhZ21lbnQ7XG5cdH1cblxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHQgICAgZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksXG5cdFx0ICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdFx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHRcdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJyYWRpb1wiKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwidFwiKTtcblxuXHRcdGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0XHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0XHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKHRydWUpLmNsb25lTm9kZSh0cnVlKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRcdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUodHJ1ZSkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblx0fSkoKTtcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHR2YXIgcmtleUV2ZW50ID0gL15rZXkvLFxuXHQgICAgcm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdCAgICBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cblx0ZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuXHRmdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdFx0fSBjYXRjaCAoZXJyKSB7fVxuXHR9XG5cblx0ZnVuY3Rpb24gX29uKGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSkge1xuXHRcdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0XHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0XHRpZiAoKHR5cGVvZiB0eXBlcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHR5cGVzKSkgPT09IFwib2JqZWN0XCIpIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIpIHtcblxuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAodHlwZSBpbiB0eXBlcykge1xuXHRcdFx0XHRfb24oZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzW3R5cGVdLCBvbmUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0fVxuXG5cdFx0aWYgKGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIGlmIChmbiA9PSBudWxsKSB7XG5cdFx0XHRpZiAodHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG5cblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRcdGZuID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGZuID09PSBmYWxzZSkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCFmbikge1xuXHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0fVxuXG5cdFx0aWYgKG9uZSA9PT0gMSkge1xuXHRcdFx0b3JpZ0ZuID0gZm47XG5cdFx0XHRmbiA9IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG5cblx0XHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRcdGpRdWVyeSgpLm9mZihldmVudCk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH07XG5cblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCh0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qXG4gICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gICovXG5cdGpRdWVyeS5ldmVudCA9IHtcblxuXHRcdGdsb2JhbDoge30sXG5cblx0XHRhZGQ6IGZ1bmN0aW9uIGFkZChlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IpIHtcblxuXHRcdFx0dmFyIGhhbmRsZU9iakluLFxuXHRcdFx0ICAgIGV2ZW50SGFuZGxlLFxuXHRcdFx0ICAgIHRtcCxcblx0XHRcdCAgICBldmVudHMsXG5cdFx0XHQgICAgdCxcblx0XHRcdCAgICBoYW5kbGVPYmosXG5cdFx0XHQgICAgc3BlY2lhbCxcblx0XHRcdCAgICBoYW5kbGVycyxcblx0XHRcdCAgICB0eXBlLFxuXHRcdFx0ICAgIG5hbWVzcGFjZXMsXG5cdFx0XHQgICAgb3JpZ1R5cGUsXG5cdFx0XHQgICAgZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoZWxlbSk7XG5cblx0XHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0XHRpZiAoIWVsZW1EYXRhKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0XHRpZiAoaGFuZGxlci5oYW5kbGVyKSB7XG5cdFx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdFx0aWYgKHNlbGVjdG9yKSB7XG5cdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3Rvcihkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0XHRpZiAoIWhhbmRsZXIuZ3VpZCkge1xuXHRcdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0XHRpZiAoIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpKSB7XG5cdFx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpKSB7XG5cdFx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24gKGUpIHtcblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/IGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseShlbGVtLCBhcmd1bWVudHMpIDogdW5kZWZpbmVkO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0XHR0eXBlcyA9ICh0eXBlcyB8fCBcIlwiKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXCJcIl07XG5cdFx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKHQtLSkge1xuXHRcdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKHR5cGVzW3RdKSB8fCBbXTtcblx0XHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0XHRuYW1lc3BhY2VzID0gKHRtcFsyXSB8fCBcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpO1xuXG5cdFx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0XHRpZiAoIXR5cGUpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0gfHwge307XG5cblx0XHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHRcdHR5cGUgPSAoc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUpIHx8IHR5cGU7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0gfHwge307XG5cblx0XHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChzZWxlY3RvciksXG5cdFx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpXG5cdFx0XHRcdH0sIGhhbmRsZU9iakluKTtcblxuXHRcdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0XHRpZiAoIShoYW5kbGVycyA9IGV2ZW50c1t0eXBlXSkpIHtcblx0XHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1t0eXBlXSA9IFtdO1xuXHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdFx0aWYgKCFzcGVjaWFsLnNldHVwIHx8IHNwZWNpYWwuc2V0dXAuY2FsbChlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSkgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGV2ZW50SGFuZGxlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc3BlY2lhbC5hZGQpIHtcblx0XHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKGVsZW0sIGhhbmRsZU9iaik7XG5cblx0XHRcdFx0XHRpZiAoIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQpIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdFx0aWYgKHNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRoYW5kbGVycy5wdXNoKGhhbmRsZU9iaik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbdHlwZV0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0XHRyZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzKSB7XG5cblx0XHRcdHZhciBqLFxuXHRcdFx0ICAgIG9yaWdDb3VudCxcblx0XHRcdCAgICB0bXAsXG5cdFx0XHQgICAgZXZlbnRzLFxuXHRcdFx0ICAgIHQsXG5cdFx0XHQgICAgaGFuZGxlT2JqLFxuXHRcdFx0ICAgIHNwZWNpYWwsXG5cdFx0XHQgICAgaGFuZGxlcnMsXG5cdFx0XHQgICAgdHlwZSxcblx0XHRcdCAgICBuYW1lc3BhY2VzLFxuXHRcdFx0ICAgIG9yaWdUeXBlLFxuXHRcdFx0ICAgIGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YShlbGVtKSAmJiBkYXRhUHJpdi5nZXQoZWxlbSk7XG5cblx0XHRcdGlmICghZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdFx0dHlwZXMgPSAodHlwZXMgfHwgXCJcIikubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW1wiXCJdO1xuXHRcdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHRcdHdoaWxlICh0LS0pIHtcblx0XHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyh0eXBlc1t0XSkgfHwgW107XG5cdFx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcblx0XHRcdFx0bmFtZXNwYWNlcyA9ICh0bXBbMl0gfHwgXCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKTtcblxuXHRcdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCF0eXBlKSB7XG5cdFx0XHRcdFx0Zm9yICh0eXBlIGluIGV2ZW50cykge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZShlbGVtLCB0eXBlICsgdHlwZXNbdF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0gfHwge307XG5cdFx0XHRcdHR5cGUgPSAoc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUpIHx8IHR5cGU7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzW3R5cGVdIHx8IFtdO1xuXHRcdFx0XHR0bXAgPSB0bXBbMl0gJiYgbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlIChqLS0pIHtcblx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1tqXTtcblxuXHRcdFx0XHRcdGlmICgobWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSkgJiYgKCFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQpICYmICghdG1wIHx8IHRtcC50ZXN0KGhhbmRsZU9iai5uYW1lc3BhY2UpKSAmJiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IpKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoaiwgMSk7XG5cblx0XHRcdFx0XHRcdGlmIChoYW5kbGVPYmouc2VsZWN0b3IpIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHNwZWNpYWwucmVtb3ZlKSB7XG5cdFx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoZWxlbSwgaGFuZGxlT2JqKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0XHRpZiAob3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGgpIHtcblx0XHRcdFx0XHRpZiAoIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSkgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudChlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGRlbGV0ZSBldmVudHNbdHlwZV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRcdGlmIChqUXVlcnkuaXNFbXB0eU9iamVjdChldmVudHMpKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZShlbGVtLCBcImhhbmRsZSBldmVudHNcIik7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaChuYXRpdmVFdmVudCkge1xuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgobmF0aXZlRXZlbnQpO1xuXG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIHJldCxcblx0XHRcdCAgICBtYXRjaGVkLFxuXHRcdFx0ICAgIGhhbmRsZU9iaixcblx0XHRcdCAgICBoYW5kbGVyUXVldWUsXG5cdFx0XHQgICAgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxcblx0XHRcdCAgICBoYW5kbGVycyA9IChkYXRhUHJpdi5nZXQodGhpcywgXCJldmVudHNcIikgfHwge30pW2V2ZW50LnR5cGVdIHx8IFtdLFxuXHRcdFx0ICAgIHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFtldmVudC50eXBlXSB8fCB7fTtcblxuXHRcdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRcdGFyZ3NbMF0gPSBldmVudDtcblxuXHRcdFx0Zm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0fVxuXG5cdFx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRcdGlmIChzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCh0aGlzLCBldmVudCkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLCBldmVudCwgaGFuZGxlcnMpO1xuXG5cdFx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdFx0aSA9IDA7XG5cdFx0XHR3aGlsZSAoKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbaSsrXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcblx0XHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKChoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzW2orK10pICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdFx0aWYgKCFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdChoYW5kbGVPYmoubmFtZXNwYWNlKSkge1xuXG5cdFx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRcdHJldCA9ICgoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbaGFuZGxlT2JqLm9yaWdUeXBlXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyKS5hcHBseShtYXRjaGVkLmVsZW0sIGFyZ3MpO1xuXG5cdFx0XHRcdFx0XHRpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0aWYgKChldmVudC5yZXN1bHQgPSByZXQpID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdFx0aWYgKHNwZWNpYWwucG9zdERpc3BhdGNoKSB7XG5cdFx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwodGhpcywgZXZlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVyczogZnVuY3Rpb24gaGFuZGxlcnMoZXZlbnQsIF9oYW5kbGVycykge1xuXHRcdFx0dmFyIGksXG5cdFx0XHQgICAgaGFuZGxlT2JqLFxuXHRcdFx0ICAgIHNlbCxcblx0XHRcdCAgICBtYXRjaGVkSGFuZGxlcnMsXG5cdFx0XHQgICAgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdCAgICBoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdCAgICBkZWxlZ2F0ZUNvdW50ID0gX2hhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHQgICAgY3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0XHRpZiAoZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0IShldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEpKSB7XG5cblx0XHRcdFx0Zm9yICg7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcykge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdFx0aWYgKGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUpKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKyspIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gX2hhbmRsZXJzW2ldO1xuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChtYXRjaGVkU2VsZWN0b3JzW3NlbF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbc2VsXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgPyBqUXVlcnkoc2VsLCB0aGlzKS5pbmRleChjdXIpID4gLTEgOiBqUXVlcnkuZmluZChzZWwsIHRoaXMsIG51bGwsIFtjdXJdKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKG1hdGNoZWRTZWxlY3RvcnNbc2VsXSkge1xuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKGhhbmRsZU9iaik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChtYXRjaGVkSGFuZGxlcnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0XHRjdXIgPSB0aGlzO1xuXHRcdFx0aWYgKGRlbGVnYXRlQ291bnQgPCBfaGFuZGxlcnMubGVuZ3RoKSB7XG5cdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogX2hhbmRsZXJzLnNsaWNlKGRlbGVnYXRlQ291bnQpIH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHRcdH0sXG5cblx0XHRhZGRQcm9wOiBmdW5jdGlvbiBhZGRQcm9wKG5hbWUsIGhvb2spIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKGhvb2spID8gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKHRoaXMub3JpZ2luYWxFdmVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbbmFtZV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Zml4OiBmdW5jdGlvbiBmaXgob3JpZ2luYWxFdmVudCkge1xuXHRcdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbalF1ZXJ5LmV4cGFuZG9dID8gb3JpZ2luYWxFdmVudCA6IG5ldyBqUXVlcnkuRXZlbnQob3JpZ2luYWxFdmVudCk7XG5cdFx0fSxcblxuXHRcdHNwZWNpYWw6IHtcblx0XHRcdGxvYWQ6IHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0Zm9jdXM6IHtcblxuXHRcdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcblx0XHRcdFx0XHRpZiAodGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0XHR9LFxuXHRcdFx0Ymx1cjoge1xuXHRcdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1cikge1xuXHRcdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdFx0fSxcblx0XHRcdGNsaWNrOiB7XG5cblx0XHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcblx0XHRcdFx0XHRpZiAodGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSh0aGlzLCBcImlucHV0XCIpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoZXZlbnQpIHtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoZXZlbnQudGFyZ2V0LCBcImFcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uIHBvc3REaXNwYXRjaChldmVudCkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdFx0aWYgKGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQpIHtcblx0XHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdGpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uIChlbGVtLCB0eXBlLCBoYW5kbGUpIHtcblxuXHRcdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRcdGlmIChlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGUpO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiAoc3JjLCBwcm9wcykge1xuXG5cdFx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdFx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkpIHtcblx0XHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KHNyYywgcHJvcHMpO1xuXHRcdH1cblxuXHRcdC8vIEV2ZW50IG9iamVjdFxuXHRcdGlmIChzcmMgJiYgc3JjLnR5cGUpIHtcblx0XHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8IHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID8gcmV0dXJuVHJ1ZSA6IHJldHVybkZhbHNlO1xuXG5cdFx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0XHR0aGlzLnRhcmdldCA9IHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyA/IHNyYy50YXJnZXQucGFyZW50Tm9kZSA6IHNyYy50YXJnZXQ7XG5cblx0XHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0XHRcdC8vIEV2ZW50IHR5cGVcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50eXBlID0gc3JjO1xuXHRcdH1cblxuXHRcdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdFx0aWYgKHByb3BzKSB7XG5cdFx0XHRqUXVlcnkuZXh0ZW5kKHRoaXMsIHByb3BzKTtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHRcdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdFx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHRcdHRoaXNbalF1ZXJ5LmV4cGFuZG9dID0gdHJ1ZTtcblx0fTtcblxuXHQvLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxuXHRqUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRcdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdFx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0XHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdFx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRcdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRcdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcblx0XHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRcdGlmIChlICYmICF0aGlzLmlzU2ltdWxhdGVkKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuXHRcdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0XHRpZiAoZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCkge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbiBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSB7XG5cdFx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRcdGlmIChlICYmICF0aGlzLmlzU2ltdWxhdGVkKSB7XG5cdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRhbHRLZXk6IHRydWUsXG5cdFx0YnViYmxlczogdHJ1ZSxcblx0XHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRcdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRcdGN0cmxLZXk6IHRydWUsXG5cdFx0ZGV0YWlsOiB0cnVlLFxuXHRcdGV2ZW50UGhhc2U6IHRydWUsXG5cdFx0bWV0YUtleTogdHJ1ZSxcblx0XHRwYWdlWDogdHJ1ZSxcblx0XHRwYWdlWTogdHJ1ZSxcblx0XHRzaGlmdEtleTogdHJ1ZSxcblx0XHR2aWV3OiB0cnVlLFxuXHRcdFwiY2hhclwiOiB0cnVlLFxuXHRcdGNoYXJDb2RlOiB0cnVlLFxuXHRcdGtleTogdHJ1ZSxcblx0XHRrZXlDb2RlOiB0cnVlLFxuXHRcdGJ1dHRvbjogdHJ1ZSxcblx0XHRidXR0b25zOiB0cnVlLFxuXHRcdGNsaWVudFg6IHRydWUsXG5cdFx0Y2xpZW50WTogdHJ1ZSxcblx0XHRvZmZzZXRYOiB0cnVlLFxuXHRcdG9mZnNldFk6IHRydWUsXG5cdFx0cG9pbnRlcklkOiB0cnVlLFxuXHRcdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRcdHNjcmVlblg6IHRydWUsXG5cdFx0c2NyZWVuWTogdHJ1ZSxcblx0XHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHRcdHRvRWxlbWVudDogdHJ1ZSxcblx0XHR0b3VjaGVzOiB0cnVlLFxuXG5cdFx0d2hpY2g6IGZ1bmN0aW9uIHdoaWNoKGV2ZW50KSB7XG5cdFx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmIChldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KGV2ZW50LnR5cGUpKSB7XG5cdFx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHRpZiAoIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoZXZlbnQudHlwZSkpIHtcblx0XHRcdFx0aWYgKGJ1dHRvbiAmIDEpIHtcblx0XHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChidXR0b24gJiAyKSB7XG5cdFx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYnV0dG9uICYgNCkge1xuXHRcdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudC53aGljaDtcblx0XHR9XG5cdH0sIGpRdWVyeS5ldmVudC5hZGRQcm9wKTtcblxuXHQvLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncblx0Ly8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cblx0Ly8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcblx0Ly9cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuXHQvLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcblx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG5cdC8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRcdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0XHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0XHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG5cdH0sIGZ1bmN0aW9uIChvcmlnLCBmaXgpIHtcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFtvcmlnXSA9IHtcblx0XHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdFx0aGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcblx0XHRcdFx0dmFyIHJldCxcblx0XHRcdFx0ICAgIHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdCAgICByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0ICAgIGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0XHRpZiAoIXJlbGF0ZWQgfHwgcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnModGFyZ2V0LCByZWxhdGVkKSkge1xuXHRcdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cblx0XHRvbjogZnVuY3Rpb24gb24odHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbikge1xuXHRcdFx0cmV0dXJuIF9vbih0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuKTtcblx0XHR9LFxuXHRcdG9uZTogZnVuY3Rpb24gb25lKHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4pIHtcblx0XHRcdHJldHVybiBfb24odGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSk7XG5cdFx0fSxcblx0XHRvZmY6IGZ1bmN0aW9uIG9mZih0eXBlcywgc2VsZWN0b3IsIGZuKSB7XG5cdFx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdFx0aWYgKHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaikge1xuXG5cdFx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0XHRqUXVlcnkodHlwZXMuZGVsZWdhdGVUYXJnZXQpLm9mZihoYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLm9yaWdUeXBlLCBoYW5kbGVPYmouc2VsZWN0b3IsIGhhbmRsZU9iai5oYW5kbGVyKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHR5cGVvZiB0eXBlcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHR5cGVzKSkgPT09IFwib2JqZWN0XCIpIHtcblxuXHRcdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0XHRmb3IgKHR5cGUgaW4gdHlwZXMpIHtcblx0XHRcdFx0XHR0aGlzLm9mZih0eXBlLCBzZWxlY3RvciwgdHlwZXNbdHlwZV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuXG5cdFx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZm4gPT09IGZhbHNlKSB7XG5cdFx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSh0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdCAgICByc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHQgICAgcmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG5cdC8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuXHRmdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoZWxlbSwgY29udGVudCkge1xuXHRcdGlmIChub2RlTmFtZShlbGVtLCBcInRhYmxlXCIpICYmIG5vZGVOYW1lKGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiKSkge1xuXG5cdFx0XHRyZXR1cm4galF1ZXJ5KFwiPnRib2R5XCIsIGVsZW0pWzBdIHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHQvLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5cdGZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoZWxlbSkge1xuXHRcdGVsZW0udHlwZSA9IChlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikgIT09IG51bGwpICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblx0ZnVuY3Rpb24gcmVzdG9yZVNjcmlwdChlbGVtKSB7XG5cdFx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyhlbGVtLnR5cGUpO1xuXG5cdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRlbGVtLnR5cGUgPSBtYXRjaFsxXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoc3JjLCBkZXN0KSB7XG5cdFx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0XHRpZiAoZGVzdC5ub2RlVHlwZSAhPT0gMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdFx0aWYgKGRhdGFQcml2Lmhhc0RhdGEoc3JjKSkge1xuXHRcdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3Moc3JjKTtcblx0XHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KGRlc3QsIHBkYXRhT2xkKTtcblx0XHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdFx0aWYgKGV2ZW50cykge1xuXHRcdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0XHRmb3IgKHR5cGUgaW4gZXZlbnRzKSB7XG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgbCA9IGV2ZW50c1t0eXBlXS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoZGVzdCwgdHlwZSwgZXZlbnRzW3R5cGVdW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRcdGlmIChkYXRhVXNlci5oYXNEYXRhKHNyYykpIHtcblx0XHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKHNyYyk7XG5cdFx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoe30sIHVkYXRhT2xkKTtcblxuXHRcdFx0ZGF0YVVzZXIuc2V0KGRlc3QsIHVkYXRhQ3VyKTtcblx0XHR9XG5cdH1cblxuXHQvLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcblx0ZnVuY3Rpb24gZml4SW5wdXQoc3JjLCBkZXN0KSB7XG5cdFx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdFx0aWYgKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdChzcmMudHlwZSkpIHtcblx0XHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdFx0XHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHRcdH0gZWxzZSBpZiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiKSB7XG5cdFx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZG9tTWFuaXAoY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQpIHtcblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRhcmdzID0gY29uY2F0LmFwcGx5KFtdLCBhcmdzKTtcblxuXHRcdHZhciBmcmFnbWVudCxcblx0XHQgICAgZmlyc3QsXG5cdFx0ICAgIHNjcmlwdHMsXG5cdFx0ICAgIGhhc1NjcmlwdHMsXG5cdFx0ICAgIG5vZGUsXG5cdFx0ICAgIGRvYyxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHQgICAgaU5vQ2xvbmUgPSBsIC0gMSxcblx0XHQgICAgdmFsdWUgPSBhcmdzWzBdLFxuXHRcdCAgICBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpO1xuXG5cdFx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdFx0aWYgKGlzRnVuY3Rpb24gfHwgbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG5cdFx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcShpbmRleCk7XG5cdFx0XHRcdGlmIChpc0Z1bmN0aW9uKSB7XG5cdFx0XHRcdFx0YXJnc1swXSA9IHZhbHVlLmNhbGwodGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkb21NYW5pcChzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAobCkge1xuXHRcdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KGFyZ3MsIGNvbGxlY3Rpb25bMF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQpO1xuXHRcdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRpZiAoZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0XHRpZiAoZmlyc3QgfHwgaWdub3JlZCkge1xuXHRcdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcChnZXRBbGwoZnJhZ21lbnQsIFwic2NyaXB0XCIpLCBkaXNhYmxlU2NyaXB0KTtcblx0XHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdFx0aWYgKGkgIT09IGlOb0Nsb25lKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKG5vZGUsIHRydWUsIHRydWUpO1xuXG5cdFx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0XHRpZiAoaGFzU2NyaXB0cykge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZShzY3JpcHRzLCBnZXRBbGwobm9kZSwgXCJzY3JpcHRcIikpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoY29sbGVjdGlvbltpXSwgbm9kZSwgaSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaGFzU2NyaXB0cykge1xuXHRcdFx0XHRcdGRvYyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoc2NyaXB0cywgcmVzdG9yZVNjcmlwdCk7XG5cblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKykge1xuXHRcdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbaV07XG5cdFx0XHRcdFx0XHRpZiAocnNjcmlwdFR5cGUudGVzdChub2RlLnR5cGUgfHwgXCJcIikgJiYgIWRhdGFQcml2LmFjY2Vzcyhub2RlLCBcImdsb2JhbEV2YWxcIikgJiYgalF1ZXJ5LmNvbnRhaW5zKGRvYywgbm9kZSkpIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAobm9kZS5zcmMpIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5fZXZhbFVybCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKG5vZGUuc3JjKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0RE9NRXZhbChub2RlLnRleHRDb250ZW50LnJlcGxhY2UocmNsZWFuU2NyaXB0LCBcIlwiKSwgZG9jKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjb2xsZWN0aW9uO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3JlbW92ZShlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEpIHtcblx0XHR2YXIgbm9kZSxcblx0XHQgICAgbm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoc2VsZWN0b3IsIGVsZW0pIDogZWxlbSxcblx0XHQgICAgaSA9IDA7XG5cblx0XHRmb3IgKDsgKG5vZGUgPSBub2Rlc1tpXSkgIT0gbnVsbDsgaSsrKSB7XG5cdFx0XHRpZiAoIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YShnZXRBbGwobm9kZSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobm9kZS5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdGlmIChrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMobm9kZS5vd25lckRvY3VtZW50LCBub2RlKSkge1xuXHRcdFx0XHRcdHNldEdsb2JhbEV2YWwoZ2V0QWxsKG5vZGUsIFwic2NyaXB0XCIpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKHtcblx0XHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiBodG1sUHJlZmlsdGVyKGh0bWwpIHtcblx0XHRcdHJldHVybiBodG1sLnJlcGxhY2UocnhodG1sVGFnLCBcIjwkMT48LyQyPlwiKTtcblx0XHR9LFxuXG5cdFx0Y2xvbmU6IGZ1bmN0aW9uIGNsb25lKGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBsLFxuXHRcdFx0ICAgIHNyY0VsZW1lbnRzLFxuXHRcdFx0ICAgIGRlc3RFbGVtZW50cyxcblx0XHRcdCAgICBjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKHRydWUpLFxuXHRcdFx0ICAgIGluUGFnZSA9IGpRdWVyeS5jb250YWlucyhlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0pO1xuXG5cdFx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRcdGlmICghc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSkgJiYgIWpRdWVyeS5pc1hNTERvYyhlbGVtKSkge1xuXG5cdFx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoY2xvbmUpO1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbChlbGVtKTtcblxuXHRcdFx0XHRmb3IgKGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0Zml4SW5wdXQoc3JjRWxlbWVudHNbaV0sIGRlc3RFbGVtZW50c1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdFx0aWYgKGRhdGFBbmRFdmVudHMpIHtcblx0XHRcdFx0aWYgKGRlZXBEYXRhQW5kRXZlbnRzKSB7XG5cdFx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoZWxlbSk7XG5cdFx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbChjbG9uZSk7XG5cblx0XHRcdFx0XHRmb3IgKGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudChzcmNFbGVtZW50c1tpXSwgZGVzdEVsZW1lbnRzW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoZWxlbSwgY2xvbmUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbChjbG9uZSwgXCJzY3JpcHRcIik7XG5cdFx0XHRpZiAoZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbChkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKGVsZW0sIFwic2NyaXB0XCIpKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0XHRyZXR1cm4gY2xvbmU7XG5cdFx0fSxcblxuXHRcdGNsZWFuRGF0YTogZnVuY3Rpb24gY2xlYW5EYXRhKGVsZW1zKSB7XG5cdFx0XHR2YXIgZGF0YSxcblx0XHRcdCAgICBlbGVtLFxuXHRcdFx0ICAgIHR5cGUsXG5cdFx0XHQgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0ICAgIGkgPSAwO1xuXG5cdFx0XHRmb3IgKDsgKGVsZW0gPSBlbGVtc1tpXSkgIT09IHVuZGVmaW5lZDsgaSsrKSB7XG5cdFx0XHRcdGlmIChhY2NlcHREYXRhKGVsZW0pKSB7XG5cdFx0XHRcdFx0aWYgKGRhdGEgPSBlbGVtW2RhdGFQcml2LmV4cGFuZG9dKSB7XG5cdFx0XHRcdFx0XHRpZiAoZGF0YS5ldmVudHMpIHtcblx0XHRcdFx0XHRcdFx0Zm9yICh0eXBlIGluIGRhdGEuZXZlbnRzKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHNwZWNpYWxbdHlwZV0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoZWxlbSwgdHlwZSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdFx0ZWxlbVtkYXRhUHJpdi5leHBhbmRvXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGVsZW1bZGF0YVVzZXIuZXhwYW5kb10pIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdFx0ZWxlbVtkYXRhVXNlci5leHBhbmRvXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGRldGFjaDogZnVuY3Rpb24gZGV0YWNoKHNlbGVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gX3JlbW92ZSh0aGlzLCBzZWxlY3RvciwgdHJ1ZSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKHNlbGVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gX3JlbW92ZSh0aGlzLCBzZWxlY3Rvcik7XG5cdFx0fSxcblxuXHRcdHRleHQ6IGZ1bmN0aW9uIHRleHQodmFsdWUpIHtcblx0XHRcdHJldHVybiBhY2Nlc3ModGhpcywgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8galF1ZXJ5LnRleHQodGhpcykgOiB0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCk7XG5cdFx0fSxcblxuXHRcdGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xuXHRcdFx0cmV0dXJuIGRvbU1hbmlwKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0aWYgKHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSkge1xuXHRcdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQodGhpcywgZWxlbSk7XG5cdFx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0cHJlcGVuZDogZnVuY3Rpb24gcHJlcGVuZCgpIHtcblx0XHRcdHJldHVybiBkb21NYW5pcCh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdGlmICh0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkpIHtcblx0XHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KHRoaXMsIGVsZW0pO1xuXHRcdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0YmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUoKSB7XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRpZiAodGhpcy5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtLCB0aGlzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGFmdGVyOiBmdW5jdGlvbiBhZnRlcigpIHtcblx0XHRcdHJldHVybiBkb21NYW5pcCh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdGlmICh0aGlzLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW0sIHRoaXMubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0ZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KCkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGZvciAoOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKykge1xuXHRcdFx0XHRpZiAoZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKGdldEFsbChlbGVtLCBmYWxzZSkpO1xuXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0Y2xvbmU6IGZ1bmN0aW9uIGNsb25lKGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzKSB7XG5cdFx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRodG1sOiBmdW5jdGlvbiBodG1sKHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXNbMF0gfHwge30sXG5cdFx0XHRcdCAgICBpID0gMCxcblx0XHRcdFx0ICAgIGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCh2YWx1ZSkgJiYgIXdyYXBNYXBbKHJ0YWdOYW1lLmV4ZWModmFsdWUpIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pIHtcblxuXHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIodmFsdWUpO1xuXG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzW2ldIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0XHRpZiAoZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoZ2V0QWxsKGVsZW0sIGZhbHNlKSk7XG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChlbGVtKSB7XG5cdFx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCh2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoKTtcblx0XHR9LFxuXG5cdFx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKCkge1xuXHRcdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRcdGlmIChqUXVlcnkuaW5BcnJheSh0aGlzLCBpZ25vcmVkKSA8IDApIHtcblx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKGdldEFsbCh0aGlzKSk7XG5cdFx0XHRcdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZChlbGVtLCB0aGlzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0XHR9LCBpZ25vcmVkKTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0XHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRcdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0XHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRcdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxuXHR9LCBmdW5jdGlvbiAobmFtZSwgb3JpZ2luYWwpIHtcblx0XHRqUXVlcnkuZm5bbmFtZV0gPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcblx0XHRcdHZhciBlbGVtcyxcblx0XHRcdCAgICByZXQgPSBbXSxcblx0XHRcdCAgICBpbnNlcnQgPSBqUXVlcnkoc2VsZWN0b3IpLFxuXHRcdFx0ICAgIGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdCAgICBpID0gMDtcblxuXHRcdFx0Zm9yICg7IGkgPD0gbGFzdDsgaSsrKSB7XG5cdFx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKHRydWUpO1xuXHRcdFx0XHRqUXVlcnkoaW5zZXJ0W2ldKVtvcmlnaW5hbF0oZWxlbXMpO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdHB1c2guYXBwbHkocmV0LCBlbGVtcy5nZXQoKSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhyZXQpO1xuXHRcdH07XG5cdH0pO1xuXHR2YXIgcm1hcmdpbiA9IC9ebWFyZ2luLztcblxuXHR2YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cChcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIpO1xuXG5cdHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiBnZXRTdHlsZXMoZWxlbSkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCF2aWV3IHx8ICF2aWV3Lm9wZW5lcikge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuXHR9O1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0XHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRcdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0XHRpZiAoIWRpdikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgKyBcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgKyBcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgKyBcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cblx0XHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRpdik7XG5cdFx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuXG5cdFx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0XHRkaXYgPSBudWxsO1xuXHRcdH1cblxuXHRcdHZhciBwaXhlbFBvc2l0aW9uVmFsLFxuXHRcdCAgICBib3hTaXppbmdSZWxpYWJsZVZhbCxcblx0XHQgICAgcGl4ZWxNYXJnaW5SaWdodFZhbCxcblx0XHQgICAgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdCAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdCAgICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdFx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0XHRpZiAoIWRpdi5zdHlsZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdFx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRcdGRpdi5jbG9uZU5vZGUodHJ1ZSkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRcdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArIFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKGRpdik7XG5cblx0XHRqUXVlcnkuZXh0ZW5kKHN1cHBvcnQsIHtcblx0XHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uIHBpeGVsUG9zaXRpb24oKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdFx0fSxcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbiBib3hTaXppbmdSZWxpYWJsZSgpIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdFx0fSxcblx0XHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uIHBpeGVsTWFyZ2luUmlnaHQoKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdFx0fSxcblx0XHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24gcmVsaWFibGVNYXJnaW5MZWZ0KCkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KSgpO1xuXG5cdGZ1bmN0aW9uIGN1ckNTUyhlbGVtLCBuYW1lLCBjb21wdXRlZCkge1xuXHRcdHZhciB3aWR0aCxcblx0XHQgICAgbWluV2lkdGgsXG5cdFx0ICAgIG1heFdpZHRoLFxuXHRcdCAgICByZXQsXG5cblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKGVsZW0pO1xuXG5cdFx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHRcdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHRcdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRcdGlmIChjb21wdXRlZCkge1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSB8fCBjb21wdXRlZFtuYW1lXTtcblxuXHRcdFx0aWYgKHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSkpIHtcblx0XHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKGVsZW0sIG5hbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdFx0aWYgKCFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdChyZXQpICYmIHJtYXJnaW4udGVzdChuYW1lKSkge1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDogcmV0O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkR2V0SG9va0lmKGNvbmRpdGlvbkZuLCBob29rRm4pIHtcblxuXHRcdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRpZiAoY29uZGl0aW9uRm4oKSkge1xuXG5cdFx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdFx0cmV0dXJuICh0aGlzLmdldCA9IGhvb2tGbikuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0dmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0ICAgIHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdCAgICBjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0ICAgIGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cdCAgICBjc3NQcmVmaXhlcyA9IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLFxuXHQgICAgZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7XG5cblx0Ly8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuXHRmdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZShuYW1lKSB7XG5cblx0XHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRcdGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0XHR2YXIgY2FwTmFtZSA9IG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksXG5cdFx0ICAgIGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRuYW1lID0gY3NzUHJlZml4ZXNbaV0gKyBjYXBOYW1lO1xuXHRcdFx0aWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuXHRcdFx0XHRyZXR1cm4gbmFtZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cblx0Ly8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5cdGZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUobmFtZSkge1xuXHRcdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbbmFtZV07XG5cdFx0aWYgKCFyZXQpIHtcblx0XHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1tuYW1lXSA9IHZlbmRvclByb3BOYW1lKG5hbWUpIHx8IG5hbWU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlcihlbGVtLCB2YWx1ZSwgc3VidHJhY3QpIHtcblxuXHRcdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0XHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0XHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyh2YWx1ZSk7XG5cdFx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCgwLCBtYXRjaGVzWzJdIC0gKHN1YnRyYWN0IHx8IDApKSArIChtYXRjaGVzWzNdIHx8IFwicHhcIikgOiB2YWx1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzKSB7XG5cdFx0dmFyIGksXG5cdFx0ICAgIHZhbCA9IDA7XG5cblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHRpZiAoZXh0cmEgPT09IChpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIikpIHtcblx0XHRcdGkgPSA0O1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdFx0fSBlbHNlIHtcblx0XHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0XHR9XG5cblx0XHRmb3IgKDsgaSA8IDQ7IGkgKz0gMikge1xuXG5cdFx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0XHRpZiAoZXh0cmEgPT09IFwibWFyZ2luXCIpIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbaV0sIHRydWUsIHN0eWxlcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc0JvcmRlckJveCkge1xuXG5cdFx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0XHRpZiAoZXh0cmEgPT09IFwiY29udGVudFwiKSB7XG5cdFx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbaV0sIHRydWUsIHN0eWxlcyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0XHRpZiAoZXh0cmEgIT09IFwibWFyZ2luXCIpIHtcblx0XHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyhlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kW2ldICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kW2ldLCB0cnVlLCBzdHlsZXMpO1xuXG5cdFx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdFx0aWYgKGV4dHJhICE9PSBcInBhZGRpbmdcIikge1xuXHRcdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbaV0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodChlbGVtLCBuYW1lLCBleHRyYSkge1xuXG5cdFx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHRcdHZhciB2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdCAgICBzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbSksXG5cdFx0ICAgIHZhbCA9IGN1ckNTUyhlbGVtLCBuYW1lLCBzdHlsZXMpLFxuXHRcdCAgICBpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcykgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAocm51bW5vbnB4LnRlc3QodmFsKSkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiYgKHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbbmFtZV0pO1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL0hlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdGlmICh2YWwgPT09IFwiYXV0b1wiKSB7XG5cdFx0XHR2YWwgPSBlbGVtW1wib2Zmc2V0XCIgKyBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpXTtcblx0XHR9XG5cblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdFx0dmFsID0gcGFyc2VGbG9hdCh2YWwpIHx8IDA7XG5cblx0XHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRcdHJldHVybiB2YWwgKyBhdWdtZW50V2lkdGhPckhlaWdodChlbGVtLCBuYW1lLCBleHRyYSB8fCAoaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIpLCB2YWx1ZUlzQm9yZGVyQm94LCBzdHlsZXMpICsgXCJweFwiO1xuXHR9XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cblx0XHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0XHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0XHRjc3NIb29rczoge1xuXHRcdFx0b3BhY2l0eToge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChlbGVtLCBjb21wdXRlZCkge1xuXHRcdFx0XHRcdGlmIChjb21wdXRlZCkge1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyhlbGVtLCBcIm9wYWNpdHlcIik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdFx0Y3NzTnVtYmVyOiB7XG5cdFx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XHRcInpvb21cIjogdHJ1ZVxuXHRcdH0sXG5cblx0XHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdFx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRcdGNzc1Byb3BzOiB7XG5cdFx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHRcdH0sXG5cblx0XHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRcdHN0eWxlOiBmdW5jdGlvbiBzdHlsZShlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEpIHtcblxuXHRcdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0XHRpZiAoIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0ICAgIHR5cGUsXG5cdFx0XHQgICAgaG9va3MsXG5cdFx0XHQgICAgb3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKG5hbWUpLFxuXHRcdFx0ICAgIGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QobmFtZSksXG5cdFx0XHQgICAgc3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRcdGlmICghaXNDdXN0b21Qcm9wKSB7XG5cdFx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKG9yaWdOYW1lKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzW25hbWVdIHx8IGpRdWVyeS5jc3NIb29rc1tvcmlnTmFtZV07XG5cblx0XHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHZhbHVlKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRcdGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIChyZXQgPSByY3NzTnVtLmV4ZWModmFsdWUpKSAmJiByZXRbMV0pIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyhlbGVtLCBuYW1lLCByZXQpO1xuXG5cdFx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0XHRpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdFx0aWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WzNdIHx8IChqUXVlcnkuY3NzTnVtYmVyW29yaWdOYW1lXSA/IFwiXCIgOiBcInB4XCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0XHRpZiAoIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZihcImJhY2tncm91bmRcIikgPT09IDApIHtcblx0XHRcdFx0XHRzdHlsZVtuYW1lXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRcdGlmICghaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoZWxlbSwgdmFsdWUsIGV4dHJhKSkgIT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHRcdFx0aWYgKGlzQ3VzdG9tUHJvcCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdHlsZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdFx0aWYgKGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldChlbGVtLCBmYWxzZSwgZXh0cmEpKSAhPT0gdW5kZWZpbmVkKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdFx0cmV0dXJuIHN0eWxlW25hbWVdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRjc3M6IGZ1bmN0aW9uIGNzcyhlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzKSB7XG5cdFx0XHR2YXIgdmFsLFxuXHRcdFx0ICAgIG51bSxcblx0XHRcdCAgICBob29rcyxcblx0XHRcdCAgICBvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UobmFtZSksXG5cdFx0XHQgICAgaXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdChuYW1lKTtcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdFx0aWYgKCFpc0N1c3RvbVByb3ApIHtcblx0XHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUob3JpZ05hbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1tuYW1lXSB8fCBqUXVlcnkuY3NzSG9va3Nbb3JpZ05hbWVdO1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MpIHtcblx0XHRcdFx0dmFsID0gaG9va3MuZ2V0KGVsZW0sIHRydWUsIGV4dHJhKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR2YWwgPSBjdXJDU1MoZWxlbSwgbmFtZSwgc3R5bGVzKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0XHRpZiAodmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtKSB7XG5cdFx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVtuYW1lXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0XHRpZiAoZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEpIHtcblx0XHRcdFx0bnVtID0gcGFyc2VGbG9hdCh2YWwpO1xuXHRcdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUobnVtKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1wiaGVpZ2h0XCIsIFwid2lkdGhcIl0sIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzW25hbWVdID0ge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSwgY29tcHV0ZWQsIGV4dHJhKSB7XG5cdFx0XHRcdGlmIChjb21wdXRlZCkge1xuXG5cdFx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoalF1ZXJ5LmNzcyhlbGVtLCBcImRpc3BsYXlcIikpICYmIChcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSA/IHN3YXAoZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoZWxlbSwgbmFtZSwgZXh0cmEpO1xuXHRcdFx0XHRcdH0pIDogZ2V0V2lkdGhPckhlaWdodChlbGVtLCBuYW1lLCBleHRyYSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0sIHZhbHVlLCBleHRyYSkge1xuXHRcdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0ICAgIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyhlbGVtKSxcblx0XHRcdFx0ICAgIHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoZWxlbSwgbmFtZSwgZXh0cmEsIGpRdWVyeS5jc3MoZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcykgPT09IFwiYm9yZGVyLWJveFwiLCBzdHlsZXMpO1xuXG5cdFx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRcdGlmIChzdWJ0cmFjdCAmJiAobWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyh2YWx1ZSkpICYmIChtYXRjaGVzWzNdIHx8IFwicHhcIikgIT09IFwicHhcIikge1xuXG5cdFx0XHRcdFx0ZWxlbS5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyhlbGVtLCBuYW1lKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlcihlbGVtLCB2YWx1ZSwgc3VidHJhY3QpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LCBmdW5jdGlvbiAoZWxlbSwgY29tcHV0ZWQpIHtcblx0XHRpZiAoY29tcHV0ZWQpIHtcblx0XHRcdHJldHVybiAocGFyc2VGbG9hdChjdXJDU1MoZWxlbSwgXCJtYXJnaW5MZWZ0XCIpKSB8fCBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBzd2FwKGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHR9KSkgKyBcInB4XCI7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRtYXJnaW46IFwiXCIsXG5cdFx0cGFkZGluZzogXCJcIixcblx0XHRib3JkZXI6IFwiV2lkdGhcIlxuXHR9LCBmdW5jdGlvbiAocHJlZml4LCBzdWZmaXgpIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbcHJlZml4ICsgc3VmZml4XSA9IHtcblx0XHRcdGV4cGFuZDogZnVuY3Rpb24gZXhwYW5kKHZhbHVlKSB7XG5cdFx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ICAgIGV4cGFuZGVkID0ge30sXG5cblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdChcIiBcIikgOiBbdmFsdWVdO1xuXG5cdFx0XHRcdGZvciAoOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdFx0ZXhwYW5kZWRbcHJlZml4ICsgY3NzRXhwYW5kW2ldICsgc3VmZml4XSA9IHBhcnRzW2ldIHx8IHBhcnRzW2kgLSAyXSB8fCBwYXJ0c1swXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0aWYgKCFybWFyZ2luLnRlc3QocHJlZml4KSkge1xuXHRcdFx0alF1ZXJ5LmNzc0hvb2tzW3ByZWZpeCArIHN1ZmZpeF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRjc3M6IGZ1bmN0aW9uIGNzcyhuYW1lLCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBmdW5jdGlvbiAoZWxlbSwgbmFtZSwgdmFsdWUpIHtcblx0XHRcdFx0dmFyIHN0eWxlcyxcblx0XHRcdFx0ICAgIGxlbixcblx0XHRcdFx0ICAgIG1hcCA9IHt9LFxuXHRcdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcblx0XHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbSk7XG5cdFx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0XHRtYXBbbmFtZVtpXV0gPSBqUXVlcnkuY3NzKGVsZW0sIG5hbWVbaV0sIGZhbHNlLCBzdHlsZXMpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IGpRdWVyeS5zdHlsZShlbGVtLCBuYW1lLCB2YWx1ZSkgOiBqUXVlcnkuY3NzKGVsZW0sIG5hbWUpO1xuXHRcdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKTtcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIFR3ZWVuKGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nKSB7XG5cdFx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdChlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyk7XG5cdH1cblx0alF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblx0VHdlZW4ucHJvdG90eXBlID0ge1xuXHRcdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0XHRpbml0OiBmdW5jdGlvbiBpbml0KGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0KSB7XG5cdFx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSA/IFwiXCIgOiBcInB4XCIpO1xuXHRcdH0sXG5cdFx0Y3VyOiBmdW5jdGlvbiBjdXIoKSB7XG5cdFx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbdGhpcy5wcm9wXTtcblxuXHRcdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/IGhvb2tzLmdldCh0aGlzKSA6IFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyk7XG5cdFx0fSxcblx0XHRydW46IGZ1bmN0aW9uIHJ1bihwZXJjZW50KSB7XG5cdFx0XHR2YXIgZWFzZWQsXG5cdFx0XHQgICAgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbdGhpcy5wcm9wXTtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5kdXJhdGlvbikge1xuXHRcdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1t0aGlzLmVhc2luZ10ocGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5ub3cgPSAodGhpcy5lbmQgLSB0aGlzLnN0YXJ0KSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zdGVwKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChob29rcyAmJiBob29rcy5zZXQpIHtcblx0XHRcdFx0aG9va3Muc2V0KHRoaXMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fTtcblxuXHRUd2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblx0VHdlZW4ucHJvcEhvb2tzID0ge1xuXHRcdF9kZWZhdWx0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCh0d2Vlbikge1xuXHRcdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRcdGlmICh0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8IHR3ZWVuLmVsZW1bdHdlZW4ucHJvcF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlW3R3ZWVuLnByb3BdID09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVt0d2Vlbi5wcm9wXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyh0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQodHdlZW4pIHtcblxuXHRcdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0XHRpZiAoalF1ZXJ5LmZ4LnN0ZXBbdHdlZW4ucHJvcF0pIHtcblx0XHRcdFx0XHRqUXVlcnkuZnguc3RlcFt0d2Vlbi5wcm9wXSh0d2Vlbik7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAodHdlZW4uZWxlbS5zdHlsZVtqUXVlcnkuY3NzUHJvcHNbdHdlZW4ucHJvcF1dICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzW3R3ZWVuLnByb3BdKSkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSh0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0d2Vlbi5lbGVtW3R3ZWVuLnByb3BdID0gdHdlZW4ubm93O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiBzZXQodHdlZW4pIHtcblx0XHRcdGlmICh0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHR0d2Vlbi5lbGVtW3R3ZWVuLnByb3BdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZWFzaW5nID0ge1xuXHRcdGxpbmVhcjogZnVuY3Rpb24gbGluZWFyKHApIHtcblx0XHRcdHJldHVybiBwO1xuXHRcdH0sXG5cdFx0c3dpbmc6IGZ1bmN0aW9uIHN3aW5nKHApIHtcblx0XHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyhwICogTWF0aC5QSSkgLyAyO1xuXHRcdH0sXG5cdFx0X2RlZmF1bHQ6IFwic3dpbmdcIlxuXHR9O1xuXG5cdGpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG5cdC8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5cdGpRdWVyeS5meC5zdGVwID0ge307XG5cblx0dmFyIGZ4Tm93LFxuXHQgICAgaW5Qcm9ncmVzcyxcblx0ICAgIHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHQgICAgcnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cblx0ZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdFx0aWYgKGluUHJvZ3Jlc3MpIHtcblx0XHRcdGlmIChkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblx0XHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzY2hlZHVsZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsKTtcblx0XHRcdH1cblxuXHRcdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0XHR9XG5cdH1cblxuXHQvLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5cdGZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHRcdHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXHRcdHJldHVybiBmeE5vdyA9IGpRdWVyeS5ub3coKTtcblx0fVxuXG5cdC8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5cdGZ1bmN0aW9uIGdlbkZ4KHR5cGUsIGluY2x1ZGVXaWR0aCkge1xuXHRcdHZhciB3aGljaCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHRcdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0XHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRcdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRcdGZvciAoOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoKSB7XG5cdFx0XHR3aGljaCA9IGNzc0V4cGFuZFtpXTtcblx0XHRcdGF0dHJzW1wibWFyZ2luXCIgKyB3aGljaF0gPSBhdHRyc1tcInBhZGRpbmdcIiArIHdoaWNoXSA9IHR5cGU7XG5cdFx0fVxuXG5cdFx0aWYgKGluY2x1ZGVXaWR0aCkge1xuXHRcdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYXR0cnM7XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVUd2Vlbih2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uKSB7XG5cdFx0dmFyIHR3ZWVuLFxuXHRcdCAgICBjb2xsZWN0aW9uID0gKEFuaW1hdGlvbi50d2VlbmVyc1twcm9wXSB8fCBbXSkuY29uY2F0KEFuaW1hdGlvbi50d2VlbmVyc1tcIipcIl0pLFxuXHRcdCAgICBpbmRleCA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRcdGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0aWYgKHR3ZWVuID0gY29sbGVjdGlvbltpbmRleF0uY2FsbChhbmltYXRpb24sIHByb3AsIHZhbHVlKSkge1xuXG5cdFx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKGVsZW0sIHByb3BzLCBvcHRzKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICB0b2dnbGUsXG5cdFx0ICAgIGhvb2tzLFxuXHRcdCAgICBvbGRmaXJlLFxuXHRcdCAgICBwcm9wVHdlZW4sXG5cdFx0ICAgIHJlc3RvcmVEaXNwbGF5LFxuXHRcdCAgICBkaXNwbGF5LFxuXHRcdCAgICBpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdCAgICBhbmltID0gdGhpcyxcblx0XHQgICAgb3JpZyA9IHt9LFxuXHRcdCAgICBzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0ICAgIGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKGVsZW0pLFxuXHRcdCAgICBkYXRhU2hvdyA9IGRhdGFQcml2LmdldChlbGVtLCBcImZ4c2hvd1wiKTtcblxuXHRcdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRcdGlmICghb3B0cy5xdWV1ZSkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoZWxlbSwgXCJmeFwiKTtcblx0XHRcdGlmIChob29rcy51bnF1ZXVlZCA9PSBudWxsKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aWYgKCFob29rcy51bnF1ZXVlZCkge1xuXHRcdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0XHRpZiAoIWpRdWVyeS5xdWV1ZShlbGVtLCBcImZ4XCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRmb3IgKHByb3AgaW4gcHJvcHMpIHtcblx0XHRcdHZhbHVlID0gcHJvcHNbcHJvcF07XG5cdFx0XHRpZiAocmZ4dHlwZXMudGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0ZGVsZXRlIHByb3BzW3Byb3BdO1xuXHRcdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gKGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIpKSB7XG5cblx0XHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0XHRpZiAodmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93W3Byb3BdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdG9yaWdbcHJvcF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1twcm9wXSB8fCBqUXVlcnkuc3R5bGUoZWxlbSwgcHJvcCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0XHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QocHJvcHMpO1xuXHRcdGlmICghcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KG9yaWcpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdFx0aWYgKGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdFx0b3B0cy5vdmVyZmxvdyA9IFtzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1ldO1xuXG5cdFx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRcdGlmIChyZXN0b3JlRGlzcGxheSA9PSBudWxsKSB7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KGVsZW0sIFwiZGlzcGxheVwiKTtcblx0XHRcdH1cblx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKGVsZW0sIFwiZGlzcGxheVwiKTtcblx0XHRcdGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuXHRcdFx0XHRpZiAocmVzdG9yZURpc3BsYXkpIHtcblx0XHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdFx0c2hvd0hpZGUoW2VsZW1dLCB0cnVlKTtcblx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyhlbGVtLCBcImRpc3BsYXlcIik7XG5cdFx0XHRcdFx0c2hvd0hpZGUoW2VsZW1dKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRcdGlmIChkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmNzcyhlbGVtLCBcImZsb2F0XCIpID09PSBcIm5vbmVcIikge1xuXG5cdFx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0XHRpZiAoIXByb3BUd2Vlbikge1xuXHRcdFx0XHRcdFx0YW5pbS5kb25lKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRpZiAocmVzdG9yZURpc3BsYXkgPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChvcHRzLm92ZXJmbG93KSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1swXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sxXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1syXTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRcdGZvciAocHJvcCBpbiBvcmlnKSB7XG5cblx0XHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0XHRpZiAoIXByb3BUd2Vlbikge1xuXHRcdFx0XHRpZiAoZGF0YVNob3cpIHtcblx0XHRcdFx0XHRpZiAoXCJoaWRkZW5cIiBpbiBkYXRhU2hvdykge1xuXHRcdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyhlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRcdGlmICh0b2dnbGUpIHtcblx0XHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdFx0aWYgKGhpZGRlbikge1xuXHRcdFx0XHRcdHNob3dIaWRlKFtlbGVtXSwgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHRhbmltLmRvbmUoZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGlmICghaGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRzaG93SGlkZShbZWxlbV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZWxlbSwgXCJmeHNob3dcIik7XG5cdFx0XHRcdFx0Zm9yIChwcm9wIGluIG9yaWcpIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5zdHlsZShlbGVtLCBwcm9wLCBvcmlnW3Byb3BdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKGhpZGRlbiA/IGRhdGFTaG93W3Byb3BdIDogMCwgcHJvcCwgYW5pbSk7XG5cdFx0XHRpZiAoIShwcm9wIGluIGRhdGFTaG93KSkge1xuXHRcdFx0XHRkYXRhU2hvd1twcm9wXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKGhpZGRlbikge1xuXHRcdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHByb3BGaWx0ZXIocHJvcHMsIHNwZWNpYWxFYXNpbmcpIHtcblx0XHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdFx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdFx0Zm9yIChpbmRleCBpbiBwcm9wcykge1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoaW5kZXgpO1xuXHRcdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1tuYW1lXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbaW5kZXhdO1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdGVhc2luZyA9IHZhbHVlWzFdO1xuXHRcdFx0XHR2YWx1ZSA9IHByb3BzW2luZGV4XSA9IHZhbHVlWzBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaW5kZXggIT09IG5hbWUpIHtcblx0XHRcdFx0cHJvcHNbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdFx0ZGVsZXRlIHByb3BzW2luZGV4XTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbbmFtZV07XG5cdFx0XHRpZiAoaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcykge1xuXHRcdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCh2YWx1ZSk7XG5cdFx0XHRcdGRlbGV0ZSBwcm9wc1tuYW1lXTtcblxuXHRcdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdFx0Zm9yIChpbmRleCBpbiB2YWx1ZSkge1xuXHRcdFx0XHRcdGlmICghKGluZGV4IGluIHByb3BzKSkge1xuXHRcdFx0XHRcdFx0cHJvcHNbaW5kZXhdID0gdmFsdWVbaW5kZXhdO1xuXHRcdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1tpbmRleF0gPSBlYXNpbmc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nW25hbWVdID0gZWFzaW5nO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIEFuaW1hdGlvbihlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XG5cdFx0dmFyIHJlc3VsdCxcblx0XHQgICAgc3RvcHBlZCxcblx0XHQgICAgaW5kZXggPSAwLFxuXHRcdCAgICBsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ICAgIGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0pLFxuXHRcdCAgICB0aWNrID0gZnVuY3Rpb24gdGljaygpIHtcblx0XHRcdGlmIChzdG9wcGVkKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHQgICAgcmVtYWluaW5nID0gTWF0aC5tYXgoMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lKSxcblxuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHQgICAgcGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0ICAgIGluZGV4ID0gMCxcblx0XHRcdCAgICBsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbaW5kZXhdLnJ1bihwZXJjZW50KTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aChlbGVtLCBbYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmddKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKHBlcmNlbnQgPCAxICYmIGxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICghbGVuZ3RoKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoZWxlbSwgW2FuaW1hdGlvbiwgMSwgMF0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoZWxlbSwgW2FuaW1hdGlvbl0pO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0ICAgIGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2Uoe1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKHt9LCBwcm9wZXJ0aWVzKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQodHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiBjcmVhdGVUd2Vlbihwcm9wLCBlbmQpIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbcHJvcF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKHR3ZWVuKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uIHN0b3AoZ290b0VuZCkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cblx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoc3RvcHBlZCkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zW2luZGV4XS5ydW4oMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoZ290b0VuZCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoZWxlbSwgW2FuaW1hdGlvbiwgMSwgMF0pO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKGVsZW0sIFthbmltYXRpb24sIGdvdG9FbmRdKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKGVsZW0sIFthbmltYXRpb24sIGdvdG9FbmRdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9KSxcblx0XHQgICAgcHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0XHRwcm9wRmlsdGVyKHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nKTtcblxuXHRcdGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbaW5kZXhdLmNhbGwoYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMpO1xuXHRcdFx0aWYgKHJlc3VsdCkge1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ocmVzdWx0LnN0b3ApKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSkuc3RvcCA9IGpRdWVyeS5wcm94eShyZXN1bHQuc3RvcCwgcmVzdWx0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGpRdWVyeS5tYXAocHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24pO1xuXG5cdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGFuaW1hdGlvbi5vcHRzLnN0YXJ0KSkge1xuXHRcdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbChlbGVtLCBhbmltYXRpb24pO1xuXHRcdH1cblxuXHRcdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdFx0YW5pbWF0aW9uLnByb2dyZXNzKGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzKS5kb25lKGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlKS5mYWlsKGFuaW1hdGlvbi5vcHRzLmZhaWwpLmFsd2F5cyhhbmltYXRpb24ub3B0cy5hbHdheXMpO1xuXG5cdFx0alF1ZXJ5LmZ4LnRpbWVyKGpRdWVyeS5leHRlbmQodGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0pKTtcblxuXHRcdHJldHVybiBhbmltYXRpb247XG5cdH1cblxuXHRqUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZChBbmltYXRpb24sIHtcblxuXHRcdHR3ZWVuZXJzOiB7XG5cdFx0XHRcIipcIjogW2Z1bmN0aW9uIChwcm9wLCB2YWx1ZSkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKHByb3AsIHZhbHVlKTtcblx0XHRcdFx0YWRqdXN0Q1NTKHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyh2YWx1ZSksIHR3ZWVuKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fV1cblx0XHR9LFxuXG5cdFx0dHdlZW5lcjogZnVuY3Rpb24gdHdlZW5lcihwcm9wcywgY2FsbGJhY2spIHtcblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihwcm9wcykpIHtcblx0XHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdFx0cHJvcHMgPSBbXCIqXCJdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaChybm90aHRtbHdoaXRlKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHByb3AsXG5cdFx0XHQgICAgaW5kZXggPSAwLFxuXHRcdFx0ICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdFx0Zm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdHByb3AgPSBwcm9wc1tpbmRleF07XG5cdFx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1twcm9wXSA9IEFuaW1hdGlvbi50d2VlbmVyc1twcm9wXSB8fCBbXTtcblx0XHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzW3Byb3BdLnVuc2hpZnQoY2FsbGJhY2spO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRwcmVmaWx0ZXJzOiBbZGVmYXVsdFByZWZpbHRlcl0sXG5cblx0XHRwcmVmaWx0ZXI6IGZ1bmN0aW9uIHByZWZpbHRlcihjYWxsYmFjaywgcHJlcGVuZCkge1xuXHRcdFx0aWYgKHByZXBlbmQpIHtcblx0XHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdChjYWxsYmFjayk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uIChzcGVlZCwgZWFzaW5nLCBmbikge1xuXHRcdHZhciBvcHQgPSBzcGVlZCAmJiAodHlwZW9mIHNwZWVkID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yoc3BlZWQpKSA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoe30sIHNwZWVkKSA6IHtcblx0XHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8IGpRdWVyeS5pc0Z1bmN0aW9uKHNwZWVkKSAmJiBzcGVlZCxcblx0XHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oZWFzaW5nKSAmJiBlYXNpbmdcblx0XHR9O1xuXG5cdFx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdFx0aWYgKGpRdWVyeS5meC5vZmYpIHtcblx0XHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdGlmIChvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcykge1xuXHRcdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbb3B0LmR1cmF0aW9uXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdFx0aWYgKG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSkge1xuXHRcdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHRcdH1cblxuXHRcdC8vIFF1ZXVlaW5nXG5cdFx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRcdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihvcHQub2xkKSkge1xuXHRcdFx0XHRvcHQub2xkLmNhbGwodGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHQucXVldWUpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUodGhpcywgb3B0LnF1ZXVlKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIG9wdDtcblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRmYWRlVG86IGZ1bmN0aW9uIGZhZGVUbyhzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2spIHtcblxuXHRcdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoaXNIaWRkZW5XaXRoaW5UcmVlKS5jc3MoXCJvcGFjaXR5XCIsIDApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YW5pbWF0ZTogZnVuY3Rpb24gYW5pbWF0ZShwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QocHJvcCksXG5cdFx0XHQgICAgb3B0YWxsID0galF1ZXJ5LnNwZWVkKHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKSxcblx0XHRcdCAgICBkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uIGRvQW5pbWF0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKHRoaXMsIGpRdWVyeS5leHRlbmQoe30sIHByb3ApLCBvcHRhbGwpO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoZW1wdHkgfHwgZGF0YVByaXYuZ2V0KHRoaXMsIFwiZmluaXNoXCIpKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID8gdGhpcy5lYWNoKGRvQW5pbWF0aW9uKSA6IHRoaXMucXVldWUob3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbik7XG5cdFx0fSxcblx0XHRzdG9wOiBmdW5jdGlvbiBzdG9wKHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQpIHtcblx0XHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiBzdG9wUXVldWUoaG9va3MpIHtcblx0XHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdFx0c3RvcChnb3RvRW5kKTtcblx0XHRcdH07XG5cblx0XHRcdGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLnF1ZXVlKHR5cGUgfHwgXCJmeFwiLCBbXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdCAgICBpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdCAgICB0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHQgICAgZGF0YSA9IGRhdGFQcml2LmdldCh0aGlzKTtcblxuXHRcdFx0XHRpZiAoaW5kZXgpIHtcblx0XHRcdFx0XHRpZiAoZGF0YVtpbmRleF0gJiYgZGF0YVtpbmRleF0uc3RvcCkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKGRhdGFbaW5kZXhdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9yIChpbmRleCBpbiBkYXRhKSB7XG5cdFx0XHRcdFx0XHRpZiAoZGF0YVtpbmRleF0gJiYgZGF0YVtpbmRleF0uc3RvcCAmJiBycnVuLnRlc3QoaW5kZXgpKSB7XG5cdFx0XHRcdFx0XHRcdHN0b3BRdWV1ZShkYXRhW2luZGV4XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07KSB7XG5cdFx0XHRcdFx0aWYgKHRpbWVyc1tpbmRleF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1tpbmRleF0ucXVldWUgPT09IHR5cGUpKSB7XG5cblx0XHRcdFx0XHRcdHRpbWVyc1tpbmRleF0uYW5pbS5zdG9wKGdvdG9FbmQpO1xuXHRcdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dGltZXJzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRcdGlmIChkZXF1ZXVlIHx8ICFnb3RvRW5kKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUodGhpcywgdHlwZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0ZmluaXNoOiBmdW5jdGlvbiBmaW5pc2godHlwZSkge1xuXHRcdFx0aWYgKHR5cGUgIT09IGZhbHNlKSB7XG5cdFx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdCAgICBkYXRhID0gZGF0YVByaXYuZ2V0KHRoaXMpLFxuXHRcdFx0XHQgICAgcXVldWUgPSBkYXRhW3R5cGUgKyBcInF1ZXVlXCJdLFxuXHRcdFx0XHQgICAgaG9va3MgPSBkYXRhW3R5cGUgKyBcInF1ZXVlSG9va3NcIl0sXG5cdFx0XHRcdCAgICB0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHQgICAgbGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0XHRqUXVlcnkucXVldWUodGhpcywgdHlwZSwgW10pO1xuXG5cdFx0XHRcdGlmIChob29rcyAmJiBob29rcy5zdG9wKSB7XG5cdFx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKHRoaXMsIHRydWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdFx0Zm9yIChpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07KSB7XG5cdFx0XHRcdFx0aWYgKHRpbWVyc1tpbmRleF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbaW5kZXhdLnF1ZXVlID09PSB0eXBlKSB7XG5cdFx0XHRcdFx0XHR0aW1lcnNbaW5kZXhdLmFuaW0uc3RvcCh0cnVlKTtcblx0XHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRcdGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0XHRcdGlmIChxdWV1ZVtpbmRleF0gJiYgcXVldWVbaW5kZXhdLmZpbmlzaCkge1xuXHRcdFx0XHRcdFx0cXVldWVbaW5kZXhdLmZpbmlzaC5jYWxsKHRoaXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1widG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIl0sIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG5cdFx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuW25hbWVdO1xuXHRcdGpRdWVyeS5mbltuYW1lXSA9IGZ1bmN0aW9uIChzcGVlZCwgZWFzaW5nLCBjYWxsYmFjaykge1xuXHRcdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/IGNzc0ZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0aGlzLmFuaW1hdGUoZ2VuRngobmFtZSwgdHJ1ZSksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKTtcblx0XHR9O1xuXHR9KTtcblxuXHQvLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcblx0XHRzbGlkZVVwOiBnZW5GeChcImhpZGVcIiksXG5cdFx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuXHRcdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRcdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0XHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxuXHR9LCBmdW5jdGlvbiAobmFtZSwgcHJvcHMpIHtcblx0XHRqUXVlcnkuZm5bbmFtZV0gPSBmdW5jdGlvbiAoc3BlZWQsIGVhc2luZywgY2FsbGJhY2spIHtcblx0XHRcdHJldHVybiB0aGlzLmFuaW1hdGUocHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKTtcblx0XHR9O1xuXHR9KTtcblxuXHRqUXVlcnkudGltZXJzID0gW107XG5cdGpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciB0aW1lcixcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0XHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRcdGZvciAoOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aW1lciA9IHRpbWVyc1tpXTtcblxuXHRcdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdFx0aWYgKCF0aW1lcigpICYmIHRpbWVyc1tpXSA9PT0gdGltZXIpIHtcblx0XHRcdFx0dGltZXJzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdGltZXJzLmxlbmd0aCkge1xuXHRcdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0XHR9XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH07XG5cblx0alF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24gKHRpbWVyKSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wdXNoKHRpbWVyKTtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fTtcblxuXHRqUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblx0alF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChpblByb2dyZXNzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdFx0c2NoZWR1bGUoKTtcblx0fTtcblxuXHRqUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpblByb2dyZXNzID0gbnVsbDtcblx0fTtcblxuXHRqUXVlcnkuZnguc3BlZWRzID0ge1xuXHRcdHNsb3c6IDYwMCxcblx0XHRmYXN0OiAyMDAsXG5cblx0XHQvLyBEZWZhdWx0IHNwZWVkXG5cdFx0X2RlZmF1bHQ6IDQwMFxuXHR9O1xuXG5cdC8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cblx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cblx0alF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24gKHRpbWUsIHR5cGUpIHtcblx0XHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1t0aW1lXSB8fCB0aW1lIDogdGltZTtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSh0eXBlLCBmdW5jdGlvbiAobmV4dCwgaG9va3MpIHtcblx0XHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQobmV4dCwgdGltZSk7XG5cdFx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0fTtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcblx0XHQgICAgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxcblx0XHQgICAgb3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpO1xuXG5cdFx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHRcdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRcdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0XHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRcdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdFx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xuXHR9KSgpO1xuXG5cdHZhciBib29sSG9vayxcblx0ICAgIGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGF0dHI6IGZ1bmN0aW9uIGF0dHIobmFtZSwgdmFsdWUpIHtcblx0XHRcdHJldHVybiBhY2Nlc3ModGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZUF0dHI6IGZ1bmN0aW9uIHJlbW92ZUF0dHIobmFtZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKHRoaXMsIG5hbWUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZXh0ZW5kKHtcblx0XHRhdHRyOiBmdW5jdGlvbiBhdHRyKGVsZW0sIG5hbWUsIHZhbHVlKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0ICAgIGhvb2tzLFxuXHRcdFx0ICAgIG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdFx0aWYgKG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRcdGlmICh0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKGVsZW0sIG5hbWUsIHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdFx0aWYgKG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoZWxlbSkpIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgKGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdChuYW1lKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoZWxlbSwgbmFtZSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldChlbGVtLCB2YWx1ZSwgbmFtZSkpICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgKyBcIlwiKTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KGVsZW0sIG5hbWUpKSAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKGVsZW0sIG5hbWUpO1xuXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHRcdH0sXG5cblx0XHRhdHRySG9va3M6IHtcblx0XHRcdHR5cGU6IHtcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZWxlbSwgdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmIG5vZGVOYW1lKGVsZW0sIFwiaW5wdXRcIikpIHtcblx0XHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIHZhbHVlKTtcblx0XHRcdFx0XHRcdGlmICh2YWwpIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0cmVtb3ZlQXR0cjogZnVuY3Rpb24gcmVtb3ZlQXR0cihlbGVtLCB2YWx1ZSkge1xuXHRcdFx0dmFyIG5hbWUsXG5cdFx0XHQgICAgaSA9IDAsXG5cblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaChybm90aHRtbHdoaXRlKTtcblxuXHRcdFx0aWYgKGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdHdoaWxlIChuYW1lID0gYXR0ck5hbWVzW2krK10pIHtcblx0XHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuXHRib29sSG9vayA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uIHNldChlbGVtLCB2YWx1ZSwgbmFtZSkge1xuXHRcdFx0aWYgKHZhbHVlID09PSBmYWxzZSkge1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoZWxlbSwgbmFtZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShuYW1lLCBuYW1lKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZWFjaChqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSwgZnVuY3Rpb24gKGksIG5hbWUpIHtcblx0XHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVtuYW1lXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdFx0YXR0ckhhbmRsZVtuYW1lXSA9IGZ1bmN0aW9uIChlbGVtLCBuYW1lLCBpc1hNTCkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdCAgICBoYW5kbGUsXG5cdFx0XHQgICAgbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCFpc1hNTCkge1xuXG5cdFx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVtsb3dlcmNhc2VOYW1lXTtcblx0XHRcdFx0YXR0ckhhbmRsZVtsb3dlcmNhc2VOYW1lXSA9IHJldDtcblx0XHRcdFx0cmV0ID0gZ2V0dGVyKGVsZW0sIG5hbWUsIGlzWE1MKSAhPSBudWxsID8gbG93ZXJjYXNlTmFtZSA6IG51bGw7XG5cdFx0XHRcdGF0dHJIYW5kbGVbbG93ZXJjYXNlTmFtZV0gPSBoYW5kbGU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH07XG5cdH0pO1xuXG5cdHZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0ICAgIHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0cHJvcDogZnVuY3Rpb24gcHJvcChuYW1lLCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlUHJvcDogZnVuY3Rpb24gcmVtb3ZlUHJvcChuYW1lKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXNbalF1ZXJ5LnByb3BGaXhbbmFtZV0gfHwgbmFtZV07XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5leHRlbmQoe1xuXHRcdHByb3A6IGZ1bmN0aW9uIHByb3AoZWxlbSwgbmFtZSwgdmFsdWUpIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHQgICAgaG9va3MsXG5cdFx0XHQgICAgblR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0XHRpZiAoblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyhlbGVtKSkge1xuXG5cdFx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4W25hbWVdIHx8IG5hbWU7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1tuYW1lXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldChlbGVtLCB2YWx1ZSwgbmFtZSkpICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW1bbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldChlbGVtLCBuYW1lKSkgIT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW1bbmFtZV07XG5cdFx0fSxcblxuXHRcdHByb3BIb29rczoge1xuXHRcdFx0dGFiSW5kZXg6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0cihlbGVtLCBcInRhYmluZGV4XCIpO1xuXG5cdFx0XHRcdFx0aWYgKHRhYmluZGV4KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQodGFiaW5kZXgsIDEwKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAocmZvY3VzYWJsZS50ZXN0KGVsZW0ubm9kZU5hbWUpIHx8IHJjbGlja2FibGUudGVzdChlbGVtLm5vZGVOYW1lKSAmJiBlbGVtLmhyZWYpIHtcblx0XHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRwcm9wRml4OiB7XG5cdFx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHRcdH1cblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuXHQvLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG5cdC8vIG9uIHRoZSBvcHRpb25cblx0Ly8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcblx0Ly8gd2hlbiBpbiBhbiBvcHRncm91cFxuXHQvLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcblx0Ly8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5cdGlmICghc3VwcG9ydC5vcHRTZWxlY3RlZCkge1xuXHRcdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChlbGVtKSB7XG5cblx0XHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdGlmIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0pIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdFx0aWYgKHBhcmVudC5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRqUXVlcnkuZWFjaChbXCJ0YWJJbmRleFwiLCBcInJlYWRPbmx5XCIsIFwibWF4TGVuZ3RoXCIsIFwiY2VsbFNwYWNpbmdcIiwgXCJjZWxsUGFkZGluZ1wiLCBcInJvd1NwYW5cIiwgXCJjb2xTcGFuXCIsIFwidXNlTWFwXCIsIFwiZnJhbWVCb3JkZXJcIiwgXCJjb250ZW50RWRpdGFibGVcIl0sIGZ1bmN0aW9uICgpIHtcblx0XHRqUXVlcnkucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldID0gdGhpcztcblx0fSk7XG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UodmFsdWUpIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKFwiIFwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldENsYXNzKGVsZW0pIHtcblx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuXHR9XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0YWRkQ2xhc3M6IGZ1bmN0aW9uIGFkZENsYXNzKHZhbHVlKSB7XG5cdFx0XHR2YXIgY2xhc3Nlcyxcblx0XHRcdCAgICBlbGVtLFxuXHRcdFx0ICAgIGN1cixcblx0XHRcdCAgICBjdXJWYWx1ZSxcblx0XHRcdCAgICBjbGF6eixcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIGZpbmFsVmFsdWUsXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaikge1xuXHRcdFx0XHRcdGpRdWVyeSh0aGlzKS5hZGRDbGFzcyh2YWx1ZS5jYWxsKHRoaXMsIGosIGdldENsYXNzKHRoaXMpKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoZWxlbSA9IHRoaXNbaSsrXSkge1xuXHRcdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoZWxlbSk7XG5cdFx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoY3VyVmFsdWUpICsgXCIgXCI7XG5cblx0XHRcdFx0XHRpZiAoY3VyKSB7XG5cdFx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRcdHdoaWxlIChjbGF6eiA9IGNsYXNzZXNbaisrXSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoY3VyLmluZGV4T2YoXCIgXCIgKyBjbGF6eiArIFwiIFwiKSA8IDApIHtcblx0XHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoY3VyKTtcblx0XHRcdFx0XHRcdGlmIChjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGZpbmFsVmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKHZhbHVlKSB7XG5cdFx0XHR2YXIgY2xhc3Nlcyxcblx0XHRcdCAgICBlbGVtLFxuXHRcdFx0ICAgIGN1cixcblx0XHRcdCAgICBjdXJWYWx1ZSxcblx0XHRcdCAgICBjbGF6eixcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIGZpbmFsVmFsdWUsXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaikge1xuXHRcdFx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcyh2YWx1ZS5jYWxsKHRoaXMsIGosIGdldENsYXNzKHRoaXMpKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsIFwiXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoZWxlbSA9IHRoaXNbaSsrXSkge1xuXHRcdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoZWxlbSk7XG5cblx0XHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKGN1clZhbHVlKSArIFwiIFwiO1xuXG5cdFx0XHRcdFx0aWYgKGN1cikge1xuXHRcdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0XHR3aGlsZSAoY2xhenogPSBjbGFzc2VzW2orK10pIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHRcdHdoaWxlIChjdXIuaW5kZXhPZihcIiBcIiArIGNsYXp6ICsgXCIgXCIpID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZShcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoY3VyKTtcblx0XHRcdFx0XHRcdGlmIChjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGZpbmFsVmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKHZhbHVlLCBzdGF0ZVZhbCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih2YWx1ZSk7XG5cblx0XHRcdGlmICh0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyh2YWx1ZSkgOiB0aGlzLnJlbW92ZUNsYXNzKHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLnRvZ2dsZUNsYXNzKHZhbHVlLmNhbGwodGhpcywgaSwgZ2V0Q2xhc3ModGhpcyksIHN0YXRlVmFsKSwgc3RhdGVWYWwpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdFx0aWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcblxuXHRcdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0c2VsZiA9IGpRdWVyeSh0aGlzKTtcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cblx0XHRcdFx0XHR3aGlsZSAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1tpKytdKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdFx0aWYgKHNlbGYuaGFzQ2xhc3MoY2xhc3NOYW1lKSkge1xuXHRcdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKGNsYXNzTmFtZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3ModGhpcyk7XG5cdFx0XHRcdFx0aWYgKGNsYXNzTmFtZSkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRcdGlmICh0aGlzLnNldEF0dHJpYnV0ZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID8gXCJcIiA6IGRhdGFQcml2LmdldCh0aGlzLCBcIl9fY2xhc3NOYW1lX19cIikgfHwgXCJcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0aGFzQ2xhc3M6IGZ1bmN0aW9uIGhhc0NsYXNzKHNlbGVjdG9yKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLFxuXHRcdFx0ICAgIGVsZW0sXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHRcdHdoaWxlIChlbGVtID0gdGhpc1tpKytdKSB7XG5cdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxICYmIChcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoZ2V0Q2xhc3MoZWxlbSkpICsgXCIgXCIpLmluZGV4T2YoY2xhc3NOYW1lKSA+IC0xKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0dmFsOiBmdW5jdGlvbiB2YWwodmFsdWUpIHtcblx0XHRcdHZhciBob29rcyxcblx0XHRcdCAgICByZXQsXG5cdFx0XHQgICAgaXNGdW5jdGlvbixcblx0XHRcdCAgICBlbGVtID0gdGhpc1swXTtcblxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmIChlbGVtKSB7XG5cdFx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbZWxlbS50eXBlXSB8fCBqUXVlcnkudmFsSG9va3NbZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXTtcblxuXHRcdFx0XHRcdGlmIChob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoZWxlbSwgXCJ2YWx1ZVwiKSkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UocnJldHVybiwgXCJcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRcdGlmICh0aGlzLm5vZGVUeXBlICE9PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGlzRnVuY3Rpb24pIHtcblx0XHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKHRoaXMsIGksIGpRdWVyeSh0aGlzKS52YWwoKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRcdGlmICh2YWwgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHZhbCA9IFwiXCI7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdHZhbCArPSBcIlwiO1xuXHRcdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAodmFsLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzW3RoaXMudHlwZV0gfHwgalF1ZXJ5LnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV07XG5cblx0XHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdFx0aWYgKCFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCh0aGlzLCB2YWwsIFwidmFsdWVcIikgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cdFx0dmFsSG9va3M6IHtcblx0XHRcdG9wdGlvbjoge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChlbGVtKSB7XG5cblx0XHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0cihlbGVtLCBcInZhbHVlXCIpO1xuXHRcdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/IHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZShqUXVlcnkudGV4dChlbGVtKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRzZWxlY3Q6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZSxcblx0XHRcdFx0XHQgICAgb3B0aW9uLFxuXHRcdFx0XHRcdCAgICBpLFxuXHRcdFx0XHRcdCAgICBvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdCAgICBpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHQgICAgb25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHQgICAgdmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdCAgICBtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdFx0XHRcdGkgPSBtYXg7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRcdGZvciAoOyBpIDwgbWF4OyBpKyspIHtcblx0XHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbaV07XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRcdGlmICgob3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4KSAmJlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmICghb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHwgIW5vZGVOYW1lKG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIpKSkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkob3B0aW9uKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0XHRpZiAob25lKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdFx0dmFsdWVzLnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZWxlbSwgdmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgb3B0aW9uU2V0LFxuXHRcdFx0XHRcdCAgICBvcHRpb24sXG5cdFx0XHRcdFx0ICAgIG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0ICAgIHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkodmFsdWUpLFxuXHRcdFx0XHRcdCAgICBpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zW2ldO1xuXG5cdFx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0XHRpZiAob3B0aW9uLnNlbGVjdGVkID0galF1ZXJ5LmluQXJyYXkoalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQob3B0aW9uKSwgdmFsdWVzKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRcdGlmICghb3B0aW9uU2V0KSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcblx0alF1ZXJ5LmVhY2goW1wicmFkaW9cIiwgXCJjaGVja2JveFwiXSwgZnVuY3Rpb24gKCkge1xuXHRcdGpRdWVyeS52YWxIb29rc1t0aGlzXSA9IHtcblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0sIHZhbHVlKSB7XG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheShqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpZiAoIXN1cHBvcnQuY2hlY2tPbikge1xuXHRcdFx0alF1ZXJ5LnZhbEhvb2tzW3RoaXNdLmdldCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuXHR2YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cblx0alF1ZXJ5LmV4dGVuZChqUXVlcnkuZXZlbnQsIHtcblxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycykge1xuXG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBjdXIsXG5cdFx0XHQgICAgdG1wLFxuXHRcdFx0ICAgIGJ1YmJsZVR5cGUsXG5cdFx0XHQgICAgb250eXBlLFxuXHRcdFx0ICAgIGhhbmRsZSxcblx0XHRcdCAgICBzcGVjaWFsLFxuXHRcdFx0ICAgIGV2ZW50UGF0aCA9IFtlbGVtIHx8IGRvY3VtZW50XSxcblx0XHRcdCAgICB0eXBlID0gaGFzT3duLmNhbGwoZXZlbnQsIFwidHlwZVwiKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdCAgICBuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoZXZlbnQsIFwibmFtZXNwYWNlXCIpID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO1xuXG5cdFx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDgpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRcdGlmIChyZm9jdXNNb3JwaC50ZXN0KHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlLmluZGV4T2YoXCIuXCIpID4gLTEpIHtcblxuXHRcdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcblx0XHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRcdGV2ZW50ID0gZXZlbnRbalF1ZXJ5LmV4cGFuZG9dID8gZXZlbnQgOiBuZXcgalF1ZXJ5LkV2ZW50KHR5cGUsICh0eXBlb2YgZXZlbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihldmVudCkpID09PSBcIm9iamVjdFwiICYmIGV2ZW50KTtcblxuXHRcdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpO1xuXHRcdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/IG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIikgOiBudWxsO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRcdGlmICghZXZlbnQudGFyZ2V0KSB7XG5cdFx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRcdGRhdGEgPSBkYXRhID09IG51bGwgPyBbZXZlbnRdIDogalF1ZXJ5Lm1ha2VBcnJheShkYXRhLCBbZXZlbnRdKTtcblxuXHRcdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsW3R5cGVdIHx8IHt9O1xuXHRcdFx0aWYgKCFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseShlbGVtLCBkYXRhKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0XHRpZiAoIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cblx0XHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRcdGlmICghcmZvY3VzTW9ycGgudGVzdChidWJibGVUeXBlICsgdHlwZSkpIHtcblx0XHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdGV2ZW50UGF0aC5wdXNoKGN1cik7XG5cdFx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRcdGlmICh0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpKSB7XG5cdFx0XHRcdFx0ZXZlbnRQYXRoLnB1c2godG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0XHRpID0gMDtcblx0XHRcdHdoaWxlICgoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG5cblx0XHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID8gYnViYmxlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0XHRoYW5kbGUgPSAoZGF0YVByaXYuZ2V0KGN1ciwgXCJldmVudHNcIikgfHwge30pW2V2ZW50LnR5cGVdICYmIGRhdGFQcml2LmdldChjdXIsIFwiaGFuZGxlXCIpO1xuXHRcdFx0XHRpZiAoaGFuZGxlKSB7XG5cdFx0XHRcdFx0aGFuZGxlLmFwcGx5KGN1ciwgZGF0YSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyW29udHlwZV07XG5cdFx0XHRcdGlmIChoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoY3VyKSkge1xuXHRcdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseShjdXIsIGRhdGEpO1xuXHRcdFx0XHRcdGlmIChldmVudC5yZXN1bHQgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRcdGlmICghb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuXG5cdFx0XHRcdGlmICgoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseShldmVudFBhdGgucG9wKCksIGRhdGEpID09PSBmYWxzZSkgJiYgYWNjZXB0RGF0YShlbGVtKSkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdFx0aWYgKG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbihlbGVtW3R5cGVdKSAmJiAhalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHRcdHRtcCA9IGVsZW1bb250eXBlXTtcblxuXHRcdFx0XHRcdFx0aWYgKHRtcCkge1xuXHRcdFx0XHRcdFx0XHRlbGVtW29udHlwZV0gPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0XHRlbGVtW3R5cGVdKCk7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0XHRpZiAodG1wKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW1bb250eXBlXSA9IHRtcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0XHR9LFxuXG5cdFx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdFx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0XHRzaW11bGF0ZTogZnVuY3Rpb24gc2ltdWxhdGUodHlwZSwgZWxlbSwgZXZlbnQpIHtcblx0XHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChuZXcgalF1ZXJ5LkV2ZW50KCksIGV2ZW50LCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9KTtcblxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoZSwgbnVsbCwgZWxlbSk7XG5cdFx0fVxuXG5cdH0pO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcih0eXBlLCBkYXRhKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIodHlwZSwgZGF0YSwgdGhpcyk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiB0cmlnZ2VySGFuZGxlcih0eXBlLCBkYXRhKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbMF07XG5cdFx0XHRpZiAoZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIodHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZWFjaCgoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArIFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgKyBcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIikuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoaSwgbmFtZSkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bbmFtZV0gPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/IHRoaXMub24obmFtZSwgbnVsbCwgZGF0YSwgZm4pIDogdGhpcy50cmlnZ2VyKG5hbWUpO1xuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGhvdmVyOiBmdW5jdGlvbiBob3Zlcihmbk92ZXIsIGZuT3V0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGZuT3ZlcikubW91c2VsZWF2ZShmbk91dCB8fCBmbk92ZXIpO1xuXHRcdH1cblx0fSk7XG5cblx0c3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG5cdC8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcblx0Ly8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcblx0Ly9cblx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG5cdC8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuXHQvLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcblx0Ly8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcblx0aWYgKCFzdXBwb3J0LmZvY3VzaW4pIHtcblx0XHRqUXVlcnkuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uIChvcmlnLCBmaXgpIHtcblxuXHRcdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoZXZlbnQpKTtcblx0XHRcdH07XG5cblx0XHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsW2ZpeF0gPSB7XG5cdFx0XHRcdHNldHVwOiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0XHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0ICAgIGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKGRvYywgZml4KTtcblxuXHRcdFx0XHRcdGlmICghYXR0YWNoZXMpIHtcblx0XHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKG9yaWcsIGhhbmRsZXIsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoZG9jLCBmaXgsIChhdHRhY2hlcyB8fCAwKSArIDEpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24gdGVhcmRvd24oKSB7XG5cdFx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdCAgICBhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2Vzcyhkb2MsIGZpeCkgLSAxO1xuXG5cdFx0XHRcdFx0aWYgKCFhdHRhY2hlcykge1xuXHRcdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIob3JpZywgaGFuZGxlciwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZG9jLCBmaXgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoZG9jLCBmaXgsIGF0dGFjaGVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSk7XG5cdH1cblx0dmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG5cdHZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxuXHR2YXIgcnF1ZXJ5ID0gL1xcPy87XG5cblx0Ly8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xuXHRqUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdHZhciB4bWw7XG5cdFx0aWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHRcdHRyeSB7XG5cdFx0XHR4bWwgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhkYXRhLCBcInRleHQveG1sXCIpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGgpIHtcblx0XHRcdGpRdWVyeS5lcnJvcihcIkludmFsaWQgWE1MOiBcIiArIGRhdGEpO1xuXHRcdH1cblx0XHRyZXR1cm4geG1sO1xuXHR9O1xuXG5cdHZhciByYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ICAgIHJDUkxGID0gL1xccj9cXG4vZyxcblx0ICAgIHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0ICAgIHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuXHRmdW5jdGlvbiBidWlsZFBhcmFtcyhwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXG5cdFx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRcdGpRdWVyeS5lYWNoKG9iaiwgZnVuY3Rpb24gKGksIHYpIHtcblx0XHRcdFx0aWYgKHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QocHJlZml4KSkge1xuXG5cdFx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRcdGFkZChwcmVmaXgsIHYpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdFx0YnVpbGRQYXJhbXMocHJlZml4ICsgXCJbXCIgKyAoKHR5cGVvZiB2ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodikpID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiKSArIFwiXVwiLCB2LCB0cmFkaXRpb25hbCwgYWRkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmICghdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJvYmplY3RcIikge1xuXG5cdFx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0XHRmb3IgKG5hbWUgaW4gb2JqKSB7XG5cdFx0XHRcdGJ1aWxkUGFyYW1zKHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbbmFtZV0sIHRyYWRpdGlvbmFsLCBhZGQpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRcdGFkZChwcmVmaXgsIG9iaik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcblx0Ly8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5cdGpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uIChhLCB0cmFkaXRpb25hbCkge1xuXHRcdHZhciBwcmVmaXgsXG5cdFx0ICAgIHMgPSBbXSxcblx0XHQgICAgYWRkID0gZnVuY3Rpb24gYWRkKGtleSwgdmFsdWVPckZ1bmN0aW9uKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlT3JGdW5jdGlvbikgPyB2YWx1ZU9yRnVuY3Rpb24oKSA6IHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1tzLmxlbmd0aF0gPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUpO1xuXHRcdH07XG5cblx0XHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRcdGlmIChBcnJheS5pc0FycmF5KGEpIHx8IGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdChhKSkge1xuXG5cdFx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRcdGpRdWVyeS5lYWNoKGEsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0YWRkKHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0XHRmb3IgKHByZWZpeCBpbiBhKSB7XG5cdFx0XHRcdGJ1aWxkUGFyYW1zKHByZWZpeCwgYVtwcmVmaXhdLCB0cmFkaXRpb25hbCwgYWRkKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdFx0cmV0dXJuIHMuam9pbihcIiZcIik7XG5cdH07XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0c2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUoKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSk7XG5cdFx0fSxcblx0XHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24gc2VyaWFsaXplQXJyYXkoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AodGhpcywgXCJlbGVtZW50c1wiKTtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheShlbGVtZW50cykgOiB0aGlzO1xuXHRcdFx0fSkuZmlsdGVyKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSh0aGlzKS5pcyhcIjpkaXNhYmxlZFwiKSAmJiByc3VibWl0dGFibGUudGVzdCh0aGlzLm5vZGVOYW1lKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QodHlwZSkgJiYgKHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCh0eXBlKSk7XG5cdFx0XHR9KS5tYXAoZnVuY3Rpb24gKGksIGVsZW0pIHtcblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeSh0aGlzKS52YWwoKTtcblxuXHRcdFx0XHRpZiAodmFsID09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCh2YWwsIGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKHJDUkxGLCBcIlxcclxcblwiKSB9O1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UockNSTEYsIFwiXFxyXFxuXCIpIH07XG5cdFx0XHR9KS5nZXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdHZhciByMjAgPSAvJTIwL2csXG5cdCAgICByaGFzaCA9IC8jLiokLyxcblx0ICAgIHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdCAgICByaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0ICAgIHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHQgICAgcnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cblx0LyogUHJlZmlsdGVyc1xuICAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG4gICogMikgVGhlc2UgYXJlIGNhbGxlZDpcbiAgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG4gICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuICAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcbiAgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG4gICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcbiAgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuICAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcbiAgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG4gICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG4gICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoXCIqXCIpLFxuXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cblx0Ly8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuXHRmdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoc3RydWN0dXJlKSB7XG5cblx0XHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMpIHtcblxuXHRcdFx0aWYgKHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdCAgICBpID0gMCxcblx0XHRcdCAgICBkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXTtcblxuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGZ1bmMpKSB7XG5cblx0XHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0XHR3aGlsZSAoZGF0YVR5cGUgPSBkYXRhVHlwZXNbaSsrXSkge1xuXG5cdFx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0XHRpZiAoZGF0YVR5cGVbMF0gPT09IFwiK1wiKSB7XG5cdFx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKDEpIHx8IFwiKlwiO1xuXHRcdFx0XHRcdFx0KHN0cnVjdHVyZVtkYXRhVHlwZV0gPSBzdHJ1Y3R1cmVbZGF0YVR5cGVdIHx8IFtdKS51bnNoaWZ0KGZ1bmMpO1xuXG5cdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdChzdHJ1Y3R1cmVbZGF0YVR5cGVdID0gc3RydWN0dXJlW2RhdGFUeXBlXSB8fCBbXSkucHVzaChmdW5jKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5cdGZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUikge1xuXG5cdFx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdCAgICBzZWVraW5nVHJhbnNwb3J0ID0gc3RydWN0dXJlID09PSB0cmFuc3BvcnRzO1xuXG5cdFx0ZnVuY3Rpb24gaW5zcGVjdChkYXRhVHlwZSkge1xuXHRcdFx0dmFyIHNlbGVjdGVkO1xuXHRcdFx0aW5zcGVjdGVkW2RhdGFUeXBlXSA9IHRydWU7XG5cdFx0XHRqUXVlcnkuZWFjaChzdHJ1Y3R1cmVbZGF0YVR5cGVdIHx8IFtdLCBmdW5jdGlvbiAoXywgcHJlZmlsdGVyT3JGYWN0b3J5KSB7XG5cdFx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIpO1xuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiYgIXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFtkYXRhVHlwZU9yVHJhbnNwb3J0XSkge1xuXG5cdFx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdChkYXRhVHlwZU9yVHJhbnNwb3J0KTtcblx0XHRcdFx0XHRpbnNwZWN0KGRhdGFUeXBlT3JUcmFuc3BvcnQpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIGlmIChzZWVraW5nVHJhbnNwb3J0KSB7XG5cdFx0XHRcdFx0cmV0dXJuICEoc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluc3BlY3Qob3B0aW9ucy5kYXRhVHlwZXNbMF0pIHx8ICFpbnNwZWN0ZWRbXCIqXCJdICYmIGluc3BlY3QoXCIqXCIpO1xuXHR9XG5cblx0Ly8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG5cdC8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG5cdC8vIEZpeGVzICM5ODg3XG5cdGZ1bmN0aW9uIGFqYXhFeHRlbmQodGFyZ2V0LCBzcmMpIHtcblx0XHR2YXIga2V5LFxuXHRcdCAgICBkZWVwLFxuXHRcdCAgICBmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0XHRmb3IgKGtleSBpbiBzcmMpIHtcblx0XHRcdGlmIChzcmNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdChmbGF0T3B0aW9uc1trZXldID8gdGFyZ2V0IDogZGVlcCB8fCAoZGVlcCA9IHt9KSlba2V5XSA9IHNyY1trZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZGVlcCkge1xuXHRcdFx0alF1ZXJ5LmV4dGVuZCh0cnVlLCB0YXJnZXQsIGRlZXApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH1cblxuXHQvKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAgKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAgKi9cblx0ZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyhzLCBqcVhIUiwgcmVzcG9uc2VzKSB7XG5cblx0XHR2YXIgY3QsXG5cdFx0ICAgIHR5cGUsXG5cdFx0ICAgIGZpbmFsRGF0YVR5cGUsXG5cdFx0ICAgIGZpcnN0RGF0YVR5cGUsXG5cdFx0ICAgIGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHQgICAgZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0XHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHRcdHdoaWxlIChkYXRhVHlwZXNbMF0gPT09IFwiKlwiKSB7XG5cdFx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRcdGlmIChjdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0XHRpZiAoY3QpIHtcblx0XHRcdGZvciAodHlwZSBpbiBjb250ZW50cykge1xuXHRcdFx0XHRpZiAoY29udGVudHNbdHlwZV0gJiYgY29udGVudHNbdHlwZV0udGVzdChjdCkpIHtcblx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCh0eXBlKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRcdGlmIChkYXRhVHlwZXNbMF0gaW4gcmVzcG9uc2VzKSB7XG5cdFx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWzBdO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRcdGZvciAodHlwZSBpbiByZXNwb25zZXMpIHtcblx0XHRcdFx0aWYgKCFkYXRhVHlwZXNbMF0gfHwgcy5jb252ZXJ0ZXJzW3R5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXV0pIHtcblx0XHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWZpcnN0RGF0YVR5cGUpIHtcblx0XHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHRcdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdFx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRcdGlmIChmaW5hbERhdGFUeXBlKSB7XG5cdFx0XHRpZiAoZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWzBdKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KGZpbmFsRGF0YVR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlc1tmaW5hbERhdGFUeXBlXTtcblx0XHR9XG5cdH1cblxuXHQvKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gICovXG5cdGZ1bmN0aW9uIGFqYXhDb252ZXJ0KHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzKSB7XG5cdFx0dmFyIGNvbnYyLFxuXHRcdCAgICBjdXJyZW50LFxuXHRcdCAgICBjb252LFxuXHRcdCAgICB0bXAsXG5cdFx0ICAgIHByZXYsXG5cdFx0ICAgIGNvbnZlcnRlcnMgPSB7fSxcblxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0XHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0XHRpZiAoZGF0YVR5cGVzWzFdKSB7XG5cdFx0XHRmb3IgKGNvbnYgaW4gcy5jb252ZXJ0ZXJzKSB7XG5cdFx0XHRcdGNvbnZlcnRlcnNbY29udi50b0xvd2VyQ2FzZSgpXSA9IHMuY29udmVydGVyc1tjb252XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHRcdHdoaWxlIChjdXJyZW50KSB7XG5cblx0XHRcdGlmIChzLnJlc3BvbnNlRmllbGRzW2N1cnJlbnRdKSB7XG5cdFx0XHRcdGpxWEhSW3MucmVzcG9uc2VGaWVsZHNbY3VycmVudF1dID0gcmVzcG9uc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0XHRpZiAoIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlcikge1xuXHRcdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlcihyZXNwb25zZSwgcy5kYXRhVHlwZSk7XG5cdFx0XHR9XG5cblx0XHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0XHRpZiAoY3VycmVudCkge1xuXG5cdFx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdFx0aWYgKGN1cnJlbnQgPT09IFwiKlwiKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdFx0fSBlbHNlIGlmIChwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50KSB7XG5cblx0XHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzW3ByZXYgKyBcIiBcIiArIGN1cnJlbnRdIHx8IGNvbnZlcnRlcnNbXCIqIFwiICsgY3VycmVudF07XG5cblx0XHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRcdGlmICghY29udikge1xuXHRcdFx0XHRcdFx0Zm9yIChjb252MiBpbiBjb252ZXJ0ZXJzKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRcdFx0aWYgKHRtcFsxXSA9PT0gY3VycmVudCkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbcHJldiArIFwiIFwiICsgdG1wWzBdXSB8fCBjb252ZXJ0ZXJzW1wiKiBcIiArIHRtcFswXV07XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGNvbnYpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGNvbnYgPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbY29udjJdO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoY29udmVydGVyc1tjb252Ml0gIT09IHRydWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFswXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQodG1wWzFdKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRcdGlmIChjb252ICE9PSB0cnVlKSB7XG5cblx0XHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRcdGlmIChjb252ICYmIHMudGhyb3dzKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udihyZXNwb25zZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udihyZXNwb25zZSk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKHtcblxuXHRcdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRcdGFjdGl2ZTogMCxcblxuXHRcdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0XHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRcdGV0YWc6IHt9LFxuXG5cdFx0YWpheFNldHRpbmdzOiB7XG5cdFx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdChsb2NhdGlvbi5wcm90b2NvbCksXG5cdFx0XHRnbG9iYWw6IHRydWUsXG5cdFx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRcdGFzeW5jOiB0cnVlLFxuXHRcdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHRcdC8qXG4gICB0aW1lb3V0OiAwLFxuICAgZGF0YTogbnVsbCxcbiAgIGRhdGFUeXBlOiBudWxsLFxuICAgdXNlcm5hbWU6IG51bGwsXG4gICBwYXNzd29yZDogbnVsbCxcbiAgIGNhY2hlOiBudWxsLFxuICAgdGhyb3dzOiBmYWxzZSxcbiAgIHRyYWRpdGlvbmFsOiBmYWxzZSxcbiAgIGhlYWRlcnM6IHt9LFxuICAgKi9cblxuXHRcdFx0YWNjZXB0czoge1xuXHRcdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0XHR9LFxuXG5cdFx0XHRjb250ZW50czoge1xuXHRcdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdFx0fSxcblxuXHRcdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHRcdH0sXG5cblx0XHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdFx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHRcdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdFx0YWpheFNldHVwOiBmdW5jdGlvbiBhamF4U2V0dXAodGFyZ2V0LCBzZXR0aW5ncykge1xuXHRcdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoYWpheEV4dGVuZCh0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MpLCBzZXR0aW5ncykgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCk7XG5cdFx0fSxcblxuXHRcdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyhwcmVmaWx0ZXJzKSxcblx0XHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHModHJhbnNwb3J0cyksXG5cblx0XHQvLyBNYWluIG1ldGhvZFxuXHRcdGFqYXg6IGZ1bmN0aW9uIGFqYXgodXJsLCBvcHRpb25zKSB7XG5cblx0XHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0XHRpZiAoKHR5cGVvZiB1cmwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih1cmwpKSA9PT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdFx0dmFyIHRyYW5zcG9ydCxcblxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHQgICAgcmVzcG9uc2VIZWFkZXJzLFxuXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKHt9LCBvcHRpb25zKSxcblxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmIChjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSkgPyBqUXVlcnkoY2FsbGJhY2tDb250ZXh0KSA6IGpRdWVyeS5ldmVudCxcblxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHQgICAgY29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcblxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0X3N0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHQgICAgcmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uIGdldFJlc3BvbnNlSGVhZGVyKGtleSkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoY29tcGxldGVkKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXJlc3BvbnNlSGVhZGVycykge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKG1hdGNoID0gcmhlYWRlcnMuZXhlYyhyZXNwb25zZUhlYWRlcnNTdHJpbmcpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldID0gbWF0Y2hbMl07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uIGdldEFsbFJlc3BvbnNlSGVhZGVycygpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKGNvbXBsZXRlZCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1tuYW1lLnRvTG93ZXJDYXNlKCldID0gcmVxdWVzdEhlYWRlcnNOYW1lc1tuYW1lLnRvTG93ZXJDYXNlKCldIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1tuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiBvdmVycmlkZU1pbWVUeXBlKHR5cGUpIHtcblx0XHRcdFx0XHRpZiAoY29tcGxldGVkID09IG51bGwpIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiBzdGF0dXNDb2RlKG1hcCkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmIChtYXApIHtcblx0XHRcdFx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKG1hcFtqcVhIUi5zdGF0dXNdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yIChjb2RlIGluIG1hcCkge1xuXHRcdFx0XHRcdFx0XHRcdF9zdGF0dXNDb2RlW2NvZGVdID0gW19zdGF0dXNDb2RlW2NvZGVdLCBtYXBbY29kZV1dO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24gYWJvcnQoc3RhdHVzVGV4dCkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICh0cmFuc3BvcnQpIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydChmaW5hbFRleHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKDAsIGZpbmFsVGV4dCk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkLnByb21pc2UoanFYSFIpO1xuXG5cdFx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRcdHMudXJsID0gKCh1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZikgKyBcIlwiKS5yZXBsYWNlKHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIpO1xuXG5cdFx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRcdHMuZGF0YVR5cGVzID0gKHMuZGF0YVR5cGUgfHwgXCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW1wiXCJdO1xuXG5cdFx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRcdGlmIChzLmNyb3NzRG9tYWluID09IG51bGwpIHtcblx0XHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PSB1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdFx0aWYgKHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKHMuZGF0YSwgcy50cmFkaXRpb25hbCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSKTtcblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0XHRpZiAoZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdChzLnR5cGUpO1xuXG5cdFx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKHJoYXNoLCBcIlwiKTtcblxuXHRcdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRcdGlmICghcy5oYXNDb250ZW50KSB7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoY2FjaGVVUkwubGVuZ3RoKTtcblxuXHRcdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRcdGlmIChzLmRhdGEpIHtcblx0XHRcdFx0XHRjYWNoZVVSTCArPSAocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpID8gXCImXCIgOiBcIj9cIikgKyBzLmRhdGE7XG5cblx0XHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKHMuY2FjaGUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKHJhbnRpQ2FjaGUsIFwiJDFcIik7XG5cdFx0XHRcdFx0dW5jYWNoZWQgPSAocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpID8gXCImXCIgOiBcIj9cIikgKyBcIl89XCIgKyBub25jZSsrICsgdW5jYWNoZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdFx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHRcdH0gZWxzZSBpZiAocy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgKHMuY29udGVudFR5cGUgfHwgXCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSA9PT0gMCkge1xuXHRcdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZShyMjAsIFwiK1wiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdGlmIChzLmlmTW9kaWZpZWQpIHtcblx0XHRcdFx0aWYgKGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdKSB7XG5cdFx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoalF1ZXJ5LmV0YWdbY2FjaGVVUkxdKSB7XG5cdFx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbY2FjaGVVUkxdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRcdGlmIChzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUpIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBzLmRhdGFUeXBlc1swXSAmJiBzLmFjY2VwdHNbcy5kYXRhVHlwZXNbMF1dID8gcy5hY2NlcHRzW3MuZGF0YVR5cGVzWzBdXSArIChzLmRhdGFUeXBlc1swXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIpIDogcy5hY2NlcHRzW1wiKlwiXSk7XG5cblx0XHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdFx0Zm9yIChpIGluIHMuaGVhZGVycykge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKGksIHMuaGVhZGVyc1tpXSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRcdGlmIChzLmJlZm9yZVNlbmQgJiYgKHMuYmVmb3JlU2VuZC5jYWxsKGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMpID09PSBmYWxzZSB8fCBjb21wbGV0ZWQpKSB7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKHMuY29tcGxldGUpO1xuXHRcdFx0anFYSFIuZG9uZShzLnN1Y2Nlc3MpO1xuXHRcdFx0anFYSFIuZmFpbChzLmVycm9yKTtcblxuXHRcdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHModHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIpO1xuXG5cdFx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRcdGlmICghdHJhbnNwb3J0KSB7XG5cdFx0XHRcdGRvbmUoLTEsIFwiTm8gVHJhbnNwb3J0XCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdFx0aWYgKGZpcmVHbG9iYWxzKSB7XG5cdFx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoXCJhamF4U2VuZFwiLCBbanFYSFIsIHNdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRcdGlmIChzLmFzeW5jICYmIHMudGltZW91dCA+IDApIHtcblx0XHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRqcVhIUi5hYm9ydChcInRpbWVvdXRcIik7XG5cdFx0XHRcdFx0fSwgcy50aW1lb3V0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0dHJhbnNwb3J0LnNlbmQocmVxdWVzdEhlYWRlcnMsIGRvbmUpO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cblx0XHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0aWYgKGNvbXBsZXRlZCkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0XHRkb25lKC0xLCBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRcdGZ1bmN0aW9uIGRvbmUoc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMpIHtcblx0XHRcdFx0dmFyIGlzU3VjY2Vzcyxcblx0XHRcdFx0ICAgIHN1Y2Nlc3MsXG5cdFx0XHRcdCAgICBlcnJvcixcblx0XHRcdFx0ICAgIHJlc3BvbnNlLFxuXHRcdFx0XHQgICAgbW9kaWZpZWQsXG5cdFx0XHRcdCAgICBzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRcdGlmICh0aW1lb3V0VGltZXIpIHtcblx0XHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRUaW1lcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0XHRpZiAocmVzcG9uc2VzKSB7XG5cdFx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKHMsIGpxWEhSLCByZXNwb25zZXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzKTtcblxuXHRcdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0XHRpZiAoaXNTdWNjZXNzKSB7XG5cblx0XHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRcdGlmIChzLmlmTW9kaWZpZWQpIHtcblx0XHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKG1vZGlmaWVkKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKTtcblx0XHRcdFx0XHRcdGlmIChtb2RpZmllZCkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1tjYWNoZVVSTF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdFx0aWYgKHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIpIHtcblx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHN0YXR1cyA9PT0gMzA0KSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdFx0aWYgKHN0YXR1cyB8fCAhc3RhdHVzVGV4dCkge1xuXHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRcdGlmIChzdGF0dXMgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCkgKyBcIlwiO1xuXG5cdFx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdFx0aWYgKGlzU3VjY2Vzcykge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKGNhbGxiYWNrQ29udGV4dCwgW3N1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aChjYWxsYmFja0NvbnRleHQsIFtqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3JdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoX3N0YXR1c0NvZGUpO1xuXHRcdFx0XHRfc3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRpZiAoZmlyZUdsb2JhbHMpIHtcblx0XHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlcihpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLCBbanFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvcl0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aChjYWxsYmFja0NvbnRleHQsIFtqcVhIUiwgc3RhdHVzVGV4dF0pO1xuXG5cdFx0XHRcdGlmIChmaXJlR2xvYmFscykge1xuXHRcdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKFwiYWpheENvbXBsZXRlXCIsIFtqcVhIUiwgc10pO1xuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdFx0aWYgKCEgLS1qUXVlcnkuYWN0aXZlKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fSxcblxuXHRcdGdldEpTT046IGZ1bmN0aW9uIGdldEpTT04odXJsLCBkYXRhLCBjYWxsYmFjaykge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5nZXQodXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIpO1xuXHRcdH0sXG5cblx0XHRnZXRTY3JpcHQ6IGZ1bmN0aW9uIGdldFNjcmlwdCh1cmwsIGNhbGxiYWNrKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdldCh1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIpO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1wiZ2V0XCIsIFwicG9zdFwiXSwgZnVuY3Rpb24gKGksIG1ldGhvZCkge1xuXHRcdGpRdWVyeVttZXRob2RdID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUpIHtcblxuXHRcdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihkYXRhKSkge1xuXHRcdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRcdHJldHVybiBqUXVlcnkuYWpheChqUXVlcnkuZXh0ZW5kKHtcblx0XHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCh1cmwpICYmIHVybCkpO1xuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uICh1cmwpIHtcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdFx0dHlwZTogXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdFx0Y2FjaGU6IHRydWUsXG5cdFx0XHRhc3luYzogZmFsc2UsXG5cdFx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHRcdH0pO1xuXHR9O1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdHdyYXBBbGw6IGZ1bmN0aW9uIHdyYXBBbGwoaHRtbCkge1xuXHRcdFx0dmFyIHdyYXA7XG5cblx0XHRcdGlmICh0aGlzWzBdKSB7XG5cdFx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihodG1sKSkge1xuXHRcdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwodGhpc1swXSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0XHR3cmFwID0galF1ZXJ5KGh0bWwsIHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUodHJ1ZSk7XG5cblx0XHRcdFx0aWYgKHRoaXNbMF0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0d3JhcC5tYXAoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHRcdHdoaWxlIChlbGVtLmZpcnN0RWxlbWVudENoaWxkKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdFx0fSkuYXBwZW5kKHRoaXMpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0d3JhcElubmVyOiBmdW5jdGlvbiB3cmFwSW5uZXIoaHRtbCkge1xuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGh0bWwpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0XHRqUXVlcnkodGhpcykud3JhcElubmVyKGh0bWwuY2FsbCh0aGlzLCBpKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkodGhpcyksXG5cdFx0XHRcdCAgICBjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0XHRpZiAoY29udGVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0Y29udGVudHMud3JhcEFsbChodG1sKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmFwcGVuZChodG1sKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdHdyYXA6IGZ1bmN0aW9uIHdyYXAoaHRtbCkge1xuXHRcdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbihodG1sKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykud3JhcEFsbChpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0dW53cmFwOiBmdW5jdGlvbiB1bndyYXAoc2VsZWN0b3IpIHtcblx0XHRcdHRoaXMucGFyZW50KHNlbGVjdG9yKS5ub3QoXCJib2R5XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoZWxlbSk7XG5cdH07XG5cdGpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0cmV0dXJuICEhKGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCk7XG5cdH07XG5cblx0alF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fTtcblxuXHR2YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0ICAgIHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cblx0c3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQ7XG5cdHN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdFx0dmFyIF9jYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHRcdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0XHRpZiAoc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbikge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c2VuZDogZnVuY3Rpb24gc2VuZChoZWFkZXJzLCBjb21wbGV0ZSkge1xuXHRcdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdCAgICB4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdFx0eGhyLm9wZW4ob3B0aW9ucy50eXBlLCBvcHRpb25zLnVybCwgb3B0aW9ucy5hc3luYywgb3B0aW9ucy51c2VybmFtZSwgb3B0aW9ucy5wYXNzd29yZCk7XG5cblx0XHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMueGhyRmllbGRzKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGkgaW4gb3B0aW9ucy54aHJGaWVsZHMpIHtcblx0XHRcdFx0XHRcdFx0eGhyW2ldID0gb3B0aW9ucy54aHJGaWVsZHNbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShvcHRpb25zLm1pbWVUeXBlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0pIHtcblx0XHRcdFx0XHRcdGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdFx0Zm9yIChpIGluIGhlYWRlcnMpIHtcblx0XHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIGhlYWRlcnNbaV0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdFx0X2NhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sodHlwZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0aWYgKF9jYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdF9jYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGUgPT09IFwiYWJvcnRcIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSBcImVycm9yXCIpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKDAsIFwiZXJyb3JcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKHhoclN1Y2Nlc3NTdGF0dXNbeGhyLnN0YXR1c10gfHwgeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIpICE9PSBcInRleHRcIiB8fCB0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/IHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6IHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LCB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHRcdHhoci5vbmxvYWQgPSBfY2FsbGJhY2soKTtcblx0XHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBfY2FsbGJhY2soXCJlcnJvclwiKTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRcdGlmICh4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoX2NhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdFx0X2NhbGxiYWNrID0gX2NhbGxiYWNrKFwiYWJvcnRcIik7XG5cblx0XHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0XHR4aHIuc2VuZChvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblxuXHRcdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRcdGlmIChfY2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuXHRcdFx0XHRcdGlmIChfY2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdF9jYWxsYmFjaygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5cdGpRdWVyeS5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG5cdFx0aWYgKHMuY3Jvc3NEb21haW4pIHtcblx0XHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxuXHRqUXVlcnkuYWpheFNldHVwKHtcblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArIFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0XHR9LFxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHRcdH0sXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiB0ZXh0U2NyaXB0KHRleHQpIHtcblx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwodGV4dCk7XG5cdFx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxuXHRqUXVlcnkuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLCBmdW5jdGlvbiAocykge1xuXHRcdGlmIChzLmNhY2hlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKHMuY3Jvc3NEb21haW4pIHtcblx0XHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcblx0alF1ZXJ5LmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIiwgZnVuY3Rpb24gKHMpIHtcblxuXHRcdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0XHRpZiAocy5jcm9zc0RvbWFpbikge1xuXHRcdFx0dmFyIHNjcmlwdCwgX2NhbGxiYWNrMjtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHNlbmQ6IGZ1bmN0aW9uIHNlbmQoXywgY29tcGxldGUpIHtcblx0XHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoXCI8c2NyaXB0PlwiKS5wcm9wKHtcblx0XHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0XHR9KS5vbihcImxvYWQgZXJyb3JcIiwgX2NhbGxiYWNrMiA9IGZ1bmN0aW9uIGNhbGxiYWNrKGV2dCkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0X2NhbGxiYWNrMiA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoZXZ0KSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0WzBdKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuXHRcdFx0XHRcdGlmIChfY2FsbGJhY2syKSB7XG5cdFx0XHRcdFx0XHRfY2FsbGJhY2syKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHQgICAgcmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuXHQvLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5cdGpRdWVyeS5hamF4U2V0dXAoe1xuXHRcdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdFx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24ganNvbnBDYWxsYmFjaygpIHtcblx0XHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgbm9uY2UrKztcblx0XHRcdHRoaXNbY2FsbGJhY2tdID0gdHJ1ZTtcblx0XHRcdHJldHVybiBjYWxsYmFjaztcblx0XHR9XG5cdH0pO1xuXG5cdC8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xuXHRqUXVlcnkuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIiwgZnVuY3Rpb24gKHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSKSB7XG5cblx0XHR2YXIgY2FsbGJhY2tOYW1lLFxuXHRcdCAgICBvdmVyd3JpdHRlbixcblx0XHQgICAgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0ICAgIGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKHJqc29ucC50ZXN0KHMudXJsKSA/IFwidXJsXCIgOiB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmIChzLmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgPT09IDAgJiYgcmpzb25wLnRlc3Qocy5kYXRhKSAmJiBcImRhdGFcIik7XG5cblx0XHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdFx0aWYgKGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWzBdID09PSBcImpzb25wXCIpIHtcblxuXHRcdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24ocy5qc29ucENhbGxiYWNrKSA/IHMuanNvbnBDYWxsYmFjaygpIDogcy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0XHRpZiAoanNvblByb3ApIHtcblx0XHRcdFx0c1tqc29uUHJvcF0gPSBzW2pzb25Qcm9wXS5yZXBsYWNlKHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lKTtcblx0XHRcdH0gZWxzZSBpZiAocy5qc29ucCAhPT0gZmFsc2UpIHtcblx0XHRcdFx0cy51cmwgKz0gKHJxdWVyeS50ZXN0KHMudXJsKSA/IFwiJlwiIDogXCI/XCIpICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0XHRzLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKCFyZXNwb25zZUNvbnRhaW5lcikge1xuXHRcdFx0XHRcdGpRdWVyeS5lcnJvcihjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbMF07XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0XHRzLmRhdGFUeXBlc1swXSA9IFwianNvblwiO1xuXG5cdFx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1tjYWxsYmFja05hbWVdO1xuXHRcdFx0d2luZG93W2NhbGxiYWNrTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0XHRqcVhIUi5hbHdheXMoZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0XHRpZiAob3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGpRdWVyeSh3aW5kb3cpLnJlbW92ZVByb3AoY2FsbGJhY2tOYW1lKTtcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2luZG93W2NhbGxiYWNrTmFtZV0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRcdGlmIChzW2NhbGxiYWNrTmFtZV0pIHtcblxuXHRcdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaChjYWxsYmFja05hbWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRcdGlmIChyZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbihvdmVyd3JpdHRlbikpIHtcblx0XHRcdFx0XHRvdmVyd3JpdHRlbihyZXNwb25zZUNvbnRhaW5lclswXSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG5cdC8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcblx0Ly8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG5cdC8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cblx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuXHRzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5O1xuXHRcdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRcdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xuXHR9KCk7XG5cblx0Ly8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG5cdC8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcblx0Ly8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0Ly8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xuXHRqUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzKSB7XG5cdFx0aWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIpIHtcblx0XHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRcdGNvbnRleHQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdFx0aWYgKCFjb250ZXh0KSB7XG5cblx0XHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRcdGlmIChzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCkge1xuXHRcdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpO1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKTtcblx0XHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKGJhc2UpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyhkYXRhKTtcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdFx0Ly8gU2luZ2xlIHRhZ1xuXHRcdGlmIChwYXJzZWQpIHtcblx0XHRcdHJldHVybiBbY29udGV4dC5jcmVhdGVFbGVtZW50KHBhcnNlZFsxXSldO1xuXHRcdH1cblxuXHRcdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoW2RhdGFdLCBjb250ZXh0LCBzY3JpcHRzKTtcblxuXHRcdGlmIChzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHRqUXVlcnkoc2NyaXB0cykucmVtb3ZlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZShbXSwgcGFyc2VkLmNoaWxkTm9kZXMpO1xuXHR9O1xuXG5cdC8qKlxuICAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAgKi9cblx0alF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiAodXJsLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG5cdFx0dmFyIHNlbGVjdG9yLFxuXHRcdCAgICB0eXBlLFxuXHRcdCAgICByZXNwb25zZSxcblx0XHQgICAgc2VsZiA9IHRoaXMsXG5cdFx0ICAgIG9mZiA9IHVybC5pbmRleE9mKFwiIFwiKTtcblxuXHRcdGlmIChvZmYgPiAtMSkge1xuXHRcdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKHVybC5zbGljZShvZmYpKTtcblx0XHRcdHVybCA9IHVybC5zbGljZSgwLCBvZmYpO1xuXHRcdH1cblxuXHRcdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihwYXJhbXMpKSB7XG5cblx0XHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHRcdH0gZWxzZSBpZiAocGFyYW1zICYmICh0eXBlb2YgcGFyYW1zID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YocGFyYW1zKSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRcdGlmIChzZWxmLmxlbmd0aCA+IDApIHtcblx0XHRcdGpRdWVyeS5hamF4KHtcblx0XHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0XHR9KS5kb25lKGZ1bmN0aW9uIChyZXNwb25zZVRleHQpIHtcblxuXHRcdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0c2VsZi5odG1sKHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZChqUXVlcnkucGFyc2VIVE1MKHJlc3BvbnNlVGV4dCkpLmZpbmQoc2VsZWN0b3IpIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQpO1xuXG5cdFx0XHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdFx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0XHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHRcdH0pLmFsd2F5cyhjYWxsYmFjayAmJiBmdW5jdGlvbiAoanFYSFIsIHN0YXR1cykge1xuXHRcdFx0XHRzZWxmLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmFwcGx5KHRoaXMsIHJlc3BvbnNlIHx8IFtqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFJdKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xuXHRqUXVlcnkuZWFjaChbXCJhamF4U3RhcnRcIiwgXCJhamF4U3RvcFwiLCBcImFqYXhDb21wbGV0ZVwiLCBcImFqYXhFcnJvclwiLCBcImFqYXhTdWNjZXNzXCIsIFwiYWpheFNlbmRcIl0sIGZ1bmN0aW9uIChpLCB0eXBlKSB7XG5cdFx0alF1ZXJ5LmZuW3R5cGVdID0gZnVuY3Rpb24gKGZuKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbih0eXBlLCBmbik7XG5cdFx0fTtcblx0fSk7XG5cblx0alF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uIChmbikge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdFx0fSkubGVuZ3RoO1xuXHR9O1xuXG5cdGpRdWVyeS5vZmZzZXQgPSB7XG5cdFx0c2V0T2Zmc2V0OiBmdW5jdGlvbiBzZXRPZmZzZXQoZWxlbSwgb3B0aW9ucywgaSkge1xuXHRcdFx0dmFyIGN1clBvc2l0aW9uLFxuXHRcdFx0ICAgIGN1ckxlZnQsXG5cdFx0XHQgICAgY3VyQ1NTVG9wLFxuXHRcdFx0ICAgIGN1clRvcCxcblx0XHRcdCAgICBjdXJPZmZzZXQsXG5cdFx0XHQgICAgY3VyQ1NTTGVmdCxcblx0XHRcdCAgICBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdCAgICBwb3NpdGlvbiA9IGpRdWVyeS5jc3MoZWxlbSwgXCJwb3NpdGlvblwiKSxcblx0XHRcdCAgICBjdXJFbGVtID0galF1ZXJ5KGVsZW0pLFxuXHRcdFx0ICAgIHByb3BzID0ge307XG5cblx0XHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRcdGlmIChwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIikge1xuXHRcdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdFx0fVxuXG5cdFx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyhlbGVtLCBcInRvcFwiKTtcblx0XHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKGVsZW0sIFwibGVmdFwiKTtcblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIikgJiYgKGN1ckNTU1RvcCArIGN1ckNTU0xlZnQpLmluZGV4T2YoXCJhdXRvXCIpID4gLTE7XG5cblx0XHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRcdGlmIChjYWxjdWxhdGVQb3NpdGlvbikge1xuXHRcdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoY3VyQ1NTVG9wKSB8fCAwO1xuXHRcdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdChjdXJDU1NMZWZ0KSB8fCAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcblxuXHRcdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbChlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKHt9LCBjdXJPZmZzZXQpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdGlvbnMudG9wICE9IG51bGwpIHtcblx0XHRcdFx0cHJvcHMudG9wID0gb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICsgY3VyVG9wO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9wdGlvbnMubGVmdCAhPSBudWxsKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgPSBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCArIGN1ckxlZnQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChcInVzaW5nXCIgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoZWxlbSwgcHJvcHMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VyRWxlbS5jc3MocHJvcHMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChvcHRpb25zKSB7XG5cblx0XHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQodGhpcywgb3B0aW9ucywgaSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZG9jLFxuXHRcdFx0ICAgIGRvY0VsZW0sXG5cdFx0XHQgICAgcmVjdCxcblx0XHRcdCAgICB3aW4sXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF07XG5cblx0XHRcdGlmICghZWxlbSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRcdGlmICghZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHRcdH1cblxuXHRcdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2luID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0cG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuXHRcdFx0aWYgKCF0aGlzWzBdKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldFBhcmVudCxcblx0XHRcdCAgICBvZmZzZXQsXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF0sXG5cdFx0XHQgICAgcGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdFx0aWYgKGpRdWVyeS5jc3MoZWxlbSwgXCJwb3NpdGlvblwiKSA9PT0gXCJmaXhlZFwiKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0XHRpZiAoIW5vZGVOYW1lKG9mZnNldFBhcmVudFswXSwgXCJodG1sXCIpKSB7XG5cdFx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IHtcblx0XHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKG9mZnNldFBhcmVudFswXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlKSxcblx0XHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3Mob2Zmc2V0UGFyZW50WzBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlKVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyhlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlKSxcblx0XHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUpXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0XHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdFx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdFx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHRcdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0XHQvL1xuXHRcdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHRcdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHRcdC8vXG5cdFx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0XHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uIG9mZnNldFBhcmVudCgpIHtcblx0XHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0XHR3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3Mob2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIpID09PSBcInN0YXRpY1wiKSB7XG5cdFx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcblx0alF1ZXJ5LmVhY2goeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uIChtZXRob2QsIHByb3ApIHtcblx0XHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdFx0alF1ZXJ5LmZuW21ldGhvZF0gPSBmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRyZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uIChlbGVtLCBtZXRob2QsIHZhbCkge1xuXG5cdFx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0XHR2YXIgd2luO1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cdFx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdFx0fSBlbHNlIGlmIChlbGVtLm5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bcHJvcF0gOiBlbGVtW21ldGhvZF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAod2luKSB7XG5cdFx0XHRcdFx0d2luLnNjcm9sbFRvKCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsIHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbVttZXRob2RdID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCk7XG5cdFx0fTtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuXHQvLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuXHQvLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcblx0Ly8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcblx0Ly8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcblx0Ly8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcblx0alF1ZXJ5LmVhY2goW1widG9wXCIsIFwibGVmdFwiXSwgZnVuY3Rpb24gKGksIHByb3ApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbcHJvcF0gPSBhZGRHZXRIb29rSWYoc3VwcG9ydC5waXhlbFBvc2l0aW9uLCBmdW5jdGlvbiAoZWxlbSwgY29tcHV0ZWQpIHtcblx0XHRcdGlmIChjb21wdXRlZCkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyhlbGVtLCBwcm9wKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KGNvbXB1dGVkKSA/IGpRdWVyeShlbGVtKS5wb3NpdGlvbigpW3Byb3BdICsgXCJweFwiIDogY29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cdC8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xuXHRqUXVlcnkuZWFjaCh7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiAobmFtZSwgdHlwZSkge1xuXHRcdGpRdWVyeS5lYWNoKHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LCBmdW5jdGlvbiAoZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSkge1xuXG5cdFx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRcdGpRdWVyeS5mbltmdW5jTmFtZV0gPSBmdW5jdGlvbiAobWFyZ2luLCB2YWx1ZSkge1xuXHRcdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiKSxcblx0XHRcdFx0ICAgIGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8IChtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIik7XG5cblx0XHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBmdW5jdGlvbiAoZWxlbSwgdHlwZSwgdmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdFx0aWYgKGpRdWVyeS5pc1dpbmRvdyhlbGVtKSkge1xuXG5cdFx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoXCJvdXRlclwiKSA9PT0gMCA/IGVsZW1bXCJpbm5lclwiICsgbmFtZV0gOiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiICsgbmFtZV07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoZWxlbS5ib2R5W1wic2Nyb2xsXCIgKyBuYW1lXSwgZG9jW1wic2Nyb2xsXCIgKyBuYW1lXSwgZWxlbS5ib2R5W1wib2Zmc2V0XCIgKyBuYW1lXSwgZG9jW1wib2Zmc2V0XCIgKyBuYW1lXSwgZG9jW1wiY2xpZW50XCIgKyBuYW1lXSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoZWxlbSwgdHlwZSwgZXh0cmEpIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhKTtcblx0XHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUpO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cblx0XHRiaW5kOiBmdW5jdGlvbiBiaW5kKHR5cGVzLCBkYXRhLCBmbikge1xuXHRcdFx0cmV0dXJuIHRoaXMub24odHlwZXMsIG51bGwsIGRhdGEsIGZuKTtcblx0XHR9LFxuXHRcdHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKHR5cGVzLCBmbikge1xuXHRcdFx0cmV0dXJuIHRoaXMub2ZmKHR5cGVzLCBudWxsLCBmbik7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlOiBmdW5jdGlvbiBkZWxlZ2F0ZShzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbih0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuKTtcblx0XHR9LFxuXHRcdHVuZGVsZWdhdGU6IGZ1bmN0aW9uIHVuZGVsZWdhdGUoc2VsZWN0b3IsIHR5cGVzLCBmbikge1xuXG5cdFx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHRoaXMub2ZmKHNlbGVjdG9yLCBcIioqXCIpIDogdGhpcy5vZmYodHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4pO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uIChob2xkKSB7XG5cdFx0aWYgKGhvbGQpIHtcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnJlYWR5KHRydWUpO1xuXHRcdH1cblx0fTtcblx0alF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXHRqUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcblx0alF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cblx0Ly8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG5cdC8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcblx0Ly8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG5cdC8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcblx0Ly8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG5cdC8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuXHQvLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cblx0Ly8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcblx0Ly8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuXHQvLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cblx0aWYgKHRydWUpIHtcblx0XHQhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeTtcblx0XHR9KS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuXHR9XG5cblx0dmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxuXHRqUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uIChkZWVwKSB7XG5cdFx0aWYgKHdpbmRvdy4kID09PSBqUXVlcnkpIHtcblx0XHRcdHdpbmRvdy4kID0gXyQ7XG5cdFx0fVxuXG5cdFx0aWYgKGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5KSB7XG5cdFx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9O1xuXG5cdC8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG5cdC8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcblx0Ly8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuXHRpZiAoIW5vR2xvYmFsKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn0pO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oOTEpKG1vZHVsZSkpKVxuXG4vKioqLyB9KSxcbi8qIDkxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24gKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG5cbi8qKiovIH0pLFxuLyogOTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzO1xufSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICgodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG5cbi8qKiovIH0pLFxuLyogOTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSAhX193ZWJwYWNrX3JlcXVpcmVfXyg2KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX3JlcXVpcmVfXyg2MykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gNztcbiAgICB9IH0pLmEgIT0gNztcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDk0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbi8qKiovIH0pLFxuLyogOTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xudmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xudmFyIGFycmF5SW5kZXhPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNTApKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IF9fd2VicGFja19yZXF1aXJlX18oNjUpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSB7XG4gICAgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1yZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqKi8gfSksXG4vKiA5NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZFAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBnZXRLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICB9cmV0dXJuIE87XG59O1xuXG4vKioqLyB9KSxcbi8qIDk3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xudmFyIGdPUE4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9ICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih3aW5kb3cpKSA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIGdldFdpbmRvd05hbWVzKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDk4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG5cbnZhciBnZXRLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG52YXIgZ09QUyA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpO1xudmFyIHBJRSA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbnZhciBJT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICBCW2tdID0gaztcbiAgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9cmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxuLyoqKi8gfSksXG4vKiA5OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGludm9rZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTAwKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiBjb25zdHJ1Y3QoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH1yZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiBib3VuZCgpIC8qIGFyZ3MuLi4gKi97XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG5cbi8qKiovIH0pLFxuLyogMTAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1biA/IGZuKCkgOiBmbi5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuID8gZm4oYXJnc1swXSkgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSkgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSkgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSkgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgICAgICAgICAgfXJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkcGFyc2VJbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLnBhcnNlSW50O1xudmFyICR0cmltID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MykudHJpbTtcbnZhciB3cyA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCByYWRpeCA+Pj4gMCB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG5cbi8qKiovIH0pLFxuLyogMTAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkcGFyc2VGbG9hdCA9IF9fd2VicGFja19yZXF1aXJlX18oMikucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KF9fd2VicGFja19yZXF1aXJlX18oNjkpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG5cbi8qKiovIH0pLFxuLyogMTAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG5cbi8qKiovIH0pLFxuLyogMTA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG5cbi8qKiovIH0pLFxuLyogMTA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEwNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mik7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiByb3VuZFRpZXNUb0V2ZW4obikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEwNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gICAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogMTA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgaXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgfXJldHVybiBtZW1vO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcblxuXG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07ZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9cmV0dXJuIE87XG59O1xuXG4vKioqLyB9KSxcbi8qIDExMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcblxuLyoqKi8gfSksXG4vKiAxMTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKF9fd2VicGFja19yZXF1aXJlX18oNikgJiYgLy4vZy5mbGFncyAhPSAnZycpIF9fd2VicGFja19yZXF1aXJlX18oNykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogMTEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Nyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzdHJvbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNSk7XG52YXIgdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcblxuLyoqKi8gfSksXG4vKiAxMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGRQID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KS5mO1xudmFyIGNyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xudmFyIHJlZGVmaW5lQWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG52YXIgY3R4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG52YXIgYW5JbnN0YW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpO1xudmFyIGZvck9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG52YXIgJGl0ZXJEZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1KTtcbnZhciBzdGVwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTApO1xudmFyIHNldFNwZWNpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG52YXIgZmFzdEtleSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiBnZXRFbnRyeSh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiBnZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7IC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH1yZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSB7XG4gICAgICAgICAgICBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uIGRlZih0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfXJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7IC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7IC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIHtcbiAgICAgICAgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgfSAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogMTE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzdHJvbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNSk7XG52YXIgdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuXG4vKioqLyB9KSxcbi8qIDExNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpKDApO1xudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG52YXIgbWV0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xudmFyIGFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oOTgpO1xudmFyIHdlYWsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOCk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciB2YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIHRtcCA9IHt9O1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIHdyYXBwZXIoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OCkoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNztcbn0pKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH1yZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKioqLyB9KSxcbi8qIDExOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgcmVkZWZpbmVBbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcbnZhciBnZXRXZWFrID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGFuSW5zdGFuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcbnZhciBmb3JPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG52YXIgJGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xudmFyIHZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uIFVuY2F1Z2h0RnJvemVuU3RvcmUoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiBmaW5kVW5jYXVnaHRGcm96ZW4oc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO2Vsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiBnZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiBkZWYodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7ZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG5cbi8qKiovIH0pLFxuLyogMTE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xudmFyIGdPUFMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgUmVmbGVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMikuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcblxudmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKTtcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIGN0eCA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuXG4vKioqLyB9KSxcbi8qIDEyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbnZhciByZXBlYXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKTtcbnZhciBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZ2V0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xudmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xudmFyIGlzRW51bSA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfXJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDEyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xudmFyIGZyb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBmb3JPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgfHwgeCAhPSB4XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgfHwgb3V0TG93ICE9IG91dExvd1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHx8IG91dEhpZ2ggIT0gb3V0SGlnaCkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEyNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX0JhY2tncm91bmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOCk7XG5cbnZhciBfQmFja2dyb3VuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CYWNrZ3JvdW5kKTtcblxudmFyIF9qcXVlcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9Db29raWVDb25zZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzMpO1xuXG52YXIgX0Nvb2tpZUNvbnNlbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29va2llQ29uc2VudCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTM1KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxMzYpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMzOCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbigwLCBfanF1ZXJ5Mi5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gIF9qcXVlcnkyLmRlZmF1bHQuc2Nyb2xsaWZ5KHtcbiAgICBzZWN0aW9uOiAnLnBhbmVsJyxcbiAgICBzZXRIZWlnaHRzOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBiZyA9IG5ldyBfQmFja2dyb3VuZDIuZGVmYXVsdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbm9rZXknKSk7XG4gIGJnLnN0YXJ0QW5pbWF0aW9uKCk7XG5cbiAgdmFyIG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjd29yay1wYW5lbCcpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGFuZWwtdG9nZ2xlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgbWVudS5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJyk7XG4gIH0pO1xuXG4gIG5ldyBfQ29va2llQ29uc2VudDIuZGVmYXVsdCgpLnNob3coKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIHNjcmlwdC5zcmMgPSAnLi9hc3NldHMvanMvcG9zdGNvb2tpZS5qcyc7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gIH0pO1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUG9pbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOSk7XG5cbnZhciBfUG9pbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9pbnQpO1xuXG52YXIgX1JlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMCk7XG5cbnZhciBfUmVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWN0KTtcblxudmFyIF9Db2xvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTMxKTtcblxudmFyIF9Db2xvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db2xvcik7XG5cbnZhciBfRGV2aWNlRGV0ZWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMik7XG5cbnZhciBfRGV2aWNlRGV0ZWN0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGV2aWNlRGV0ZWN0b3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQmFja2dyb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gY2FudmFzRWxlbWVudFxuICAgKiBAcGFyYW0ge3twb2ludENvdW50OiBOdW1iZXIsIHBvaW50U3BlZWQ6IE51bWJlcn19IGNvbmZpZ1xuICAgKi9cbiAgZnVuY3Rpb24gQmFja2dyb3VuZChjYW52YXNFbGVtZW50KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHsgcG9pbnRDb3VudDogNTAsIHBvaW50U3BlZWQ6IDUwIH07XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFja2dyb3VuZCk7XG5cbiAgICB0aGlzLnBvaW50U3BlZWQgPSBjb25maWcucG9pbnRTcGVlZDtcbiAgICB2YXIgdG90YWxQb2ludENvdW50ID0gX0RldmljZURldGVjdG9yMi5kZWZhdWx0LmlzTW9iaWxlKCkgPyBjb25maWcucG9pbnRDb3VudCAvIDMgOiBjb25maWcucG9pbnRDb3VudDtcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhc0VsZW1lbnQ7XG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLnJlY3QgPSBuZXcgX1JlY3QyLmRlZmF1bHQoMCwgMCwgcGFyc2VGbG9hdCh3aW5kb3cuaW5uZXJXaWR0aCksIHBhcnNlRmxvYXQod2luZG93LmlubmVySGVpZ2h0KSk7XG5cbiAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5yZWN0LldpZHRoKTtcbiAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMucmVjdC5IZWlnaHQpO1xuXG4gICAgdGhpcy5tYXhEaXN0YW5jZSA9IDI2MDtcblxuICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbFBvaW50Q291bnQ7IGkrKykge1xuICAgICAgdmFyIHBvcyA9IHRoaXMuZ2V0UmFuZG9tUG9zKHRydWUpO1xuXG4gICAgICB0aGlzLnBvaW50cy5wdXNoKHtcbiAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgIHZlbG9jaXR5OiB0aGlzLmdldFJhbmRvbVZlbG9jaXR5KHBvcyksXG4gICAgICAgIGNvbG9yOiBuZXcgX0NvbG9yMi5kZWZhdWx0KDIzMCwgMjMwLCAyMzAsIDEpLFxuICAgICAgICByOiAyLFxuICAgICAgICBwaGFzZTogTWF0aC5yYW5kb20oKSAqIDEwXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RGcmFtZSA9IERhdGUubm93KCk7XG4gICAgLy8gU3Vic2NyaWJlIGV2ZW50cy5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZXNpemUuYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLm1vdXNlUG9pbnQgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBvaW50c1swXSk7XG4gICAgdGhpcy5tb3VzZVBvaW50LmFscGhhID0gMDtcbiAgICB0aGlzLnBvaW50cy5wdXNoKHRoaXMubW91c2VQb2ludCk7XG5cbiAgICBpZiAoX0RldmljZURldGVjdG9yMi5kZWZhdWx0LmlzTW9iaWxlKCkgPT09IGZhbHNlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMubW91c2VQb2ludC52ZWxvY2l0eSA9IG5ldyBfUG9pbnQyLmRlZmF1bHQoMCwgMCk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5tb3VzZVBvaW50LnBvcyA9IG5ldyBfUG9pbnQyLmRlZmF1bHQoMCwgMCk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgX3RoaXMubW91c2VQb2ludC5wb3MuWCA9IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF90aGlzLm1vdXNlUG9pbnQucG9zLlkgPSBldmVudC5jbGllbnRZO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJhY2tncm91bmQsIFt7XG4gICAga2V5OiAnZ2V0UmFuZG9tUG9zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmFuZG9tUG9zKGFueXdoZXJlKSB7XG4gICAgICB2YXIgcG9pbnQgPSBuZXcgX1BvaW50Mi5kZWZhdWx0KE1hdGgucmFuZG9tKCkgKiB0aGlzLnJlY3Qud2lkdGgsIE1hdGgucmFuZG9tKCkgKiB0aGlzLnJlY3QuaGVpZ2h0KTtcbiAgICAgIGlmIChhbnl3aGVyZSkge1xuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogNCkgLSAxKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBwb2ludC54ID0gMDticmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHBvaW50LnggPSB0aGlzLnJlY3Qud2lkdGg7YnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBwb2ludC55ID0gMDticmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHBvaW50LnkgPSB0aGlzLnJlY3QuaGVpZ2h0O2JyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFJhbmRvbVZlbG9jaXR5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmFuZG9tVmVsb2NpdHkocG9pbnQpIHtcbiAgICAgIHZhciB2ZWwgPSBuZXcgX1BvaW50Mi5kZWZhdWx0KE1hdGgucmFuZG9tKCksIE1hdGgucmFuZG9tKCkpO1xuICAgICAgaWYgKCF0aGlzLnJlY3QuaW5zaWRlKHBvaW50LCAtMTApKSB7XG4gICAgICAgIHZlbC54ICo9IHBvaW50LnggPT09IDAgPyAxIDogLTE7XG4gICAgICAgIHZlbC55ICo9IHBvaW50LnkgPT09IDAgPyAxIDogLTE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2ZWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKGRlbHRhKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgLy8gVXBkYXRlIHBvc2l0aW9uIHdpdGggdmVsb2NpdHkgdGltZXMgZGVsdGEuXG4gICAgICAgIHBvaW50LnBvcy5YICs9IHBvaW50LnZlbG9jaXR5LlggLyBfdGhpczIucG9pbnRTcGVlZCAqIGRlbHRhO1xuICAgICAgICBwb2ludC5wb3MuWSArPSBwb2ludC52ZWxvY2l0eS5ZIC8gX3RoaXMyLnBvaW50U3BlZWQgKiBkZWx0YTtcblxuICAgICAgICBpZiAoIV90aGlzMi5yZWN0Lmluc2lkZShwb2ludC5wb3MsIDUwKSkge1xuICAgICAgICAgIC8vIFdoZW4gYSBwb2ludCBpcyBvdXRzaWRlIG9mIHRoZSBhY3R1YWwgY2FudmFzLCB3ZSBqdXN0IHJlc2V0IGl0cyBwb3NpdGlvblxuICAgICAgICAgIC8vIHRvIGEgcmFuZG9tIHBvc2l0aW9uICh3aGljaCBpcyBhdCBvbmUgb2YgdGhlIGVkZ2VzKSBhbmQgcHVzaCBpdCBpbiBhIHZlbG9jaXR5IHRvd2FyZHMgYSBnaXZlbiBkaXJlY3Rpb24uXG4gICAgICAgICAgcG9pbnQucG9zID0gX3RoaXMyLmdldFJhbmRvbVBvcygpO1xuICAgICAgICAgIHBvaW50LnZlbG9jaXR5ID0gX3RoaXMyLmdldFJhbmRvbVZlbG9jaXR5KHBvaW50LnBvcyk7XG4gICAgICAgICAgcG9pbnQucGhhc2UgPSBNYXRoLnJhbmRvbSgpICogMTA7XG4gICAgICAgIH1cblxuICAgICAgICBwb2ludC5waGFzZSArPSAwLjAwMztcbiAgICAgICAgcG9pbnQuY29sb3IuQWxwaGEgPSBNYXRoLmFicyhNYXRoLmNvcyhwb2ludC5waGFzZSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVzaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgdGhpcy5yZWN0LldpZHRoID0gcGFyc2VGbG9hdChkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoKTtcbiAgICAgIHRoaXMucmVjdC5IZWlnaHQgPSBwYXJzZUZsb2F0KHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5yZWN0LldpZHRoKTtcbiAgICAgIHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5yZWN0LkhlaWdodCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGZyYW1lRGVsdGFUaW1lID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdEZyYW1lO1xuICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCh0aGlzLnJlY3QuWCwgdGhpcy5yZWN0LlksIHRoaXMucmVjdC5XaWR0aCwgdGhpcy5yZWN0LkhlaWdodCk7XG4gICAgICB0aGlzLmRyYXdQb2ludHMoKTtcbiAgICAgIHRoaXMuZHJhd0xpbmVzKCk7XG4gICAgICB0aGlzLnVwZGF0ZShmcmFtZURlbHRhVGltZSk7XG4gICAgICB0aGlzLmxhc3RGcmFtZSA9IERhdGUubm93KCk7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMucmVuZGVyLmJpbmQodGhpcyksIDI1KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkcmF3UG9pbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1BvaW50cygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICBpZiAoIXBvaW50Lmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICB2YXIgcG9zID0gcG9pbnQucG9zO1xuICAgICAgICAgIF90aGlzMy5jb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKCcgKyBwb2ludC5jb2xvci5SZWQgKyAnLCAnICsgcG9pbnQuY29sb3IuR3JlZW4gKyAnLCAnICsgcG9pbnQuY29sb3IuQmx1ZSArICcsICcgKyBwb2ludC5jb2xvci5BbHBoYSArICcpJztcbiAgICAgICAgICBfdGhpczMuY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBfdGhpczMuY29udGV4dC5hcmMocG9zLlgsIHBvcy5ZLCBwb2ludC5yLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgICAgICAgX3RoaXMzLmNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgX3RoaXMzLmNvbnRleHQuZmlsbCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkcmF3TGluZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3TGluZXMoKSB7XG4gICAgICB2YXIgZnJhY3Rpb24gPSB2b2lkIDAsXG4gICAgICAgICAgYWxwaGEgPSB2b2lkIDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IHRoaXMucG9pbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzLnBvaW50c1tpXTtcbiAgICAgICAgICB2YXIgYiA9IHRoaXMucG9pbnRzW2pdO1xuXG4gICAgICAgICAgZnJhY3Rpb24gPSBNYXRoLnNxcnQoTWF0aC5wb3coYS5wb3MuWCAtIGIucG9zLlgsIDIpICsgTWF0aC5wb3coYS5wb3MuWSAtIGIucG9zLlksIDIpKSAvIHRoaXMubWF4RGlzdGFuY2U7XG4gICAgICAgICAgaWYgKGZyYWN0aW9uIDwgMSkge1xuICAgICAgICAgICAgYWxwaGEgPSAxLjAgLSBmcmFjdGlvbjtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDE1MCwgMTUwLCAxNTAsICcgKyBhbHBoYSArICcpJztcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5saW5lV2lkdGggPSAwLjg7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubW92ZVRvKGEucG9zLlgsIGEucG9zLlkpO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVUbyhiLnBvcy5YLCBiLnBvcy5ZKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW4gdGhlIGFuaW1hdGlvbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3RhcnRBbmltYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydEFuaW1hdGlvbigpIHtcbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYWNrZ3JvdW5kO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCYWNrZ3JvdW5kO1xuXG4vKioqLyB9KSxcbi8qIDEyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKi9cbiAgZnVuY3Rpb24gUG9pbnQoeCwgeSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb2ludCk7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9pbnQsIFt7XG4gICAga2V5OiBcIlhcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMueCA9IHZhbDtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMueDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiWVwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgdGhpcy55ID0gdmFsO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy55O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb2ludDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUG9pbnQ7XG5cbi8qKiovIH0pLFxuLyogMTMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBSZWN0ID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICovXG4gIGZ1bmN0aW9uIFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWN0KTtcblxuICAgIC8vIFRvcExlZnQgaXMgYWN0dWFsIGNvb3JkaW5hdGVzIG9mIHRoZSB0b3AtbGVmdCBwb3NpdGlvbi5cbiAgICAvLyBCb3RSaWdodCBpcyB0aGUgYWN0dWFsIGNvb3JkaW5hdGVzIHRvIHRoZSBib3R0b20tcmlnaHQgcG9zaXRpb24uXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZWN0LCBbe1xuICAgIGtleTogXCJpbnNpZGVcIixcblxuXG4gICAgLyoqXG4gICAgICogVGVzdCBpZiBhIGdpdmVuIHBvaW50IGlzIGluc2lkZSB0aGUgcmVjdC5cbiAgICAgKiBAcGFyYW0ge1BvaW50fSBwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhZFxuICAgICAqIEByZXR1cm4gYm9vbGVhblxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNpZGUocCwgcGFkKSB7XG4gICAgICByZXR1cm4gcC5YID4gdGhpcy54IC0gcGFkICYmIHAuWCA8IHRoaXMueCArIHRoaXMud2lkdGggKyBwYWQgJiYgcC5ZID4gdGhpcy55IC0gcGFkICYmIHAuWSA8IHRoaXMueSArIHRoaXMuaGVpZ2h0ICsgcGFkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJYXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy54O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICB0aGlzLnggPSB2YWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIllcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMueSA9IHZhbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2lkdGhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLndpZHRoO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICB0aGlzLndpZHRoID0gdmFsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJIZWlnaHRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmhlaWdodDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgdGhpcy5oZWlnaHQgPSB2YWw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlY3Q7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJlY3Q7XG5cbi8qKiovIH0pLFxuLyogMTMxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBDb2xvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29sb3IociwgZywgYiwgYSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvcik7XG5cbiAgICB0aGlzLnIgPSByO1xuICAgIHRoaXMuZyA9IGc7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmEgPSBhO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbG9yLCBbe1xuICAgIGtleTogXCJSZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnI7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMuciA9IHZhbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR3JlZW5cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmc7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMuZyA9IHZhbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQmx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgdGhpcy5iID0gdmFsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJBbHBoYVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgdGhpcy5hID0gdmFsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb2xvcjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29sb3I7XG5cbi8qKiovIH0pLFxuLyogMTMyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBEZXZpY2VEZXRlY3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRGV2aWNlRGV0ZWN0b3IoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERldmljZURldGVjdG9yKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEZXZpY2VEZXRlY3RvciwgbnVsbCwgW3tcbiAgICBrZXk6IFwiaXNNb2JpbGVcIixcblxuICAgIC8qKlxuICAgICAqIE5haXZlIGNoZWNrIGlmIGJyb3dzZXIgaXMgbW9iaWxlIGRldmljZS5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNNb2JpbGUoKSB7XG4gICAgICByZXR1cm4gKC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGV2aWNlRGV0ZWN0b3I7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IERldmljZURldGVjdG9yO1xuXG4vKioqLyB9KSxcbi8qIDEzMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX0Nvb2tpZVBhcnNlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTM0KTtcblxudmFyIF9Db29raWVQYXJzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29va2llUGFyc2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IGZ1bmN0aW9uIHN0ZXAoa2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsgc3RlcChcIm5leHRcIiwgdmFsdWUpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHN0ZXAoXCJ0aHJvd1wiLCBlcnIpOyB9KTsgfSB9IHJldHVybiBzdGVwKFwibmV4dFwiKTsgfSk7IH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBDbGFzcyB0byBoYW5kbGUgdGhlIGNvb2tpZSBjb25zZW50IG1lc3NhZ2UuXG4gKi9cbnZhciBDb29raWVDb25zZW50ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb29raWVDb25zZW50KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb29raWVDb25zZW50KTtcblxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5jb29raWVzJyk7XG4gIH1cblxuICAvKipcbiAgICogU2hvdyB0aGUgY29va2llIGNvbnNlbnQgZGlhbG9nLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhDb29raWVDb25zZW50LCBbe1xuICAgIGtleTogJ3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChfQ29va2llUGFyc2VyMi5kZWZhdWx0LmdldFZhbHVlKCdhY2NlcHQtY29va2llcycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSAnYWNjZXB0LWNvb2tpZXM9dHJ1ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNob3c7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gQ29va2llQ29uc2VudDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29va2llQ29uc2VudDtcblxuLyoqKi8gfSksXG4vKiAxMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIHBhcnNlIGNvb2tpZXMgZnJvbSB0aGUgbG9jYWwgcGFnZS5cbiAqIFVzZXMgZG9jdW1lbnQuY29va2llIHRvIGZldGNoIGNvb2tpZXMuXG4gKi9cbnZhciBDb29raWVQYXJzZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvb2tpZVBhcnNlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29va2llUGFyc2VyKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb29raWVQYXJzZXIsIG51bGwsIFt7XG4gICAga2V5OiAnZ2V0VmFsdWUnLFxuXG4gICAgLyoqXG4gICAgICogR2V0IHZhbHVlIGZyb20gYSBjb29raWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtudWxsfHN0cmluZ3xib29sfG51bWJlcn1cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUobmFtZSkge1xuICAgICAgdmFyIHBhcnNlZCA9IENvb2tpZVBhcnNlci5wYXJzZUNvb2tpZXMoKTtcbiAgICAgIGlmIChwYXJzZWRbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcGFyc2VkW25hbWVdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBwYWdlcyBjb29raWVzLlxuICAgICAqIEByZXR1cm4ge3tzdHJpbmc6IG5hbWUsIG1peGVkOiB2YWx1ZX19XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BhcnNlQ29va2llcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ29va2llcygpIHtcbiAgICAgIHZhciBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG4gICAgICB2YXIgZml4ZWQgPSB7fTtcbiAgICAgIHZhciBzcGwgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNwbCA9IGNvb2tpZXNbaV0udHJpbSgpLnNwbGl0KCc9Jyk7XG4gICAgICAgIGZpeGVkW3NwbFswXV0gPSBzcGxbMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaXhlZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29va2llUGFyc2VyO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb29raWVQYXJzZXI7XG5cbi8qKiovIH0pLFxuLyogMTM1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbi8qIVxyXG4gKiBqUXVlcnkgU2Nyb2xsaWZ5XHJcbiAqIFZlcnNpb24gMS4wLjE5XHJcbiAqXHJcbiAqIFJlcXVpcmVzOlxyXG4gKiAtIGpRdWVyeSAxLjcgb3IgaGlnaGVyXHJcbiAqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9sdWtlaGFhcy9TY3JvbGxpZnlcclxuICpcclxuICogQ29weXJpZ2h0IDIwMTYsIEx1a2UgSGFhc1xyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcblxyXG5cclxuXHJcbmlmIHRvdWNoU2Nyb2xsIGlzIGZhbHNlIC0gdXBkYXRlIGluZGV4XHJcblxyXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICh0cnVlKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKV0sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKGZ1bmN0aW9uICgkKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSgkLCBnbG9iYWwsIGdsb2JhbC5kb2N1bWVudCk7XG4gICAgfSkuYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobW9kdWxlKSkgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgLy8gTm9kZS9Db21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSwgZ2xvYmFsLCBnbG9iYWwuZG9jdW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGZhY3RvcnkoalF1ZXJ5LCBnbG9iYWwsIGdsb2JhbC5kb2N1bWVudCk7XG4gIH1cbn0pKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkLCBmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBoZWlnaHRzID0gW10sXG4gICAgICBuYW1lcyA9IFtdLFxuICAgICAgZWxlbWVudHMgPSBbXSxcbiAgICAgIG92ZXJmbG93ID0gW10sXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBjdXJyZW50SW5kZXggPSAwLFxuICAgICAgaW50ZXJzdGl0aWFsSW5kZXggPSAxLFxuICAgICAgaGFzTG9jYXRpb24gPSBmYWxzZSxcbiAgICAgIHRpbWVvdXRJZCxcbiAgICAgIHRpbWVvdXRJZDIsXG4gICAgICAkd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgcG9ydEhlaWdodCxcbiAgICAgIHRvcCA9ICR3aW5kb3cuc2Nyb2xsVG9wKCksXG4gICAgICBzY3JvbGxhYmxlID0gZmFsc2UsXG4gICAgICBsb2NrZWQgPSBmYWxzZSxcbiAgICAgIHNjcm9sbGVkID0gZmFsc2UsXG4gICAgICBtYW51YWxTY3JvbGwsXG4gICAgICBzd2lwZVNjcm9sbCxcbiAgICAgIHV0aWwsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgc2Nyb2xsU2FtcGxlcyA9IFtdLFxuICAgICAgc2Nyb2xsVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgZmlyc3RMb2FkID0gdHJ1ZSxcbiAgICAgIGluaXRpYWxpc2VkID0gZmFsc2UsXG4gICAgICBkZXN0aW5hdGlvbiA9IDAsXG4gICAgICB3aGVlbEV2ZW50ID0gJ29ud2hlZWwnIGluIGRvY3VtZW50ID8gJ3doZWVsJyA6IGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID8gJ21vdXNld2hlZWwnIDogJ0RPTU1vdXNlU2Nyb2xsJyxcbiAgICAgIHNldHRpbmdzID0ge1xuICAgIC8vc2VjdGlvbiBzaG91bGQgYmUgYW4gaWRlbnRpZmllciB0aGF0IGlzIHRoZSBzYW1lIGZvciBlYWNoIHNlY3Rpb25cbiAgICBzZWN0aW9uOiBcIi5zZWN0aW9uXCIsXG4gICAgc2VjdGlvbk5hbWU6IFwic2VjdGlvbi1uYW1lXCIsXG4gICAgaW50ZXJzdGl0aWFsU2VjdGlvbjogXCJcIixcbiAgICBlYXNpbmc6IFwiZWFzZU91dEV4cG9cIixcbiAgICBzY3JvbGxTcGVlZDogMTEwMCxcbiAgICBvZmZzZXQ6IDAsXG4gICAgc2Nyb2xsYmFyczogdHJ1ZSxcbiAgICB0YXJnZXQ6IFwiaHRtbCxib2R5XCIsXG4gICAgc3RhbmRhcmRTY3JvbGxFbGVtZW50czogZmFsc2UsXG4gICAgc2V0SGVpZ2h0czogdHJ1ZSxcbiAgICBvdmVyZmxvd1Njcm9sbDogdHJ1ZSxcbiAgICB1cGRhdGVIYXNoOiB0cnVlLFxuICAgIHRvdWNoU2Nyb2xsOiB0cnVlLFxuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlKCkge30sXG4gICAgYWZ0ZXI6IGZ1bmN0aW9uIGFmdGVyKCkge30sXG4gICAgYWZ0ZXJSZXNpemU6IGZ1bmN0aW9uIGFmdGVyUmVzaXplKCkge30sXG4gICAgYWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uIGFmdGVyUmVuZGVyKCkge31cbiAgfTtcbiAgZnVuY3Rpb24gZ2V0cG9ydEhlaWdodCgpIHtcbiAgICByZXR1cm4gJHdpbmRvdy5oZWlnaHQoKSArIHNldHRpbmdzLm9mZnNldDtcbiAgfVxuICBmdW5jdGlvbiBhbmltYXRlU2Nyb2xsKGluZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wKSB7XG4gICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgIGNhbGxiYWNrcyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAobmFtZXNbaW5kZXhdKSB7XG4gICAgICBzY3JvbGxhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoZmlyc3RMb2FkID09PSB0cnVlKSB7XG4gICAgICAgIHNldHRpbmdzLmFmdGVyUmVuZGVyKCk7XG4gICAgICAgIGZpcnN0TG9hZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmJlZm9yZSA9PSAnZnVuY3Rpb24nICYmIHNldHRpbmdzLmJlZm9yZShpbmRleCwgZWxlbWVudHMpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbnRlcnN0aXRpYWxJbmRleCA9IDE7XG4gICAgICBkZXN0aW5hdGlvbiA9IGhlaWdodHNbaW5kZXhdO1xuICAgICAgaWYgKGZpcnN0TG9hZCA9PT0gZmFsc2UgJiYgY3VycmVudEluZGV4ID4gaW5kZXggJiYgdG9Ub3AgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vV2UncmUgZ29pbmcgYmFja3dhcmRzXG4gICAgICAgIGlmIChvdmVyZmxvd1tpbmRleF0pIHtcbiAgICAgICAgICBwb3J0SGVpZ2h0ID0gZ2V0cG9ydEhlaWdodCgpO1xuXG4gICAgICAgICAgaW50ZXJzdGl0aWFsSW5kZXggPSBwYXJzZUludChlbGVtZW50c1tpbmRleF0ub3V0ZXJIZWlnaHQoKSAvIHBvcnRIZWlnaHQpO1xuXG4gICAgICAgICAgZGVzdGluYXRpb24gPSBwYXJzZUludChoZWlnaHRzW2luZGV4XSkgKyAoZWxlbWVudHNbaW5kZXhdLm91dGVySGVpZ2h0KCkgLSBwb3J0SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2V0dGluZ3MudXBkYXRlSGFzaCAmJiBzZXR0aW5ncy5zZWN0aW9uTmFtZSAmJiAhKGZpcnN0TG9hZCA9PT0gdHJ1ZSAmJiBpbmRleCA9PT0gMCkpIHtcbiAgICAgICAgaWYgKGhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIG5hbWVzW2luZGV4XSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNjcm9sbGlmeSB3YXJuaW5nOiBQYWdlIG11c3QgYmUgaG9zdGVkIHRvIG1hbmlwdWxhdGUgdGhlIGhhc2ggdmFsdWUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IG5hbWVzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgIGlmIChpbnN0YW50KSB7XG4gICAgICAgICQoc2V0dGluZ3MudGFyZ2V0KS5zdG9wKCkuc2Nyb2xsVG9wKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgIHNldHRpbmdzLmFmdGVyKGluZGV4LCBlbGVtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2tlZCA9IHRydWU7XG4gICAgICAgIGlmICgkKCkudmVsb2NpdHkpIHtcbiAgICAgICAgICAkKHNldHRpbmdzLnRhcmdldCkuc3RvcCgpLnZlbG9jaXR5KCdzY3JvbGwnLCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogc2V0dGluZ3Muc2Nyb2xsU3BlZWQsXG4gICAgICAgICAgICBlYXNpbmc6IHNldHRpbmdzLmVhc2luZyxcbiAgICAgICAgICAgIG9mZnNldDogZGVzdGluYXRpb24sXG4gICAgICAgICAgICBtb2JpbGVIQTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKHNldHRpbmdzLnRhcmdldCkuc3RvcCgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgc2Nyb2xsVG9wOiBkZXN0aW5hdGlvblxuICAgICAgICAgIH0sIHNldHRpbmdzLnNjcm9sbFNwZWVkLCBzZXR0aW5ncy5lYXNpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoLmxlbmd0aCAmJiBzZXR0aW5ncy5zZWN0aW9uTmFtZSAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoJCh3aW5kb3cubG9jYXRpb24uaGFzaCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNjcm9sbGlmeSB3YXJuaW5nOiBJRCBtYXRjaGVzIGhhc2ggdmFsdWUgLSB0aGlzIHdpbGwgY2F1c2UgdGhlIHBhZ2UgdG8gYW5jaG9yLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgICQoc2V0dGluZ3MudGFyZ2V0KS5wcm9taXNlKCkuZG9uZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgZmlyc3RMb2FkID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgc2V0dGluZ3MuYWZ0ZXIoaW5kZXgsIGVsZW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQWNjZWxlcmF0aW5nKHNhbXBsZXMpIHtcbiAgICBmdW5jdGlvbiBhdmVyYWdlKG51bSkge1xuICAgICAgdmFyIHN1bSA9IDA7XG5cbiAgICAgIHZhciBsYXN0RWxlbWVudHMgPSBzYW1wbGVzLnNsaWNlKE1hdGgubWF4KHNhbXBsZXMubGVuZ3RoIC0gbnVtLCAxKSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdEVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN1bSArPSBsYXN0RWxlbWVudHNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNYXRoLmNlaWwoc3VtIC8gbnVtKTtcbiAgICB9XG5cbiAgICB2YXIgYXZFbmQgPSBhdmVyYWdlKDEwKTtcbiAgICB2YXIgYXZNaWRkbGUgPSBhdmVyYWdlKDcwKTtcblxuICAgIGlmIChhdkVuZCA+PSBhdk1pZGRsZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgdmFyIHNjcm9sbGlmeSA9IGZ1bmN0aW9uIHNjcm9sbGlmeShvcHRpb25zKSB7XG4gICAgaW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgICQuZWFzaW5nWydlYXNlT3V0RXhwbyddID0gZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiB0ID09IGQgPyBiICsgYyA6IGMgKiAoLU1hdGgucG93KDIsIC0xMCAqIHQgLyBkKSArIDEpICsgYjtcbiAgICB9O1xuXG4gICAgbWFudWFsU2Nyb2xsID0ge1xuICAgICAgaGFuZGxlTW91c2Vkb3duOiBmdW5jdGlvbiBoYW5kbGVNb3VzZWRvd24oKSB7XG4gICAgICAgIGlmIChkaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHNjcm9sbGFibGUgPSBmYWxzZTtcbiAgICAgICAgc2Nyb2xsZWQgPSBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBoYW5kbGVNb3VzZXVwOiBmdW5jdGlvbiBoYW5kbGVNb3VzZXVwKCkge1xuICAgICAgICBpZiAoZGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzY3JvbGxhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHNjcm9sbGVkKSB7XG4gICAgICAgICAgLy9pbnN0YW50LGNhbGxiYWNrc1xuICAgICAgICAgIG1hbnVhbFNjcm9sbC5jYWxjdWxhdGVOZWFyZXN0KGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhhbmRsZVNjcm9sbDogZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKCkge1xuICAgICAgICBpZiAoZGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZW91dElkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzY3JvbGxlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKHNjcm9sbGFibGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNjcm9sbGFibGUgPSBmYWxzZTtcbiAgICAgICAgICAvL2luc3RhbnQsY2FsbGJhY2tzXG4gICAgICAgICAgbWFudWFsU2Nyb2xsLmNhbGN1bGF0ZU5lYXJlc3QoZmFsc2UsIHRydWUpO1xuICAgICAgICB9LCAyMDApO1xuICAgICAgfSxcbiAgICAgIGNhbGN1bGF0ZU5lYXJlc3Q6IGZ1bmN0aW9uIGNhbGN1bGF0ZU5lYXJlc3QoaW5zdGFudCwgY2FsbGJhY2tzKSB7XG4gICAgICAgIHRvcCA9ICR3aW5kb3cuc2Nyb2xsVG9wKCk7XG4gICAgICAgIHZhciBpID0gMSxcbiAgICAgICAgICAgIG1heCA9IGhlaWdodHMubGVuZ3RoLFxuICAgICAgICAgICAgY2xvc2VzdCA9IDAsXG4gICAgICAgICAgICBwcmV2ID0gTWF0aC5hYnMoaGVpZ2h0c1swXSAtIHRvcCksXG4gICAgICAgICAgICBkaWZmO1xuICAgICAgICBmb3IgKDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgICAgZGlmZiA9IE1hdGguYWJzKGhlaWdodHNbaV0gLSB0b3ApO1xuXG4gICAgICAgICAgaWYgKGRpZmYgPCBwcmV2KSB7XG4gICAgICAgICAgICBwcmV2ID0gZGlmZjtcbiAgICAgICAgICAgIGNsb3Nlc3QgPSBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYXRCb3R0b20oKSAmJiBjbG9zZXN0ID4gaW5kZXggfHwgYXRUb3AoKSkge1xuICAgICAgICAgIGluZGV4ID0gY2xvc2VzdDtcbiAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXG4gICAgICAgICAgYW5pbWF0ZVNjcm9sbChjbG9zZXN0LCBpbnN0YW50LCBjYWxsYmFja3MsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHdoZWVsSGFuZGxlcjogZnVuY3Rpb24gd2hlZWxIYW5kbGVyKGUpIHtcbiAgICAgICAgaWYgKGRpc2FibGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3Muc3RhbmRhcmRTY3JvbGxFbGVtZW50cykge1xuICAgICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyhzZXR0aW5ncy5zdGFuZGFyZFNjcm9sbEVsZW1lbnRzKSB8fCAkKGUudGFyZ2V0KS5jbG9zZXN0KHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghb3ZlcmZsb3dbaW5kZXhdKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50U2Nyb2xsVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgdmFyIHZhbHVlID0gZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGEgfHwgLWUub3JpZ2luYWxFdmVudC5kZWx0YVkgfHwgLWUub3JpZ2luYWxFdmVudC5kZXRhaWw7XG4gICAgICAgIHZhciBkZWx0YSA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCB2YWx1ZSkpO1xuXG4gICAgICAgIC8vZGVsdGEgPSBkZWx0YSB8fCAtZS5vcmlnaW5hbEV2ZW50LmRldGFpbCAvIDMgfHwgZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGEgLyAxMjA7XG5cbiAgICAgICAgaWYgKHNjcm9sbFNhbXBsZXMubGVuZ3RoID4gMTQ5KSB7XG4gICAgICAgICAgc2Nyb2xsU2FtcGxlcy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vc2Nyb2xsU2FtcGxlcy5wdXNoKE1hdGguYWJzKGRlbHRhKjEwKSk7XG4gICAgICAgIHNjcm9sbFNhbXBsZXMucHVzaChNYXRoLmFicyh2YWx1ZSkpO1xuXG4gICAgICAgIGlmIChjdXJyZW50U2Nyb2xsVGltZSAtIHNjcm9sbFRpbWUgPiAyMDApIHtcbiAgICAgICAgICBzY3JvbGxTYW1wbGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgc2Nyb2xsVGltZSA9IGN1cnJlbnRTY3JvbGxUaW1lO1xuXG4gICAgICAgIGlmIChsb2NrZWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICAgIGlmIChpbmRleCA8IGhlaWdodHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKGF0Qm90dG9tKCkpIHtcbiAgICAgICAgICAgICAgaWYgKGlzQWNjZWxlcmF0aW5nKHNjcm9sbFNhbXBsZXMpKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXG4gICAgICAgICAgICAgICAgYW5pbWF0ZVNjcm9sbChpbmRleCwgZmFsc2UsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVsdGEgPiAwKSB7XG4gICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgaWYgKGF0VG9wKCkpIHtcbiAgICAgICAgICAgICAgaWYgKGlzQWNjZWxlcmF0aW5nKHNjcm9sbFNhbXBsZXMpKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICAgICAgbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXG4gICAgICAgICAgICAgICAgYW5pbWF0ZVNjcm9sbChpbmRleCwgZmFsc2UsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBrZXlIYW5kbGVyOiBmdW5jdGlvbiBrZXlIYW5kbGVyKGUpIHtcbiAgICAgICAgaWYgKGRpc2FibGVkID09PSB0cnVlIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQucmVhZE9ubHkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2tlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5rZXlDb2RlID09IDM4IHx8IGUua2V5Q29kZSA9PSAzMykge1xuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIGlmIChhdFRvcCgpKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgLy9pbmRleCwgaW5zdGFudCwgY2FsbGJhY2tzLCB0b1RvcFxuICAgICAgICAgICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LCBmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gNDAgfHwgZS5rZXlDb2RlID09IDM0KSB7XG4gICAgICAgICAgaWYgKGluZGV4IDwgaGVpZ2h0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBpZiAoYXRCb3R0b20oKSkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgIC8vaW5kZXgsIGluc3RhbnQsIGNhbGxiYWNrcywgdG9Ub3BcbiAgICAgICAgICAgICAgYW5pbWF0ZVNjcm9sbChpbmRleCwgZmFsc2UsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBpZiAoc2V0dGluZ3Muc2Nyb2xsYmFycykge1xuICAgICAgICAgICR3aW5kb3cub24oJ21vdXNlZG93bicsIG1hbnVhbFNjcm9sbC5oYW5kbGVNb3VzZWRvd24pO1xuICAgICAgICAgICR3aW5kb3cub24oJ21vdXNldXAnLCBtYW51YWxTY3JvbGwuaGFuZGxlTW91c2V1cCk7XG4gICAgICAgICAgJHdpbmRvdy5vbignc2Nyb2xsJywgbWFudWFsU2Nyb2xsLmhhbmRsZVNjcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJChcImJvZHlcIikuY3NzKHsgXCJvdmVyZmxvd1wiOiBcImhpZGRlblwiIH0pO1xuICAgICAgICB9XG4gICAgICAgICR3aW5kb3cub24od2hlZWxFdmVudCwgbWFudWFsU2Nyb2xsLndoZWVsSGFuZGxlcik7XG4gICAgICAgIC8vJChkb2N1bWVudCkuYmluZCh3aGVlbEV2ZW50LG1hbnVhbFNjcm9sbC53aGVlbEhhbmRsZXIpO1xuICAgICAgICAkd2luZG93Lm9uKCdrZXlkb3duJywgbWFudWFsU2Nyb2xsLmtleUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzd2lwZVNjcm9sbCA9IHtcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgXCJ0b3VjaHN0YXJ0XCI6IHsgXCJ5XCI6IC0xLCBcInhcIjogLTEgfSxcbiAgICAgICAgXCJ0b3VjaG1vdmVcIjogeyBcInlcIjogLTEsIFwieFwiOiAtMSB9LFxuICAgICAgICBcInRvdWNoZW5kXCI6IGZhbHNlLFxuICAgICAgICBcImRpcmVjdGlvblwiOiBcInVuZGV0ZXJtaW5lZFwiXG4gICAgICB9LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBcImRpc3RhbmNlXCI6IDMwLFxuICAgICAgICBcInRpbWVHYXBcIjogODAwLFxuICAgICAgICBcInRpbWVTdGFtcFwiOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgfSxcbiAgICAgIHRvdWNoSGFuZGxlcjogZnVuY3Rpb24gdG91Y2hIYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIGlmIChkaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpIHtcbiAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpIHx8ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0b3VjaDtcbiAgICAgICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50LnRvdWNoZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAndG91Y2hzdGFydCc6XG4gICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaHN0YXJ0LnkgPSB0b3VjaC5wYWdlWTtcbiAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS55ID0gLTE7XG5cbiAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueCA9IHRvdWNoLnBhZ2VYO1xuICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnggPSAtMTtcblxuICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLm9wdGlvbnMudGltZVN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaGVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBjYXNlICd0b3VjaG1vdmUnOlxuICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnkgPSB0b3VjaC5wYWdlWTtcbiAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS54ID0gdG91Y2gucGFnZVg7XG4gICAgICAgICAgICAgICAgaWYgKHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC55ICE9PSBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS55ICYmIE1hdGguYWJzKHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC55IC0gc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaG1vdmUueSkgPiBNYXRoLmFicyhzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueCAtIHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLngpKSB7XG4gICAgICAgICAgICAgICAgICAvL2lmKCFvdmVyZmxvd1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLnRvdWNoZXMuZGlyZWN0aW9uID0gXCJ5XCI7XG4gICAgICAgICAgICAgICAgICBpZiAoc3dpcGVTY3JvbGwub3B0aW9ucy50aW1lU3RhbXAgKyBzd2lwZVNjcm9sbC5vcHRpb25zLnRpbWVHYXAgPCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAmJiBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoZW5kID09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaGVuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSA+IC0xKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaG1vdmUueSAtIHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC55KSA+IHN3aXBlU2Nyb2xsLm9wdGlvbnMuZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSA8IHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC51cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwuZG93bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAndG91Y2hlbmQnOlxuICAgICAgICAgICAgICAgIGlmIChzd2lwZVNjcm9sbC50b3VjaGVzW2V2ZW50LnR5cGVdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudG91Y2hlc1tldmVudC50eXBlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBpZiAoc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaHN0YXJ0LnkgPiAtMSAmJiBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS55ID4gLTEgJiYgc3dpcGVTY3JvbGwudG91Y2hlcy5kaXJlY3Rpb24gPT09IFwieVwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnkgLSBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSkgPiBzd2lwZVNjcm9sbC5vcHRpb25zLmRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC55IDwgc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaG1vdmUueSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwuZG93bigpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLmRpcmVjdGlvbiA9IFwidW5kZXRlcm1pbmVkXCI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRvd246IGZ1bmN0aW9uIGRvd24oKSB7XG5cbiAgICAgICAgaWYgKGluZGV4IDwgaGVpZ2h0cy5sZW5ndGgpIHtcblxuICAgICAgICAgIGlmIChhdEJvdHRvbSgpICYmIGluZGV4IDwgaGVpZ2h0cy5sZW5ndGggLSAxKSB7XG5cbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXG4gICAgICAgICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LCBmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3J0SGVpZ2h0ID0gZ2V0cG9ydEhlaWdodCgpO1xuICAgICAgICAgICAgaWYgKE1hdGguZmxvb3IoZWxlbWVudHNbaW5kZXhdLmhlaWdodCgpIC8gcG9ydEhlaWdodCkgPiBpbnRlcnN0aXRpYWxJbmRleCkge1xuXG4gICAgICAgICAgICAgIGludGVyc3RpdGlhbFNjcm9sbChwYXJzZUludChoZWlnaHRzW2luZGV4XSkgKyBwb3J0SGVpZ2h0ICogaW50ZXJzdGl0aWFsSW5kZXgpO1xuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxJbmRleCArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaW50ZXJzdGl0aWFsU2Nyb2xsKHBhcnNlSW50KGhlaWdodHNbaW5kZXhdKSArIChlbGVtZW50c1tpbmRleF0ub3V0ZXJIZWlnaHQoKSAtIHBvcnRIZWlnaHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1cDogZnVuY3Rpb24gdXAoKSB7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgaWYgKGF0VG9wKCkgJiYgaW5kZXggPiAwKSB7XG5cbiAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXG4gICAgICAgICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LCBmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWxJbmRleCA+IDIpIHtcbiAgICAgICAgICAgICAgcG9ydEhlaWdodCA9IGdldHBvcnRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxJbmRleCAtPSAxO1xuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxTY3JvbGwocGFyc2VJbnQoaGVpZ2h0c1tpbmRleF0pICsgcG9ydEhlaWdodCAqIGludGVyc3RpdGlhbEluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgaW50ZXJzdGl0aWFsSW5kZXggPSAxO1xuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxTY3JvbGwocGFyc2VJbnQoaGVpZ2h0c1tpbmRleF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAmJiBzZXR0aW5ncy50b3VjaFNjcm9sbCkge1xuICAgICAgICAgIHZhciBldmVudExpc3RlbmVyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgc3dpcGVTY3JvbGwudG91Y2hIYW5kbGVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgc3dpcGVTY3JvbGwudG91Y2hIYW5kbGVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBzd2lwZVNjcm9sbC50b3VjaEhhbmRsZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB1dGlsID0ge1xuICAgICAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaCh3aXRoQ2FsbGJhY2ssIHNjcm9sbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkMik7XG4gICAgICAgIHRpbWVvdXRJZDIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvL3JldGFpbiBwb3NpdGlvblxuICAgICAgICAgIHNpemVQYW5lbHModHJ1ZSk7XG4gICAgICAgICAgLy9zY3JvbGwsIGZpcnN0TG9hZFxuICAgICAgICAgIGNhbGN1bGF0ZVBvc2l0aW9ucyhzY3JvbGwsIGZhbHNlKTtcbiAgICAgICAgICBpZiAod2l0aENhbGxiYWNrKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5hZnRlclJlc2l6ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgNDAwKTtcbiAgICAgIH0sXG4gICAgICBoYW5kbGVVcGRhdGU6IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICAgICAgLy9jYWxsYmFja3MsIHNjcm9sbFxuICAgICAgICAvL2NoYW5nZWQgZnJvbSBmYWxzZSx0cnVlIHRvIGZhbHNlLGZhbHNlXG4gICAgICAgIHV0aWwucmVmcmVzaChmYWxzZSwgZmFsc2UpO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZVJlc2l6ZTogZnVuY3Rpb24gaGFuZGxlUmVzaXplKCkge1xuICAgICAgICAvL2NhbGxiYWNrcywgc2Nyb2xsXG4gICAgICAgIHV0aWwucmVmcmVzaCh0cnVlLCBmYWxzZSk7XG4gICAgICB9LFxuICAgICAgaGFuZGxlT3JpZW50YXRpb246IGZ1bmN0aW9uIGhhbmRsZU9yaWVudGF0aW9uKCkge1xuICAgICAgICAvL2NhbGxiYWNrcywgc2Nyb2xsXG4gICAgICAgIHV0aWwucmVmcmVzaCh0cnVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHNldHRpbmdzID0gJC5leHRlbmQoc2V0dGluZ3MsIG9wdGlvbnMpO1xuXG4gICAgLy9yZXRhaW4gcG9zaXRpb25cbiAgICBzaXplUGFuZWxzKGZhbHNlKTtcblxuICAgIGNhbGN1bGF0ZVBvc2l0aW9ucyhmYWxzZSwgdHJ1ZSk7XG5cbiAgICBpZiAodHJ1ZSA9PT0gaGFzTG9jYXRpb24pIHtcbiAgICAgIC8vaW5kZXgsIGluc3RhbnQsIGNhbGxiYWNrcywgdG9Ub3BcbiAgICAgIGFuaW1hdGVTY3JvbGwoaW5kZXgsIGZhbHNlLCB0cnVlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vaW5zdGFudCxjYWxsYmFja3NcbiAgICAgICAgbWFudWFsU2Nyb2xsLmNhbGN1bGF0ZU5lYXJlc3QodHJ1ZSwgZmFsc2UpO1xuICAgICAgfSwgMjAwKTtcbiAgICB9XG4gICAgaWYgKGhlaWdodHMubGVuZ3RoKSB7XG4gICAgICBtYW51YWxTY3JvbGwuaW5pdCgpO1xuICAgICAgc3dpcGVTY3JvbGwuaW5pdCgpO1xuXG4gICAgICAkd2luZG93Lm9uKFwicmVzaXplXCIsIHV0aWwuaGFuZGxlUmVzaXplKTtcbiAgICAgIGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwgdXRpbC5oYW5kbGVPcmllbnRhdGlvbiwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBpbnRlcnN0aXRpYWxTY3JvbGwocG9zKSB7XG4gICAgICBpZiAoJCgpLnZlbG9jaXR5KSB7XG4gICAgICAgICQoc2V0dGluZ3MudGFyZ2V0KS5zdG9wKCkudmVsb2NpdHkoJ3Njcm9sbCcsIHtcbiAgICAgICAgICBkdXJhdGlvbjogc2V0dGluZ3Muc2Nyb2xsU3BlZWQsXG4gICAgICAgICAgZWFzaW5nOiBzZXR0aW5ncy5lYXNpbmcsXG4gICAgICAgICAgb2Zmc2V0OiBwb3MsXG4gICAgICAgICAgbW9iaWxlSEE6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChzZXR0aW5ncy50YXJnZXQpLnN0b3AoKS5hbmltYXRlKHtcbiAgICAgICAgICBzY3JvbGxUb3A6IHBvc1xuICAgICAgICB9LCBzZXR0aW5ncy5zY3JvbGxTcGVlZCwgc2V0dGluZ3MuZWFzaW5nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaXplUGFuZWxzKGtlZXBQb3NpdGlvbikge1xuICAgICAgaWYgKGtlZXBQb3NpdGlvbikge1xuICAgICAgICB0b3AgPSAkd2luZG93LnNjcm9sbFRvcCgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZWN0b3IgPSBzZXR0aW5ncy5zZWN0aW9uO1xuICAgICAgb3ZlcmZsb3cgPSBbXTtcbiAgICAgIGlmIChzZXR0aW5ncy5pbnRlcnN0aXRpYWxTZWN0aW9uLmxlbmd0aCkge1xuICAgICAgICBzZWxlY3RvciArPSBcIixcIiArIHNldHRpbmdzLmludGVyc3RpdGlhbFNlY3Rpb247XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGluZ3Muc2Nyb2xsYmFycyA9PT0gZmFsc2UpIHtcbiAgICAgICAgc2V0dGluZ3Mub3ZlcmZsb3dTY3JvbGwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHBvcnRIZWlnaHQgPSBnZXRwb3J0SGVpZ2h0KCk7XG4gICAgICAkKHNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLnNldEhlaWdodHMpIHtcbiAgICAgICAgICBpZiAoJHRoaXMuaXMoc2V0dGluZ3MuaW50ZXJzdGl0aWFsU2VjdGlvbikpIHtcbiAgICAgICAgICAgIG92ZXJmbG93W2ldID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICgkdGhpcy5jc3MoXCJoZWlnaHRcIiwgXCJhdXRvXCIpLm91dGVySGVpZ2h0KCkgPCBwb3J0SGVpZ2h0IHx8ICR0aGlzLmNzcyhcIm92ZXJmbG93XCIpID09PSBcImhpZGRlblwiKSB7XG4gICAgICAgICAgICAgICR0aGlzLmNzcyh7IFwiaGVpZ2h0XCI6IHBvcnRIZWlnaHQgfSk7XG5cbiAgICAgICAgICAgICAgb3ZlcmZsb3dbaV0gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgJHRoaXMuY3NzKHsgXCJoZWlnaHRcIjogJHRoaXMuaGVpZ2h0KCkgfSk7XG5cbiAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLm92ZXJmbG93U2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dbaV0gPSB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93W2ldID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBpZiAoJHRoaXMub3V0ZXJIZWlnaHQoKSA8IHBvcnRIZWlnaHQgfHwgc2V0dGluZ3Mub3ZlcmZsb3dTY3JvbGwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdmVyZmxvd1tpXSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdmVyZmxvd1tpXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChrZWVwUG9zaXRpb24pIHtcbiAgICAgICAgJHdpbmRvdy5zY3JvbGxUb3AodG9wKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb25zKHNjcm9sbCwgZmlyc3RMb2FkKSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBzZXR0aW5ncy5zZWN0aW9uO1xuICAgICAgaWYgKHNldHRpbmdzLmludGVyc3RpdGlhbFNlY3Rpb24ubGVuZ3RoKSB7XG4gICAgICAgIHNlbGVjdG9yICs9IFwiLFwiICsgc2V0dGluZ3MuaW50ZXJzdGl0aWFsU2VjdGlvbjtcbiAgICAgIH1cbiAgICAgIGhlaWdodHMgPSBbXTtcbiAgICAgIG5hbWVzID0gW107XG4gICAgICBlbGVtZW50cyA9IFtdO1xuICAgICAgJChzZWxlY3RvcikuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICBoZWlnaHRzW2ldID0gcGFyc2VJbnQoJHRoaXMub2Zmc2V0KCkudG9wKSArIHNldHRpbmdzLm9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoZWlnaHRzW2ldID0gcGFyc2VJbnQoJHRoaXMub2Zmc2V0KCkudG9wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZ3Muc2VjdGlvbk5hbWUgJiYgJHRoaXMuZGF0YShzZXR0aW5ncy5zZWN0aW9uTmFtZSkpIHtcbiAgICAgICAgICBuYW1lc1tpXSA9IFwiI1wiICsgJHRoaXMuZGF0YShzZXR0aW5ncy5zZWN0aW9uTmFtZSkudG9TdHJpbmcoKS5yZXBsYWNlKC8gL2csIFwiLVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoJHRoaXMuaXMoc2V0dGluZ3MuaW50ZXJzdGl0aWFsU2VjdGlvbikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBuYW1lc1tpXSA9IFwiI1wiICsgKGkgKyAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmFtZXNbaV0gPSBcIiNcIjtcbiAgICAgICAgICAgIGlmIChpID09PSAkKHNlbGVjdG9yKS5sZW5ndGggLSAxICYmIGkgPiAxKSB7XG4gICAgICAgICAgICAgIGhlaWdodHNbaV0gPSBoZWlnaHRzW2kgLSAxXSArIChwYXJzZUludCgkKCQoc2VsZWN0b3IpW2kgLSAxXSkub3V0ZXJIZWlnaHQoKSkgLSBwYXJzZUludCgkKHdpbmRvdykuaGVpZ2h0KCkpKSArIHBhcnNlSW50KCR0aGlzLm91dGVySGVpZ2h0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50c1tpXSA9ICR0aGlzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICgkKG5hbWVzW2ldKS5sZW5ndGggJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNjcm9sbGlmeSB3YXJuaW5nOiBTZWN0aW9uIG5hbWVzIGNhbid0IG1hdGNoIElEcyAtIHRoaXMgd2lsbCBjYXVzZSB0aGUgYnJvd3NlciB0byBhbmNob3IuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09IG5hbWVzW2ldKSB7XG4gICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgIGhhc0xvY2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0cnVlID09PSBzY3JvbGwpIHtcbiAgICAgICAgLy9pbmRleCwgaW5zdGFudCwgY2FsbGJhY2tzLCB0b1RvcFxuICAgICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdFRvcCgpIHtcbiAgICAgIGlmICghb3ZlcmZsb3dbaW5kZXhdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdG9wID0gJHdpbmRvdy5zY3JvbGxUb3AoKTtcbiAgICAgIGlmICh0b3AgPiBwYXJzZUludChoZWlnaHRzW2luZGV4XSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0Qm90dG9tKCkge1xuICAgICAgaWYgKCFvdmVyZmxvd1tpbmRleF0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB0b3AgPSAkd2luZG93LnNjcm9sbFRvcCgpO1xuICAgICAgcG9ydEhlaWdodCA9IGdldHBvcnRIZWlnaHQoKTtcblxuICAgICAgaWYgKHRvcCA8IHBhcnNlSW50KGhlaWdodHNbaW5kZXhdKSArIChlbGVtZW50c1tpbmRleF0ub3V0ZXJIZWlnaHQoKSAtIHBvcnRIZWlnaHQpIC0gMjgpIHtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbW92ZShwYW5lbCwgaW5zdGFudCkge1xuICAgIHZhciB6ID0gbmFtZXMubGVuZ3RoO1xuICAgIGZvciAoOyB6ID49IDA7IHotLSkge1xuICAgICAgaWYgKHR5cGVvZiBwYW5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKG5hbWVzW3pdID09PSBwYW5lbCkge1xuICAgICAgICAgIGluZGV4ID0gejtcbiAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXG4gICAgICAgICAgYW5pbWF0ZVNjcm9sbCh6LCBpbnN0YW50LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHogPT09IHBhbmVsKSB7XG4gICAgICAgICAgaW5kZXggPSB6O1xuICAgICAgICAgIC8vaW5kZXgsIGluc3RhbnQsIGNhbGxiYWNrcywgdG9Ub3BcbiAgICAgICAgICBhbmltYXRlU2Nyb2xsKHosIGluc3RhbnQsIHRydWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNjcm9sbGlmeS5tb3ZlID0gZnVuY3Rpb24gKHBhbmVsKSB7XG4gICAgaWYgKHBhbmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBhbmVsLm9yaWdpbmFsRXZlbnQpIHtcbiAgICAgIHBhbmVsID0gJCh0aGlzKS5hdHRyKFwiaHJlZlwiKTtcbiAgICB9XG4gICAgbW92ZShwYW5lbCwgZmFsc2UpO1xuICB9O1xuICBzY3JvbGxpZnkuaW5zdGFudE1vdmUgPSBmdW5jdGlvbiAocGFuZWwpIHtcbiAgICBpZiAocGFuZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBtb3ZlKHBhbmVsLCB0cnVlKTtcbiAgfTtcbiAgc2Nyb2xsaWZ5Lm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGluZGV4IDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgLy9pbmRleCwgaW5zdGFudCwgY2FsbGJhY2tzLCB0b1RvcFxuICAgICAgYW5pbWF0ZVNjcm9sbChpbmRleCwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgIH1cbiAgfTtcbiAgc2Nyb2xsaWZ5LnByZXZpb3VzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgIGluZGV4IC09IDE7XG4gICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXG4gICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuICBzY3JvbGxpZnkuaW5zdGFudE5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGluZGV4IDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgLy9pbmRleCwgaW5zdGFudCwgY2FsbGJhY2tzLCB0b1RvcFxuICAgICAgYW5pbWF0ZVNjcm9sbChpbmRleCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuICBzY3JvbGxpZnkuaW5zdGFudFByZXZpb3VzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgIGluZGV4IC09IDE7XG4gICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXG4gICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICB9XG4gIH07XG4gIHNjcm9sbGlmeS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghaW5pdGlhbGlzZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHNldHRpbmdzLnNldEhlaWdodHMpIHtcbiAgICAgICQoc2V0dGluZ3Muc2VjdGlvbikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQodGhpcykuY3NzKFwiaGVpZ2h0XCIsIFwiYXV0b1wiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAkd2luZG93Lm9mZihcInJlc2l6ZVwiLCB1dGlsLmhhbmRsZVJlc2l6ZSk7XG4gICAgaWYgKHNldHRpbmdzLnNjcm9sbGJhcnMpIHtcbiAgICAgICR3aW5kb3cub2ZmKCdtb3VzZWRvd24nLCBtYW51YWxTY3JvbGwuaGFuZGxlTW91c2Vkb3duKTtcbiAgICAgICR3aW5kb3cub2ZmKCdtb3VzZXVwJywgbWFudWFsU2Nyb2xsLmhhbmRsZU1vdXNldXApO1xuICAgICAgJHdpbmRvdy5vZmYoJ3Njcm9sbCcsIG1hbnVhbFNjcm9sbC5oYW5kbGVTY3JvbGwpO1xuICAgIH1cbiAgICAkd2luZG93Lm9mZih3aGVlbEV2ZW50LCBtYW51YWxTY3JvbGwud2hlZWxIYW5kbGVyKTtcbiAgICAkd2luZG93Lm9mZigna2V5ZG93bicsIG1hbnVhbFNjcm9sbC5rZXlIYW5kbGVyKTtcblxuICAgIGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICYmIHNldHRpbmdzLnRvdWNoU2Nyb2xsKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgc3dpcGVTY3JvbGwudG91Y2hIYW5kbGVyLCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBzd2lwZVNjcm9sbC50b3VjaEhhbmRsZXIsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgc3dpcGVTY3JvbGwudG91Y2hIYW5kbGVyLCBmYWxzZSk7XG4gICAgfVxuICAgIGhlaWdodHMgPSBbXTtcbiAgICBuYW1lcyA9IFtdO1xuICAgIGVsZW1lbnRzID0gW107XG4gICAgb3ZlcmZsb3cgPSBbXTtcbiAgfTtcbiAgc2Nyb2xsaWZ5LnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWluaXRpYWxpc2VkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHV0aWwuaGFuZGxlVXBkYXRlKCk7XG4gIH07XG4gIHNjcm9sbGlmeS5jdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbGVtZW50c1tpbmRleF07XG4gIH07XG4gIHNjcm9sbGlmeS5jdXJyZW50SW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9O1xuICBzY3JvbGxpZnkuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBkaXNhYmxlZCA9IHRydWU7XG4gIH07XG4gIHNjcm9sbGlmeS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGlzYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoaW5pdGlhbGlzZWQpIHtcbiAgICAgIC8vaW5zdGFudCxjYWxsYmFja3NcbiAgICAgIG1hbnVhbFNjcm9sbC5jYWxjdWxhdGVOZWFyZXN0KGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuICB9O1xuICBzY3JvbGxpZnkuaXNEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzYWJsZWQ7XG4gIH07XG4gIHNjcm9sbGlmeS5zZXRPcHRpb25zID0gZnVuY3Rpb24gKHVwZGF0ZWRPcHRpb25zKSB7XG4gICAgaWYgKCFpbml0aWFsaXNlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoKHR5cGVvZiB1cGRhdGVkT3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodXBkYXRlZE9wdGlvbnMpKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgc2V0dGluZ3MgPSAkLmV4dGVuZChzZXR0aW5ncywgdXBkYXRlZE9wdGlvbnMpO1xuICAgICAgdXRpbC5oYW5kbGVVcGRhdGUoKTtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJTY3JvbGxpZnkgd2FybmluZzogc2V0T3B0aW9ucyBleHBlY3RzIGFuIG9iamVjdC5cIik7XG4gICAgfVxuICB9O1xuICAkLnNjcm9sbGlmeSA9IHNjcm9sbGlmeTtcbiAgcmV0dXJuIHNjcm9sbGlmeTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDEzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxMzcpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMzNCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMzM1KTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xufVxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7XG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkUmlnaHRcIiwgXCJcIi5wYWRFbmQpO1xuXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTtcbn0pO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oOTIpKSlcblxuLyoqKi8gfSksXG4vKiAxMzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXygxMzgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNDkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNTkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNjkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxNzkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxODkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxOTkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMDkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNDApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNDEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyg4NCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0Mik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0Myk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0NCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0NSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0Nik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0Nyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0OCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDExNCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDExNik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDExNyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0OSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1MCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1MSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1Mik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1Myk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1NCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1NSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1Nik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1Nyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1OCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1OSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2MSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2Mik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2Myk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2NCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2NSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2OCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI2OSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3MCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3MSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3Mik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3Myk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3NCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3NSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3Nik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3Nyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3OCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3OSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4MCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4MSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4Mik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4Myk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4NCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4NSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4Nik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4Nyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4OCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI4OSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5MCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5MSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5Mik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5Myk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5NCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5NSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5Nik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5Nyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5OCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI5OSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwMSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwMik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwMyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwNCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwNSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwNik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwNyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwOCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwOSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxMCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxMSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxMik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxMyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxNCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxNSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxNik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxNyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxOCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMxOSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyMCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyMSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyMik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyMyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyNCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyNSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyNik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyNyk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyOCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMyOSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMzMCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMzMSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMzMik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMzMyk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG4vKioqLyB9KSxcbi8qIDEzOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xudmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciByZWRlZmluZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xudmFyIE1FVEEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KS5LRVk7XG52YXIgJGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBzaGFyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xudmFyIHVpZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xudmFyIHdrcyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG52YXIgd2tzRXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCk7XG52YXIgd2tzRGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NCk7XG52YXIgZW51bUtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzOSk7XG52YXIgaXNBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG52YXIgdG9QcmltaXRpdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcbnZhciBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG52YXIgX2NyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xudmFyIGdPUE5FeHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3KTtcbnZhciAkR09QRCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xudmFyICREUCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG52YXIgJGtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTtcbiAgICB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uIHdyYXAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgX3R5cGVvZigkU3ltYm9sLml0ZXJhdG9yKSA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gKHR5cGVvZiBpdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaXQpKSA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9cmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH1yZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSB7XG4gICAgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIH1yZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfXJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH1yZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIF9TeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICRzZXQodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgX193ZWJwYWNrX3JlcXVpcmVfXygzNykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIV9fd2VicGFja19yZXF1aXJlX18oMzMpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPVxuLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbidoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcycuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspIHtcbiAgd2tzKGVzNlN5bWJvbHNbaisrXSk7XG59Zm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB7XG4gIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xufSRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gX2ZvcihrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpID8gU3ltYm9sUmVnaXN0cnlba2V5XSA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIHtcbiAgICAgIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gICAgfVxuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uIHVzZVNldHRlcigpIHtcbiAgICBzZXR0ZXIgPSB0cnVlO1xuICB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uIHVzZVNpbXBsZSgpIHtcbiAgICBzZXR0ZXIgPSBmYWxzZTtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICB9JHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIHJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IF9fd2VicGFja19yZXF1aXJlX18oMTIpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuXG4vKioqLyB9KSxcbi8qIDEzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcbnZhciBnT1BTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG52YXIgcElFID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1yZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqKi8gfSksXG4vKiAxNDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KSB9KTtcblxuLyoqKi8gfSksXG4vKiAxNDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oNiksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpLmYgfSk7XG5cbi8qKiovIH0pLFxuLyogMTQyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oNiksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IF9fd2VicGFja19yZXF1aXJlX18oOTYpIH0pO1xuXG4vKioqLyB9KSxcbi8qIDE0MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpLmY7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjUpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1KSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgJGtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNSkoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbl9fd2VicGFja19yZXF1aXJlX18oMjUpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyg5NykuZjtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIG1ldGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KS5vbkZyZWV6ZTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNSkoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTQ4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBtZXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkub25GcmVlemU7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjUpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTQ5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgbWV0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpLm9uRnJlZXplO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI1KSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTUwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjUpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNSkoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE1MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNSkoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTUzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IF9fd2VicGFja19yZXF1aXJlX18oOTgpIH0pO1xuXG4vKioqLyB9KSxcbi8qIDE1NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1NSkgfSk7XG5cbi8qKiovIH0pLFxuLyogMTU1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcblxuLyoqKi8gfSksXG4vKiAxNTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogX193ZWJwYWNrX3JlcXVpcmVfXyg2OCkuc2V0IH0pO1xuXG4vKioqLyB9KSxcbi8qIDE1NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG5cbnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIF9fd2VicGFja19yZXF1aXJlX18oMTMpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG5cbi8qKiovIH0pLFxuLyogMTU4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogX193ZWJwYWNrX3JlcXVpcmVfXyg5OSkgfSk7XG5cbi8qKiovIH0pLFxuLyogMTU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBkUCA9IF9fd2VicGFja19yZXF1aXJlX18oNykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IF9fd2VicGFja19yZXF1aXJlX18oNikgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG52YXIgSEFTX0lOU1RBTkNFID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIF9fd2VicGFja19yZXF1aXJlX18oNykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKE8pIHtcbiAgICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAgIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gICAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkge1xuICAgICAgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgICB9cmV0dXJuIGZhbHNlO1xuICB9IH0pO1xuXG4vKioqLyB9KSxcbi8qIDE2MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJHBhcnNlSW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDEpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG5cbi8qKiovIH0pLFxuLyogMTYyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkcGFyc2VGbG9hdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTAyKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuXG4vKioqLyB9KSxcbi8qIDE2MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNzApO1xudmFyIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIGdPUE4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KS5mO1xudmFyIGdPUEQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KS5mO1xudmFyIGRQID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KS5mO1xudmFyICR0cmltID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YoX193ZWJwYWNrX3JlcXVpcmVfXygzNikocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjpjYXNlIDk4OlxuICAgICAgICAgIHJhZGl4ID0gMjttYXhDb2RlID0gNDk7YnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6Y2FzZSAxMTE6XG4gICAgICAgICAgcmFkaXggPSA4O21heENvZGUgPSA1NTticmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH1yZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9cmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTtcbiAgICB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpID8gZ09QTihCYXNlKSA6IChcbiAgLy8gRVMzOlxuICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgKyAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcicpLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG5cbi8qKiovIH0pLFxuLyogMTY0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcbnZhciBhTnVtYmVyVmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyk7XG52YXIgcmVwZWF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MSk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiBtdWx0aXBseShuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIGRpdmlkZShuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gYyAlIG4gKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiBudW1Ub1N0cmluZygpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9cmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uIHBvdyh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiBsb2coeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH1yZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fCAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8IDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fCAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnKSB8fCAhX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9cmV0dXJuIG07XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE2NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBhTnVtYmVyVmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG5cbi8qKiovIH0pLFxuLyogMTY3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgX2lzRmluaXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTY4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNCkgfSk7XG5cbi8qKiovIH0pLFxuLyogMTY5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGlzSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTA0KTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE3MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcblxuLyoqKi8gfSksXG4vKiAxNzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcblxuLyoqKi8gfSksXG4vKiAxNzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyICRwYXJzZUZsb2F0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDIpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG5cbi8qKiovIH0pLFxuLyogMTc0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkcGFyc2VJbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcblxuLyoqKi8gfSksXG4vKiAxNzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGxvZzFwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDUpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHkpLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2ID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMiA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE3NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG5cbi8qKiovIH0pLFxuLyogMTc3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTc4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIHNpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTc5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE4MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTgxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJGV4cG0xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Myk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG5cbi8qKiovIH0pLFxuLyogMTgyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpIH0pO1xuXG4vKioqLyB9KSxcbi8qIDE4MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTg0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxODUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxODYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogX193ZWJwYWNrX3JlcXVpcmVfXygxMDUpIH0pO1xuXG4vKioqLyB9KSxcbi8qIDE4NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE4OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogX193ZWJwYWNrX3JlcXVpcmVfXyg3MikgfSk7XG5cbi8qKiovIH0pLFxuLyogMTg5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBleHBtMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzMpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDEgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMiA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxOTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGV4cG0xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Myk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE5MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxOTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMCA/IGZyb21DaGFyQ29kZShjb2RlKSA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApKTtcbiAgICB9cmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTkzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciB0b0lPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfXJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5cbl9fd2VicGFja19yZXF1aXJlX18oNDMpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE5NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgJGF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCkodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbl9fd2VicGFja19yZXF1aXJlX18oNzUpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAvLyBuZXh0IGluZGV4XG4gIC8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAxOTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyICRhdCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTk3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG52YXIgY29udGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNzcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE5OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGNvbnRleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXyg3OCkoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUykuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTk5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcblxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIGNvbnRleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGggPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxNCkoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5cbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxNCkoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5cbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxNCkoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5cbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5cbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5cbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5cbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfSB9KTtcblxuLyoqKi8gfSksXG4vKiAyMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIF9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbCB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIHRvSVNPU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTcpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gbHoobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICsgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcblxuLyoqKi8gfSksXG4vKiAyMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgX193ZWJwYWNrX3JlcXVpcmVfXygxMykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cblxuLyoqKi8gfSksXG4vKiAyMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIFRPX1BSSU1JVElWRSA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgX193ZWJwYWNrX3JlcXVpcmVfXygxMikocHJvdG8sIFRPX1BSSU1JVElWRSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjApKTtcblxuLyoqKi8gfSksXG4vKiAyMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcblxuLyoqKi8gfSksXG4vKiAyMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogX193ZWJwYWNrX3JlcXVpcmVfXyg1MikgfSk7XG5cbi8qKiovIH0pLFxuLyogMjIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjdHggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTA3KTtcbnZhciBpc0FycmF5SXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNzkpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oODApO1xudmFyIGdldEl0ZXJGbiA9IF9fd2VicGFja19yZXF1aXJlX18oODEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KShmdW5jdGlvbiAoaXRlcikge1xuICBBcnJheS5mcm9tKGl0ZXIpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oODApO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsvKiBlbXB0eSAqL31cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoKSAvKiAuLi5hcmdzICove1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgfXJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KSAhPSBPYmplY3QgfHwgIV9fd2VicGFja19yZXF1aXJlX18oMjApKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGh0bWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KTtcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIF9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZycgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpIDogdGhpc1tzdGFydCArIGldO1xuICAgIH1yZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSkgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIyNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJGZvckVhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KSgwKTtcbnZhciBTVFJJQ1QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIyOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKTtcbnZhciBTUEVDSUVTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9cmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG5cbi8qKiovIH0pLFxuLyogMjI5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkbWFwID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNikoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oMjApKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyICRmaWx0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXygyMCkoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjMxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkc29tZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyICRldmVyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkcmVkdWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDgpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyICRyZWR1Y2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oMjApKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyICRpbmRleE9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCkoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIV9fd2VicGFja19yZXF1aXJlX18oMjApKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMCA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhX193ZWJwYWNrX3JlcXVpcmVfXygyMCkoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgICBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICB9cmV0dXJuIC0xO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IF9fd2VicGFja19yZXF1aXJlX18oMTA5KSB9KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygzMCkoJ2NvcHlXaXRoaW4nKTtcblxuLyoqKi8gfSksXG4vKiAyMzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IF9fd2VicGFja19yZXF1aXJlX18oODMpIH0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwKSgnZmlsbCcpO1xuXG4vKioqLyB9KSxcbi8qIDIzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJGZpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHtcbiAgZm9yY2VkID0gZmFsc2U7XG59KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbl9fd2VicGFja19yZXF1aXJlX18oMzApKEtFWSk7XG5cbi8qKiovIH0pLFxuLyogMjQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyICRmaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNikoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHtcbiAgZm9yY2VkID0gZmFsc2U7XG59KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwKShLRVkpO1xuXG4vKioqLyB9KSxcbi8qIDI0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDM4KSgnQXJyYXknKTtcblxuLyoqKi8gfSksXG4vKiAyNDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKTtcbnZhciBkUCA9IF9fd2VicGFja19yZXF1aXJlX18oNykuZjtcbnZhciBnT1BOID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNykuZjtcbnZhciBpc1JlZ0V4cCA9IF9fd2VicGFja19yZXF1aXJlX18oNTMpO1xudmFyICRmbGFncyA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fKDYpICYmICghQ09SUkVDVF9ORVcgfHwgX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbiAoKSB7XG4gIHJlMltfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FVyA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZikgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZiksIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiBwcm94eShrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gQmFzZVtrZXldO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGl0KSB7XG4gICAgICAgIEJhc2Vba2V5XSA9IGl0O1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHtcbiAgICBwcm94eShrZXlzW2krK10pO1xuICB9cHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxuX193ZWJwYWNrX3JlcXVpcmVfXygzOCkoJ1JlZ0V4cCcpO1xuXG4vKioqLyB9KSxcbi8qIDI0MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyICRmbGFncyA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xudmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKGZuKSB7XG4gIF9fd2VicGFja19yZXF1aXJlX18oMTMpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKF9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7XG59KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLCAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuICAvLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG5cbi8qKiovIH0pLFxuLyogMjQ0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIEBAbWF0Y2ggbG9naWNcbl9fd2VicGFja19yZXF1aXJlX18oNTYpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDU2KSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKSA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjQ2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDU2KSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCkge1xuICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gQEBzcGxpdCBsb2dpY1xuX193ZWJwYWNrX3JlcXVpcmVfXyg1NikoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBpc1JlZ0V4cCA9IF9fd2VicGFja19yZXF1aXJlX18oNTMpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHwgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8ICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fCAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHwgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fCAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF0pIHtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uICRzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICsgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICsgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZiAoIU5QQ0cpIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgICBpZiAoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAgIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAkc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjQ4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBMSUJSQVJZID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBjdHggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xudmFyIGFuSW5zdGFuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcbnZhciBmb3JPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpO1xudmFyIHRhc2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KS5zZXQ7XG52YXIgbWljcm90YXNrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NikoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oODcpO1xudmFyIHBlcmZvcm0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMik7XG52YXIgcHJvbWlzZVJlc29sdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uIGVtcHR5KCkgey8qIGVtcHR5ICovfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW19fd2VicGFja19yZXF1aXJlX18oNSkoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICB9IGNhdGNoIChlKSB7LyogZW1wdHkgKi99XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gaXNUaGVuYWJsZShpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiBydW4ocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW47XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZXhpdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHtcbiAgICAgIHJ1bihjaGFpbltpKytdKTtcbiAgICB9IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiBvblVuaGFuZGxlZChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9cHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gaXNVbmhhbmRsZWQocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gJHJlamVjdCh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gJHJlc29sdmUodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7IC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7IC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSkoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gT3duUHJvbWlzZUNhcGFiaWxpdHkoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlciA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKSA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbl9fd2VicGFja19yZXF1aXJlX18oNDIpKCRQcm9taXNlLCBQUk9NSVNFKTtcbl9fd2VicGFja19yZXF1aXJlX18oMzgpKFBST01JU0UpO1xuV3JhcHBlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIF9fd2VicGFja19yZXF1aXJlX18oNTQpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHdlYWsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOCk7XG52YXIgdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbl9fd2VicGFja19yZXF1aXJlX18oNTgpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG5cbi8qKiovIH0pLFxuLyogMjUwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkdHlwZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTtcbnZhciBidWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBBcnJheUJ1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMikuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIF9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbmFsID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW5hbCAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW5hbCkge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH1yZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygzOCkoQVJSQVlfQlVGRkVSKTtcblxuLyoqKi8gfSksXG4vKiAyNTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXyg1OSkuQUJWLCB7XG4gIERhdGFWaWV3OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KS5EYXRhVmlld1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbl9fd2VicGFja19yZXF1aXJlX18oMjcpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjUzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbl9fd2VicGFja19yZXF1aXJlX18oMjcpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcblxuLyoqKi8gfSksXG4vKiAyNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI1NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI1OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIHJBcHBseSA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsvKiBlbXB0eSAqL30pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjYyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBjcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcbnZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OSk7XG52YXIgckNvbnN0cnVjdCA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7LyogZW1wdHkgKi99XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgey8qIGVtcHR5ICovfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgey8qIGVtcHR5ICovfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI2NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGdPUEQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KS5mO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjY1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIEVudW1lcmF0ZShpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7IC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107IC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfVxufTtcbl9fd2VicGFja19yZXF1aXJlX18oNzYpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI2NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKSA/IGRlc2MudmFsdWUgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcikgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuXG4vKioqLyB9KSxcbi8qIDI2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjY4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBnZXRQcm90byA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI3MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI3MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogX193ZWJwYWNrX3JlcXVpcmVfXygxMjApIH0pO1xuXG4vKioqLyB9KSxcbi8qIDI3MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjczICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xudmFyIGdPUEQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGNyZWF0ZURlc2MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgY3JlYXRlRGVzYygwKTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuXG4vKioqLyB9KSxcbi8qIDI3NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBzZXRQcm90byA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjc1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyICRpbmNsdWRlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNTApKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygzMCkoJ2luY2x1ZGVzJyk7XG5cbi8qKiovIH0pLFxuLyogMjc2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIxKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oODIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMzApKCdmbGF0TWFwJyk7XG5cbi8qKiovIH0pLFxuLyogMjc3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdHRlblxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIxKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oODIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKCkgLyogZGVwdGhBcmcgPSAxICove1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwKSgnZmxhdHRlbicpO1xuXG4vKioqLyB9KSxcbi8qIDI3OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJGF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCkodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkcGFkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjIpO1xudmFyIHVzZXJBZ2VudCA9IF9fd2VicGFja19yZXF1aXJlX18oODkpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjgwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJHBhZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIyKTtcbnZhciB1c2VyQWdlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg5KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI4MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQzKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcblxuLyoqKi8gfSksXG4vKiAyODIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cblxuX193ZWJwYWNrX3JlcXVpcmVfXyg0MykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG5cbi8qKiovIH0pLFxuLyogMjgzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIGlzUmVnRXhwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XG52YXIgZ2V0RmxhZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18oNzYpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XG4gIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogbWF0Y2ggPT09IG51bGwgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuICAgIGRlZmluZWQodGhpcyk7XG4gICAgaWYgKCFpc1JlZ0V4cChyZWdleHApKSB0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XG4gICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgdmFyIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApO1xuICAgIHZhciByeCA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjg0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbl9fd2VicGFja19yZXF1aXJlX18oNjQpKCdhc3luY0l0ZXJhdG9yJyk7XG5cbi8qKiovIH0pLFxuLyogMjg1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbl9fd2VicGFja19yZXF1aXJlX18oNjQpKCdvYnNlcnZhYmxlJyk7XG5cbi8qKiovIH0pLFxuLyogMjg2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgb3duS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIwKTtcbnZhciB0b0lPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcbnZhciBnT1BEID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI4NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkdmFsdWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyODggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJGVudHJpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjg5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxuX193ZWJwYWNrX3JlcXVpcmVfXyg2KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9fd2VicGFja19yZXF1aXJlX18oNjApLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjkwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxuX193ZWJwYWNrX3JlcXVpcmVfXyg2KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9fd2VicGFja19yZXF1aXJlX18oNjApLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjkxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgdG9QcmltaXRpdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDYpICYmICRleHBvcnQoJGV4cG9ydC5QICsgX193ZWJwYWNrX3JlcXVpcmVfXyg2MCksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI5MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xudmFyIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxuX193ZWJwYWNrX3JlcXVpcmVfXyg2KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9fd2VicGFja19yZXF1aXJlX18oNjApLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyOTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNCkoJ01hcCcpIH0pO1xuXG4vKioqLyB9KSxcbi8qIDI5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0JywgeyB0b0pTT046IF9fd2VicGFja19yZXF1aXJlX18oMTI0KSgnU2V0JykgfSk7XG5cbi8qKiovIH0pLFxuLyogMjk1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxuX193ZWJwYWNrX3JlcXVpcmVfXyg2MSkoJ01hcCcpO1xuXG4vKioqLyB9KSxcbi8qIDI5NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQub2Zcbl9fd2VicGFja19yZXF1aXJlX18oNjEpKCdTZXQnKTtcblxuLyoqKi8gfSksXG4vKiAyOTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxuX193ZWJwYWNrX3JlcXVpcmVfXyg2MSkoJ1dlYWtNYXAnKTtcblxuLyoqKi8gfSksXG4vKiAyOTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxuX193ZWJwYWNrX3JlcXVpcmVfXyg2MSkoJ1dlYWtTZXQnKTtcblxuLyoqKi8gfSksXG4vKiAyOTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLmZyb21cbl9fd2VicGFja19yZXF1aXJlX18oNjIpKCdNYXAnKTtcblxuLyoqKi8gfSksXG4vKiAzMDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbl9fd2VicGFja19yZXF1aXJlX18oNjIpKCdTZXQnKTtcblxuLyoqKi8gfSksXG4vKiAzMDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDYyKSgnV2Vha01hcCcpO1xuXG4vKioqLyB9KSxcbi8qIDMwMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0LmZyb21cbl9fd2VicGFja19yZXF1aXJlX18oNjIpKCdXZWFrU2V0Jyk7XG5cbi8qKiovIH0pLFxuLyogMzAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IF9fd2VicGFja19yZXF1aXJlX18oMikgfSk7XG5cbi8qKiovIH0pLFxuLyogMzA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHsgZ2xvYmFsOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpIH0pO1xuXG4vKioqLyB9KSxcbi8qIDMwNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgY29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMzA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHVwcGVyLCBNYXRoLm1heChsb3dlciwgeCkpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAzMDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuXG4vKioqLyB9KSxcbi8qIDMwOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDMwOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgc2NhbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNik7XG52YXIgZnJvdW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDMxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDMxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMzEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAzMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IFJBRF9QRVJfREVHOiAxODAgLyBNYXRoLlBJIH0pO1xuXG4vKioqLyB9KSxcbi8qIDMxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDMxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IF9fd2VicGFja19yZXF1aXJlX18oMTI2KSB9KTtcblxuLyoqKi8gfSksXG4vKiAzMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAzMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG4gIH0gfSk7XG5cbi8qKiovIH0pLFxuLyogMzE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG5cblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGNvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gX2ZpbmFsbHkob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgICByZXR1cm4gdGhpcy50aGVuKGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9KTtcbiAgICB9IDogb25GaW5hbGx5LCBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICB9IDogb25GaW5hbGx5KTtcbiAgfSB9KTtcblxuLyoqKi8gfSksXG4vKiAzMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9fd2VicGFja19yZXF1aXJlX18oODcpO1xudmFyIHBlcmZvcm0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMik7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIF90cnkoY2FsbGJhY2tmbikge1xuICAgIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gICAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICAgIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xuICB9IH0pO1xuXG4vKioqLyB9KSxcbi8qIDMyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgbWV0YWRhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG4gIH0gfSk7XG5cbi8qKiovIH0pLFxuLyogMzIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBtZXRhZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICAgIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gICAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gICAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gICAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gICAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbiAgfSB9KTtcblxuLyoqKi8gfSksXG4vKiAzMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIG1ldGFkYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbiBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG4gIH0gfSk7XG5cbi8qKiovIH0pLFxuLyogMzIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBTZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNik7XG52YXIgZnJvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI1KTtcbnZhciBtZXRhZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIG9yZGluYXJ5TWV0YWRhdGFLZXlzKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG4gIH0gfSk7XG5cbi8qKiovIH0pLFxuLyogMzI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBtZXRhZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG4gIH0gfSk7XG5cbi8qKiovIH0pLFxuLyogMzI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBtZXRhZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG4gIH0gfSk7XG5cbi8qKiovIH0pLFxuLyogMzI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBtZXRhZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG4gIH0gfSk7XG5cbi8qKiovIH0pLFxuLyogMzI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBtZXRhZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG4gIH0gfSk7XG5cbi8qKiovIH0pLFxuLyogMzI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkbWV0YWRhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gJG1ldGFkYXRhLnNldDtcblxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG4gICAgfTtcbiAgfSB9KTtcblxuLyoqKi8gfSksXG4vKiAzMjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgbWljcm90YXNrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NikoKTtcbnZhciBwcm9jZXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5wcm9jZXNzO1xudmFyIGlzTm9kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbikge1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMzMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIGNvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcbnZhciBtaWNyb3Rhc2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2KSgpO1xudmFyIE9CU0VSVkFCTEUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIGFuSW5zdGFuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcbnZhciByZWRlZmluZUFsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xudmFyIGhpZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbnZhciBmb3JPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIGdldE1ldGhvZChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKSB7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xuICBpZiAoY2xlYW51cCkge1xuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwKCk7XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbiBzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSB7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH07ZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH1pZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTtcbiAgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIFN1YnNjcmlwdGlvbk9ic2VydmVyKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1jbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9Y2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcikge1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgYUZ1bmN0aW9uKGZuKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1vYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykge1xuICAgICAgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICB9cmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9b2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZSB9KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygzOCkoJ09ic2VydmFibGUnKTtcblxuLyoqKi8gfSksXG4vKiAzMzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgdXNlckFnZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OSk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIHdyYXAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG5cbi8qKiovIH0pLFxuLyogMzMyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciAkdGFzayA9IF9fd2VicGFja19yZXF1aXJlX18oODUpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG5cbi8qKiovIH0pLFxuLyogMzMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkaXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NCk7XG52YXIgZ2V0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG52YXIgd2tzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIHtcbiAgICAgIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqKi8gfSksXG4vKiAzMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUpIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hZnVuY3Rpb24gKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9ICggZmFsc2UgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJiBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9IEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvciA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbiAoZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHZhbHVlKSkgPT09IFwib2JqZWN0XCIgJiYgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAodW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfdHlwZW9mKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbiAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmUgPyBHZW5TdGF0ZUNvbXBsZXRlZCA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgICAgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uIGRpc3BhdGNoRXhjZXB0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhIWNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJiB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiYgKHR5cGUgPT09IFwiYnJlYWtcIiB8fCB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8IHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2godHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQoaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0oXG4vLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4vLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3Rcbi8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4odHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGdsb2JhbCkpID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDogKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6ICh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHNlbGYpKSA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB1bmRlZmluZWQpO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oOTIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxKShtb2R1bGUpKSlcblxuLyoqKi8gfSksXG4vKiAzMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXygzMzYpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKS5SZWdFeHAuZXNjYXBlO1xuXG4vKioqLyB9KSxcbi8qIDMzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgJHJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzcpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHsgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpIHtcbiAgICByZXR1cm4gJHJlKGl0KTtcbiAgfSB9KTtcblxuLyoqKi8gfSksXG4vKiAzMzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogMzM4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qIGVzbGludCBtYXgtbGVuOiAwICovXG4vLyBUT0RPOiBldmVudHVhbGx5IGRlcHJlY2F0ZSB0aGlzIGNvbnNvbGUudHJhY2UoXCJ1c2UgdGhlIGBiYWJlbC1yZWdpc3RlcmAgcGFja2FnZSBpbnN0ZWFkIG9mIGBiYWJlbC1jb3JlL3JlZ2lzdGVyYFwiKTtcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzkpO1xuXG4vKioqLyB9KSxcbi8qIDMzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pOyJdfQ==

/*!
 * Krig.io
 * Krig.io webpage, using the fastshell boilerplate.
 * https://krig.io
 * @author Krig.io
 * @version 0.0.1
 * Copyright 2018. UNLICENSED licensed.
 */
!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var i=n(1),o=(r(i),n(2)),s=r(o),a=n(6);r(a);n(!function(){var e=new Error('Cannot find module "jquery-scrollify"');throw e.code="MODULE_NOT_FOUND",e}()),document.addEventListener("DOMContentLoaded",function(){var e=new s["default"](document.getElementById("nokey"));e.startAnimation()})},function(e,t,n){"use strict";function r(e,t){return!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))}function i(e,t){r(e,t)||(e.className+=" "+t)}function o(e,t){if(r(e,t)){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ")}}function s(){document.getElementById("panel-toggle").addEventListener("click",a)}function a(){var e=document.getElementById("work-panel");r(e,"open")?o(e,"open"):i(e,"open")}document.addEventListener("readystatechange",function(){"complete"===document.readyState&&s()})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(3),a=r(s),u=n(4),c=r(u),l=n(5),f=r(l),d=function(e){},p=function(){function e(t){var n=this;i(this,e),this.canvas=t,this.context=this.canvas.getContext("2d"),this.rect=new c["default"](0,0,parseFloat(window.innerWidth),parseFloat(window.innerHeight)),this.canvas.setAttribute("width",this.rect.Width),this.canvas.setAttribute("height",this.rect.Height),this.maxDistance=260,this.points=[];for(var r=0;r<20;r++){var o=this.getRandomPos(!0);this.points.push({pos:o,velocity:this.getRandomVelocity(o),color:new f["default"](230,230,230,1),r:2,phase:10*Math.random()})}this.mousePoint=Object.assign({},this.points[0]),this.mousePoint.alpha=0,this.points.push(this.mousePoint),d(this.mousePoint),this.lastFrame=Date.now(),window.addEventListener("resize",this.resize.bind(this)),this.canvas.addEventListener("mouseenter",function(){n.mousePoint.velocity=new a["default"](0,0)}),this.canvas.addEventListener("mouseleave",function(){n.mousePoint.pos=new a["default"](0,0)}),this.canvas.addEventListener("mousemove",function(e){n.mousePoint.pos.X=e.pageX,n.mousePoint.pos.Y=e.pageY})}return o(e,[{key:"getRandomPos",value:function(e){var t=new a["default"](Math.random()*this.rect.width,Math.random()*this.rect.height);if(e)return t;switch(Math.ceil(4*Math.random())-1){case 0:t.x=0;break;case 1:t.x=this.rect.width;break;case 2:t.y=0;break;case 3:t.y=this.rect.height}return t}},{key:"getRandomVelocity",value:function(e){var t=new a["default"](Math.random(),Math.random());return this.rect.inside(e,-10)||(t.x*=0===e.x?1:-1,t.y*=0===e.y?1:-1),t}},{key:"update",value:function(e){var t=this;this.points.forEach(function(n){n.pos.X+=n.velocity.X/20*e,n.pos.Y+=n.velocity.Y/20*e,t.rect.inside(n.pos,50)||(n.pos=t.getRandomPos(),n.velocity=t.getRandomVelocity(n.pos),n.phase=10*Math.random()),n.phase+=.003,n.color.Alpha=Math.abs(Math.cos(n.phase))})}},{key:"resize",value:function(){d("Resize called."),this.rect.Width=parseFloat(window.innerWidth),this.rect.Height=parseFloat(window.innerHeight),this.canvas.setAttribute("width",this.rect.Width),this.canvas.setAttribute("height",this.rect.Height),d("The size of the bounding rect is: ("+this.rect.X+", "+this.rect.Y+", "+this.rect.Width+", "+this.rect.Height+")")}},{key:"render",value:function(){var e=Date.now()-this.lastFrame;this.context.clearRect(this.rect.X,this.rect.Y,this.rect.Width,this.rect.Height),this.drawPoints(),this.drawLines(),this.update(e),this.lastFrame=Date.now(),window.requestAnimationFrame(this.render.bind(this))}},{key:"drawPoints",value:function(){var e=this;this.points.forEach(function(t){if(!t.hasOwnProperty("type")){var n=t.pos;e.context.fillStyle="rgba("+t.color.Red+", "+t.color.Green+", "+t.color.Blue+", "+t.color.Alpha+")",e.context.beginPath(),e.context.arc(n.X,n.Y,t.r,0,2*Math.PI,!0),e.context.closePath(),e.context.fill()}})}},{key:"drawLines",value:function(){for(var e=void 0,t=void 0,n=0;n<this.points.length;n++)for(var r=n+1;r<this.points.length;r++){var i=this.points[n],o=this.points[r];e=Math.sqrt(Math.pow(i.pos.X-o.pos.X,2)+Math.pow(i.pos.Y-o.pos.Y,2))/this.maxDistance,e<1&&(t=1-e,this.context.strokeStyle="rgba(150, 150, 150, "+t+")",this.context.lineWidth=.8,this.context.beginPath(),this.context.moveTo(i.pos.X,i.pos.Y),this.context.lineTo(o.pos.X,o.pos.Y),this.context.stroke(),this.context.closePath())}}},{key:"startAnimation",value:function(){this.resize(),this.render()}}]),e}();t["default"]=p},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t,n){r(this,e),this.x=t,this.y=n}return i(e,[{key:"X",set:function(e){this.x=e},get:function(){return this.x}},{key:"Y",set:function(e){this.y=e},get:function(){return this.y}}]),e}();t["default"]=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t,n,i,o){r(this,e),this.x=t,this.y=n,this.width=i,this.height=o}return i(e,[{key:"inside",value:function(e,t){return e.X>this.x-t&&e.X<this.x+this.width+t&&e.Y>this.y-t&&e.Y<this.y+this.height+t}},{key:"X",get:function(){return this.x},set:function(e){this.x=e}},{key:"Y",get:function(){return this.y},set:function(e){this.y=e}},{key:"Width",get:function(){return this.width},set:function(e){this.width=e}},{key:"Height",get:function(){return this.height},set:function(e){this.height=e}}]),e}();t["default"]=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t,n,i,o){r(this,e),this.r=t,this.g=n,this.b=i,this.a=o}return i(e,[{key:"Red",get:function(){return this.r},set:function(e){this.r=e}},{key:"Green",get:function(){return this.g},set:function(e){this.g=e}},{key:"Blue",get:function(){return this.b},set:function(e){this.b=e}},{key:"Alpha",get:function(){return this.a},set:function(e){this.a=e}}]),e}();t["default"]=o},function(e,t,n){"use strict";(function(e){var n,r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(t,n){"object"===i(e)&&"object"===i(e.exports)?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:void 0,function(o,s){function a(e,t){t=t||ae;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function u(e){var t=!!e&&"length"in e&&e.length,n=be.type(e);return"function"!==n&&!be.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function c(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function l(e,t,n){return be.isFunction(t)?be.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?be.grep(e,function(e){return e===t!==n}):"string"!=typeof t?be.grep(e,function(e){return de.call(t,e)>-1!==n}):Ae.test(t)?be.filter(t,e,n):(t=be.filter(t,e),be.grep(e,function(e){return de.call(t,e)>-1!==n&&1===e.nodeType}))}function f(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function d(e){var t={};return be.each(e.match(Fe)||[],function(e,n){t[n]=!0}),t}function p(e){return e}function h(e){throw e}function g(e,t,n,r){var i;try{e&&be.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&be.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function y(){ae.removeEventListener("DOMContentLoaded",y),o.removeEventListener("load",y),be.ready()}function v(){this.expando=be.expando+v.uid++}function m(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:_e.test(e)?JSON.parse(e):e)}function x(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Xe,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n=m(n)}catch(i){}Be.set(e,t,n)}else n=void 0;return n}function b(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return be.css(e,t,"")},u=a(),c=n&&n[3]||(be.cssNumber[t]?"":"px"),l=(be.cssNumber[t]||"px"!==c&&+u)&&Ye.exec(be.css(e,t));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+u||1;do o=o||".5",l/=o,be.style(e,t,l+c);while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function w(e){var t,n=e.ownerDocument,r=e.nodeName,i=Qe[r];return i?i:(t=n.body.appendChild(n.createElement(r)),i=be.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),Qe[r]=i,i)}function T(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)r=e[o],r.style&&(n=r.style.display,t?("none"===n&&(i[o]=$e.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Ve(r)&&(i[o]=w(r))):"none"!==n&&(i[o]="none",$e.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function C(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&c(e,t)?be.merge([e],n):n}function k(e,t){for(var n=0,r=e.length;n<r;n++)$e.set(e[n],"globalEval",!t||$e.get(t[n],"globalEval"))}function E(e,t,n,r,i){for(var o,s,a,u,c,l,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if(o=e[p],o||0===o)if("object"===be.type(o))be.merge(d,o.nodeType?[o]:o);else if(tt.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(Ke.exec(o)||["",""])[1].toLowerCase(),u=et[a]||et._default,s.innerHTML=u[1]+be.htmlPrefilter(o)+u[2],l=u[0];l--;)s=s.lastChild;be.merge(d,s.childNodes),s=f.firstChild,s.textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(r&&be.inArray(o,r)>-1)i&&i.push(o);else if(c=be.contains(o.ownerDocument,o),s=C(f.appendChild(o),"script"),c&&k(s),n)for(l=0;o=s[l++];)Ze.test(o.type||"")&&n.push(o);return f}function S(){return!0}function j(){return!1}function N(){try{return ae.activeElement}catch(e){}}function D(e,t,n,r,o,s){var a,u;if("object"===("undefined"==typeof t?"undefined":i(t))){"string"!=typeof n&&(r=r||n,n=void 0);for(u in t)D(e,u,n,r,t[u],s);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),o===!1)o=j;else if(!o)return e;return 1===s&&(a=o,o=function(e){return be().off(e),a.apply(this,arguments)},o.guid=a.guid||(a.guid=be.guid++)),e.each(function(){be.event.add(this,t,o,r,n)})}function A(e,t){return c(e,"table")&&c(11!==t.nodeType?t:t.firstChild,"tr")?be(">tbody",e)[0]||e:e}function L(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function q(e){var t=ct.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function P(e,t){var n,r,i,o,s,a,u,c;if(1===t.nodeType){if($e.hasData(e)&&(o=$e.access(e),s=$e.set(t,o),c=o.events)){delete s.handle,s.events={};for(i in c)for(n=0,r=c[i].length;n<r;n++)be.event.add(t,i,c[i][n])}Be.hasData(e)&&(a=Be.access(e),u=be.extend({},a),Be.set(t,u))}}function H(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Je.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function O(e,t,n,r){t=le.apply([],t);var i,o,s,u,c,l,f=0,d=e.length,p=d-1,h=t[0],g=be.isFunction(h);if(g||d>1&&"string"==typeof h&&!me.checkClone&&ut.test(h))return e.each(function(i){var o=e.eq(i);g&&(t[0]=h.call(this,i,o.html())),O(o,t,n,r)});if(d&&(i=E(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=be.map(C(i,"script"),L),u=s.length;f<d;f++)c=i,f!==p&&(c=be.clone(c,!0,!0),u&&be.merge(s,C(c,"script"))),n.call(e[f],c,f);if(u)for(l=s[s.length-1].ownerDocument,be.map(s,q),f=0;f<u;f++)c=s[f],Ze.test(c.type||"")&&!$e.access(c,"globalEval")&&be.contains(l,c)&&(c.src?be._evalUrl&&be._evalUrl(c.src):a(c.textContent.replace(lt,""),l))}return e}function F(e,t,n){for(var r,i=t?be.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||be.cleanData(C(r)),r.parentNode&&(n&&be.contains(r.ownerDocument,r)&&k(C(r,"script")),r.parentNode.removeChild(r));return e}function M(e,t,n){var r,i,o,s,a=e.style;return n=n||pt(e),n&&(s=n.getPropertyValue(t)||n[t],""!==s||be.contains(e.ownerDocument,e)||(s=be.style(e,t)),!me.pixelMarginRight()&&dt.test(s)&&ft.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function R(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function W(e){if(e in xt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=mt.length;n--;)if(e=mt[n]+t,e in xt)return e}function I(e){var t=be.cssProps[e];return t||(t=be.cssProps[e]=W(e)||e),t}function $(e,t,n){var r=Ye.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function B(e,t,n,r,i){var o,s=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(s+=be.css(e,n+Ue[o],!0,i)),r?("content"===n&&(s-=be.css(e,"padding"+Ue[o],!0,i)),"margin"!==n&&(s-=be.css(e,"border"+Ue[o]+"Width",!0,i))):(s+=be.css(e,"padding"+Ue[o],!0,i),"padding"!==n&&(s+=be.css(e,"border"+Ue[o]+"Width",!0,i)));return s}function _(e,t,n){var r,i=pt(e),o=M(e,t,i),s="border-box"===be.css(e,"boxSizing",!1,i);return dt.test(o)?o:(r=s&&(me.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),o=parseFloat(o)||0,o+B(e,t,n||(s?"border":"content"),r,i)+"px")}function X(e,t,n,r,i){return new X.prototype.init(e,t,n,r,i)}function z(){wt&&(ae.hidden===!1&&o.requestAnimationFrame?o.requestAnimationFrame(z):o.setTimeout(z,be.fx.interval),be.fx.tick())}function Y(){return o.setTimeout(function(){bt=void 0}),bt=be.now()}function U(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=Ue[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function V(e,t,n){for(var r,i=(J.tweeners[t]||[]).concat(J.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function G(e,t,n){var r,i,o,s,a,u,c,l,f="width"in t||"height"in t,d=this,p={},h=e.style,g=e.nodeType&&Ve(e),y=$e.get(e,"fxshow");n.queue||(s=be._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,be.queue(e,"fx").length||s.empty.fire()})}));for(r in t)if(i=t[r],Tt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}p[r]=y&&y[r]||be.style(e,r)}if(u=!be.isEmptyObject(t),u||!be.isEmptyObject(p)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=y&&y.display,null==c&&(c=$e.get(e,"display")),l=be.css(e,"display"),"none"===l&&(c?l=c:(T([e],!0),c=e.style.display||c,l=be.css(e,"display"),T([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===be.css(e,"float")&&(u||(d.done(function(){h.display=c}),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in p)u||(y?"hidden"in y&&(g=y.hidden):y=$e.access(e,"fxshow",{display:c}),o&&(y.hidden=!g),g&&T([e],!0),d.done(function(){g||T([e]),$e.remove(e,"fxshow");for(r in p)be.style(e,r,p[r])})),u=V(g?y[r]:0,r,d),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}}function Q(e,t){var n,r,i,o,s;for(n in e)if(r=be.camelCase(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=be.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function J(e,t,n){var r,i,o=0,s=J.prefilters.length,a=be.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=bt||Y(),n=Math.max(0,c.startTime+c.duration-t),r=n/c.duration||0,o=1-r,s=0,u=c.tweens.length;s<u;s++)c.tweens[s].run(o);return a.notifyWith(e,[c,o,n]),o<1&&u?n:(u||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:be.extend({},t),opts:be.extend(!0,{specialEasing:{},easing:be.easing._default},n),originalProperties:t,originalOptions:n,startTime:bt||Y(),duration:n.duration,tweens:[],createTween:function(t,n){var r=be.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),l=c.props;for(Q(l,c.opts.specialEasing);o<s;o++)if(r=J.prefilters[o].call(c,e,l,c.opts))return be.isFunction(r.stop)&&(be._queueHooks(c.elem,c.opts.queue).stop=be.proxy(r.stop,r)),r;return be.map(l,V,c),be.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),be.fx.timer(be.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}function K(e){var t=e.match(Fe)||[];return t.join(" ")}function Z(e){return e.getAttribute&&e.getAttribute("class")||""}function ee(e,t,n,r){var o;if(Array.isArray(t))be.each(t,function(t,o){n||Pt.test(e)?r(e,o):ee(e+"["+("object"===("undefined"==typeof o?"undefined":i(o))&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==be.type(t))r(e,t);else for(o in t)ee(e+"["+o+"]",t[o],n,r)}function te(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Fe)||[];if(be.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function ne(e,t,n,r){function i(a){var u;return o[a]=!0,be.each(e[a]||[],function(e,a){var c=a(t,n,r);return"string"!=typeof c||s||o[c]?s?!(u=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),u}var o={},s=e===zt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function re(e,t){var n,r,i=be.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&be.extend(!0,e,r),e}function ie(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}function oe(e,t,n,r){var i,o,s,a,u,c={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=c[u+" "+o]||c["* "+o],!s)for(i in c)if(a=i.split(" "),a[1]===o&&(s=c[u+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[i]:c[i]!==!0&&(o=a[0],l.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}var se=[],ae=o.document,ue=Object.getPrototypeOf,ce=se.slice,le=se.concat,fe=se.push,de=se.indexOf,pe={},he=pe.toString,ge=pe.hasOwnProperty,ye=ge.toString,ve=ye.call(Object),me={},xe="3.2.1",be=function en(e,t){return new en.fn.init(e,t)},we=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,Te=/^-ms-/,Ce=/-([a-z])/g,ke=function(e,t){return t.toUpperCase()};be.fn=be.prototype={jquery:xe,constructor:be,length:0,toArray:function(){return ce.call(this)},get:function(e){return null==e?ce.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=be.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return be.each(this,e)},map:function(e){return this.pushStack(be.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ce.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:fe,sort:se.sort,splice:se.splice},be.extend=be.fn.extend=function(){var e,t,n,r,o,s,a=arguments[0]||{},u=1,c=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[u]||{},u++),"object"===("undefined"==typeof a?"undefined":i(a))||be.isFunction(a)||(a={}),u===c&&(a=this,u--);u<c;u++)if(null!=(e=arguments[u]))for(t in e)n=a[t],r=e[t],a!==r&&(l&&r&&(be.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,s=n&&Array.isArray(n)?n:[]):s=n&&be.isPlainObject(n)?n:{},a[t]=be.extend(l,s,r)):void 0!==r&&(a[t]=r));return a},be.extend({expando:"jQuery"+(xe+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===be.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=be.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==he.call(e))&&(!(t=ue(e))||(n=ge.call(t,"constructor")&&t.constructor,"function"==typeof n&&ye.call(n)===ve))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"===("undefined"==typeof e?"undefined":i(e))||"function"==typeof e?pe[he.call(e)]||"object":"undefined"==typeof e?"undefined":i(e)},globalEval:function(e){a(e)},camelCase:function(e){return e.replace(Te,"ms-").replace(Ce,ke)},each:function(e,t){var n,r=0;if(u(e))for(n=e.length;r<n&&t.call(e[r],r,e[r])!==!1;r++);else for(r in e)if(t.call(e[r],r,e[r])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(we,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(u(Object(e))?be.merge(n,"string"==typeof e?[e]:e):fe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:de.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;o<s;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(u(e))for(r=e.length;o<r;o++)i=t(e[o],o,n),null!=i&&s.push(i);else for(o in e)i=t(e[o],o,n),null!=i&&s.push(i);return le.apply([],s)},guid:1,proxy:function tn(e,t){var n,r,tn;if("string"==typeof t&&(n=e[t],t=e,e=n),be.isFunction(e))return r=ce.call(arguments,2),tn=function(){return e.apply(t||this,r.concat(ce.call(arguments)))},tn.guid=e.guid=e.guid||be.guid++,tn},now:Date.now,support:me}),"function"==typeof Symbol&&(be.fn[Symbol.iterator]=se[Symbol.iterator]),be.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){pe["[object "+t+"]"]=t.toLowerCase()});var Ee=function(e){function t(e,t,n,r){var i,o,s,a,u,c,l,d=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:$)!==P&&q(t),t=t||P,O)){if(11!==h&&(u=ve.exec(e)))if(i=u[1]){if(9===h){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(d&&(s=d.getElementById(i))&&W(t,s)&&s.id===i)return n.push(s),n}else{if(u[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&T.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(T.qsa&&!Y[e+" "]&&(!F||!F.test(e))){if(1!==h)d=t,l=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(we,Te):t.setAttribute("id",a=I),c=S(e),o=c.length;o--;)c[o]="#"+a+" "+p(c[o]);l=c.join(","),d=me.test(e)&&f(t.parentNode)||t}if(l)try{return K.apply(n,d.querySelectorAll(l)),n}catch(g){}finally{a===I&&t.removeAttribute("id")}}}return N(e.replace(ae,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[I]=!0,e}function i(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)C.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return function(t){return"form"in t?t.parentNode&&t.disabled===!1?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ke(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function f(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function d(){}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=_++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,u){var c,l,f,d=[B,a];if(u){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(f=t[I]||(t[I]={}),l=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[o])&&c[0]===B&&c[1]===a)return d[2]=c[2];if(l[o]=d,d[2]=e(t,n,u))return!0}return!1}}function g(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function y(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function v(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,c=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),c&&t.push(a)));return s}function m(e,t,n,i,o,s){return i&&!i[I]&&(i=m(i)),o&&!o[I]&&(o=m(o,s)),r(function(r,s,a,u){var c,l,f,d=[],p=[],h=s.length,g=r||y(t||"*",a.nodeType?[a]:a,[]),m=!e||!r&&t?g:v(g,d,e,a,u),x=n?o||(r?e:h||i)?[]:s:m;if(n&&n(m,x,a,u),i)for(c=v(x,p),i(c,[],a,u),l=c.length;l--;)(f=c[l])&&(x[p[l]]=!(m[p[l]]=f));if(r){if(o||e){if(o){for(c=[],l=x.length;l--;)(f=x[l])&&c.push(m[l]=f);o(null,x=[],c,u)}for(l=x.length;l--;)(f=x[l])&&(c=o?ee(r,f):d[l])>-1&&(r[c]=!(s[c]=f))}}else x=v(x===s?x.splice(h,x.length):x),o?o(null,s,x,u):K.apply(s,x)})}function x(e){for(var t,n,r,i=e.length,o=C.relative[e[0].type],s=o||C.relative[" "],a=o?1:0,u=h(function(e){return e===t},s,!0),c=h(function(e){return ee(t,e)>-1},s,!0),l=[function(e,n,r){var i=!o&&(r||n!==D)||((t=n).nodeType?u(e,n,r):c(e,n,r));return t=null,i}];a<i;a++)if(n=C.relative[e[a].type])l=[h(g(l),n)];else{if(n=C.filter[e[a].type].apply(null,e[a].matches),n[I]){for(r=++a;r<i&&!C.relative[e[r].type];r++);return m(a>1&&g(l),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,a<r&&x(e.slice(a,r)),r<i&&x(e=e.slice(r)),r<i&&p(e))}l.push(n)}return g(l)}function b(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,c){var l,f,d,p=0,h="0",g=r&&[],y=[],m=D,x=r||o&&C.find.TAG("*",c),b=B+=null==m?1:Math.random()||.1,w=x.length;for(c&&(D=s===P||s||c);h!==w&&null!=(l=x[h]);h++){if(o&&l){for(f=0,s||l.ownerDocument===P||(q(l),a=!O);d=e[f++];)if(d(l,s||P,a)){u.push(l);break}c&&(B=b)}i&&((l=!d&&l)&&p--,r&&g.push(l))}if(p+=h,i&&h!==p){for(f=0;d=n[f++];)d(g,y,s,a);if(r){if(p>0)for(;h--;)g[h]||y[h]||(y[h]=Q.call(u));y=v(y)}K.apply(u,y),c&&!r&&y.length>0&&p+n.length>1&&t.uniqueSort(u)}return c&&(B=b,D=m),g};return i?r(s):s}var w,T,C,k,E,S,j,N,D,A,L,q,P,H,O,F,M,R,W,I="sizzle"+1*new Date,$=e.document,B=0,_=0,X=n(),z=n(),Y=n(),U=function(e,t){return e===t&&(L=!0),0},V={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),le=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(oe),de=new RegExp("^"+re+"$"),pe={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ye=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,xe=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),be=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Te=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Ce=function(){q()},ke=h(function(e){return e.disabled===!0&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{K.apply(G=Z.call($.childNodes),$.childNodes),G[$.childNodes.length].nodeType}catch(Ee){K={apply:G.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}T=t.support={},E=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},q=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:$;return r!==P&&9===r.nodeType&&r.documentElement?(P=r,H=P.documentElement,O=!E(P),$!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),T.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),T.getElementsByTagName=i(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),T.getElementsByClassName=ye.test(P.getElementsByClassName),T.getById=i(function(e){return H.appendChild(e).id=I,!P.getElementsByName||!P.getElementsByName(I).length}),T.getById?(C.filter.ID=function(e){var t=e.replace(xe,be);return function(e){return e.getAttribute("id")===t}},C.find.ID=function(e,t){
if("undefined"!=typeof t.getElementById&&O){var n=t.getElementById(e);return n?[n]:[]}}):(C.filter.ID=function(e){var t=e.replace(xe,be);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var n,r,i,o=t.getElementById(e);if(o){if(n=o.getAttributeNode("id"),n&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if(n=o.getAttributeNode("id"),n&&n.value===e)return[o]}return[]}}),C.find.TAG=T.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):T.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},C.find.CLASS=T.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&O)return t.getElementsByClassName(e)},M=[],F=[],(T.qsa=ye.test(P.querySelectorAll))&&(i(function(e){H.appendChild(e).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+I+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+I+"+*").length||F.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+ne+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&F.push(":enabled",":disabled"),H.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(T.matchesSelector=ye.test(R=H.matches||H.webkitMatchesSelector||H.mozMatchesSelector||H.oMatchesSelector||H.msMatchesSelector))&&i(function(e){T.disconnectedMatch=R.call(e,"*"),R.call(e,"[s!='']:x"),M.push("!=",oe)}),F=F.length&&new RegExp(F.join("|")),M=M.length&&new RegExp(M.join("|")),t=ye.test(H.compareDocumentPosition),W=t||ye.test(H.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return L=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!T.sortDetached&&t.compareDocumentPosition(e)===n?e===P||e.ownerDocument===$&&W($,e)?-1:t===P||t.ownerDocument===$&&W($,t)?1:A?ee(A,e)-ee(A,t):0:4&n?-1:1)}:function(e,t){if(e===t)return L=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],u=[t];if(!i||!o)return e===P?-1:t===P?1:i?-1:o?1:A?ee(A,e)-ee(A,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?s(a[r],u[r]):a[r]===$?-1:u[r]===$?1:0},P):P},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==P&&q(e),n=n.replace(le,"='$1']"),T.matchesSelector&&O&&!Y[n+" "]&&(!M||!M.test(n))&&(!F||!F.test(n)))try{var r=R.call(e,n);if(r||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,P,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==P&&q(e),W(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==P&&q(e);var n=C.attrHandle[t.toLowerCase()],r=n&&V.call(C.attrHandle,t.toLowerCase())?n(e,t,!O):void 0;return void 0!==r?r:T.attributes||!O?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(we,Te)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(L=!T.detectDuplicates,A=!T.sortStable&&e.slice(0),e.sort(U),L){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return A=null,e},k=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=k(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=k(t);return n},C=t.selectors={cacheLength:50,createPseudo:r,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,be),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,be),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,be).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=X[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&X(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,p,h,g=o!==s?"nextSibling":"previousSibling",y=t.parentNode,v=a&&t.nodeName.toLowerCase(),m=!u&&!a,x=!1;if(y){if(o){for(;g;){for(d=t;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?y.firstChild:y.lastChild],s&&m){for(d=y,f=d[I]||(d[I]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),c=l[e]||[],p=c[0]===B&&c[1],x=p&&c[2],d=p&&y.childNodes[p];d=++p&&d&&d[g]||(x=p=0)||h.pop();)if(1===d.nodeType&&++x&&d===t){l[e]=[B,p,x];break}}else if(m&&(d=t,f=d[I]||(d[I]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),c=l[e]||[],p=c[0]===B&&c[1],x=p),x===!1)for(;(d=++p&&d&&d[g]||(x=p=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++x||(m&&(f=d[I]||(d[I]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),l[e]=[B,x]),d!==t)););return x-=i,x===r||x%r===0&&x/r>=0}}},PSEUDO:function(e,n){var i,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[I]?o(n):o.length>1?(i=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=j(e.replace(ae,"$1"));return i[I]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(xe,be),function(t){return(t.textContent||t.innerText||k(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,be).toLowerCase(),function(t){var n;do if(n=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===H},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=u(w);return d.prototype=C.filters=C.pseudos,C.setFilters=new d,S=t.tokenize=function(e,n){var r,i,o,s,a,u,c,l=z[e+" "];if(l)return n?0:l.slice(0);for(a=e,u=[],c=C.preFilter;a;){r&&!(i=ue.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=ce.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ae," ")}),a=a.slice(r.length));for(s in C.filter)!(i=pe[s].exec(a))||c[s]&&!(i=c[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):z(e,u).slice(0)},j=t.compile=function(e,t){var n,r=[],i=[],o=Y[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)o=x(t[n]),o[I]?r.push(o):i.push(o);o=Y(e,b(i,r)),o.selector=e}return o},N=t.select=function(e,t,n,r){var i,o,s,a,u,c="function"==typeof e&&e,l=!r&&S(e=c.selector||e);if(n=n||[],1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&9===t.nodeType&&O&&C.relative[o[1].type]){if(t=(C.find.ID(s.matches[0].replace(xe,be),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=pe.needsContext.test(e)?0:o.length;i--&&(s=o[i],!C.relative[a=s.type]);)if((u=C.find[a])&&(r=u(s.matches[0].replace(xe,be),me.test(o[0].type)&&f(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(c||j(e,l))(r,t,!O,n,!t||me.test(e)&&f(t.parentNode)||t),n},T.sortStable=I.split("").sort(U).join("")===I,T.detectDuplicates=!!L,q(),T.sortDetached=i(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),T.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(o);be.find=Ee,be.expr=Ee.selectors,be.expr[":"]=be.expr.pseudos,be.uniqueSort=be.unique=Ee.uniqueSort,be.text=Ee.getText,be.isXMLDoc=Ee.isXML,be.contains=Ee.contains,be.escapeSelector=Ee.escape;var Se=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&be(e).is(n))break;r.push(e)}return r},je=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ne=be.expr.match.needsContext,De=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ae=/^.[^:#\[\.,]*$/;be.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?be.find.matchesSelector(r,e)?[r]:[]:be.find.matches(e,be.grep(t,function(e){return 1===e.nodeType}))},be.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(be(e).filter(function(){for(t=0;t<r;t++)if(be.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)be.find(e,i[t],n);return r>1?be.uniqueSort(n):n},filter:function(e){return this.pushStack(l(this,e||[],!1))},not:function(e){return this.pushStack(l(this,e||[],!0))},is:function(e){return!!l(this,"string"==typeof e&&Ne.test(e)?be(e):e||[],!1).length}});var Le,qe=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Pe=be.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Le,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:qe.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof be?t[0]:t,be.merge(this,be.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:ae,!0)),De.test(r[1])&&be.isPlainObject(t))for(r in t)be.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=ae.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):be.isFunction(e)?void 0!==n.ready?n.ready(e):e(be):be.makeArray(e,this)};Pe.prototype=be.fn,Le=be(ae);var He=/^(?:parents|prev(?:Until|All))/,Oe={children:!0,contents:!0,next:!0,prev:!0};be.fn.extend({has:function(e){var t=be(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(be.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&be(e);if(!Ne.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&be.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?be.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?de.call(be(e),this[0]):de.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(be.uniqueSort(be.merge(this.get(),be(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),be.each({parent:function nn(e){var nn=e.parentNode;return nn&&11!==nn.nodeType?nn:null},parents:function(e){return Se(e,"parentNode")},parentsUntil:function(e,t,n){return Se(e,"parentNode",n)},next:function(e){return f(e,"nextSibling")},prev:function(e){return f(e,"previousSibling")},nextAll:function(e){return Se(e,"nextSibling")},prevAll:function(e){return Se(e,"previousSibling")},nextUntil:function(e,t,n){return Se(e,"nextSibling",n)},prevUntil:function(e,t,n){return Se(e,"previousSibling",n)},siblings:function(e){return je((e.parentNode||{}).firstChild,e)},children:function(e){return je(e.firstChild)},contents:function(e){return c(e,"iframe")?e.contentDocument:(c(e,"template")&&(e=e.content||e),be.merge([],e.childNodes))}},function(e,t){be.fn[e]=function(n,r){var i=be.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=be.filter(r,i)),this.length>1&&(Oe[e]||be.uniqueSort(i),He.test(e)&&i.reverse()),this.pushStack(i)}});var Fe=/[^\x20\t\r\n\f]+/g;be.Callbacks=function(e){e="string"==typeof e?d(e):be.extend({},e);var t,n,r,i,o=[],s=[],a=-1,u=function(){for(i=i||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)o[a].apply(n[0],n[1])===!1&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function r(t){be.each(t,function(t,n){be.isFunction(n)?e.unique&&c.has(n)||o.push(n):n&&n.length&&"string"!==be.type(n)&&r(n)})}(arguments),n&&!t&&u()),this},remove:function(){return be.each(arguments,function(e,t){for(var n;(n=be.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(e){return e?be.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},be.extend({Deferred:function(e){var t=[["notify","progress",be.Callbacks("memory"),be.Callbacks("memory"),2],["resolve","done",be.Callbacks("once memory"),be.Callbacks("once memory"),0,"resolved"],["reject","fail",be.Callbacks("once memory"),be.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return r.then(null,e)},pipe:function(){var e=arguments;return be.Deferred(function(n){be.each(t,function(t,r){var i=be.isFunction(e[r[4]])&&e[r[4]];s[r[1]](function(){var e=i&&i.apply(this,arguments);e&&be.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,n,r){function s(e,t,n,r){return function(){var u=this,c=arguments,l=function(){var o,l;if(!(e<a)){if(o=n.apply(u,c),o===t.promise())throw new TypeError("Thenable self-resolution");l=o&&("object"===("undefined"==typeof o?"undefined":i(o))||"function"==typeof o)&&o.then,be.isFunction(l)?r?l.call(o,s(a,t,p,r),s(a,t,h,r)):(a++,l.call(o,s(a,t,p,r),s(a,t,h,r),s(a,t,p,t.notifyWith))):(n!==p&&(u=void 0,c=[o]),(r||t.resolveWith)(u,c))}},f=r?l:function(){try{l()}catch(r){be.Deferred.exceptionHook&&be.Deferred.exceptionHook(r,f.stackTrace),e+1>=a&&(n!==h&&(u=void 0,c=[r]),t.rejectWith(u,c))}};e?f():(be.Deferred.getStackHook&&(f.stackTrace=be.Deferred.getStackHook()),o.setTimeout(f))}}var a=0;return be.Deferred(function(i){t[0][3].add(s(0,i,be.isFunction(r)?r:p,i.notifyWith)),t[1][3].add(s(0,i,be.isFunction(e)?e:p)),t[2][3].add(s(0,i,be.isFunction(n)?n:h))}).promise()},promise:function(e){return null!=e?be.extend(e,r):r}},s={};return be.each(t,function(e,i){var o=i[2],a=i[5];r[i[1]]=o.add,a&&o.add(function(){n=a},t[3-e][2].disable,t[0][2].lock),o.add(i[3].fire),s[i[0]]=function(){return s[i[0]+"With"](this===s?void 0:this,arguments),this},s[i[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,n=t,r=Array(n),i=ce.call(arguments),o=be.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?ce.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(g(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||be.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)g(i[n],s(n),o.reject);return o.promise()}});var Me=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;be.Deferred.exceptionHook=function(e,t){o.console&&o.console.warn&&e&&Me.test(e.name)&&o.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},be.readyException=function(e){o.setTimeout(function(){throw e})};var Re=be.Deferred();be.fn.ready=function(e){return Re.then(e)["catch"](function(e){be.readyException(e)}),this},be.extend({isReady:!1,readyWait:1,ready:function(e){(e===!0?--be.readyWait:be.isReady)||(be.isReady=!0,e!==!0&&--be.readyWait>0||Re.resolveWith(ae,[be]))}}),be.ready.then=Re.then,"complete"===ae.readyState||"loading"!==ae.readyState&&!ae.documentElement.doScroll?o.setTimeout(be.ready):(ae.addEventListener("DOMContentLoaded",y),o.addEventListener("load",y));var We=function rn(e,t,n,r,i,o,s){var a=0,u=e.length,c=null==n;if("object"===be.type(n)){i=!0;for(a in n)rn(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,be.isFunction(r)||(s=!0),c&&(s?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(be(e),n)})),t))for(;a<u;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:c?t.call(e):u?t(e[0],n):o},Ie=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};v.uid=1,v.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ie(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[be.camelCase(t)]=n;else for(r in t)i[be.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][be.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){Array.isArray(t)?t=t.map(be.camelCase):(t=be.camelCase(t),t=t in r?[t]:t.match(Fe)||[]),n=t.length;for(;n--;)delete r[t[n]]}(void 0===t||be.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!be.isEmptyObject(t)}};var $e=new v,Be=new v,_e=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Xe=/[A-Z]/g;be.extend({hasData:function(e){return Be.hasData(e)||$e.hasData(e)},data:function(e,t,n){return Be.access(e,t,n)},removeData:function(e,t){Be.remove(e,t)},_data:function(e,t,n){return $e.access(e,t,n)},_removeData:function(e,t){$e.remove(e,t)}}),be.fn.extend({data:function on(e,t){var n,r,on,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(on=Be.get(o),1===o.nodeType&&!$e.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=be.camelCase(r.slice(5)),x(o,r,on[r])));$e.set(o,"hasDataAttrs",!0)}return on}return"object"===("undefined"==typeof e?"undefined":i(e))?this.each(function(){Be.set(this,e)}):We(this,function(t){var n;if(o&&void 0===t){if(n=Be.get(o,e),void 0!==n)return n;if(n=x(o,e),void 0!==n)return n}else this.each(function(){Be.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Be.remove(this,e)})}}),be.extend({queue:function sn(e,t,n){var sn;if(e)return t=(t||"fx")+"queue",sn=$e.get(e,t),n&&(!sn||Array.isArray(n)?sn=$e.access(e,t,be.makeArray(n)):sn.push(n)),sn||[]},dequeue:function(e,t){t=t||"fx";var n=be.queue(e,t),r=n.length,i=n.shift(),o=be._queueHooks(e,t),s=function(){be.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return $e.get(e,n)||$e.access(e,n,{empty:be.Callbacks("once memory").add(function(){$e.remove(e,[t+"queue",n])})})}}),be.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?be.queue(this[0],e):void 0===t?this:this.each(function(){var n=be.queue(this,e,t);be._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&be.dequeue(this,e)})},dequeue:function(e){return this.each(function(){be.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=be.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=$e.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var ze=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ye=new RegExp("^(?:([+-])=|)("+ze+")([a-z%]*)$","i"),Ue=["Top","Right","Bottom","Left"],Ve=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&be.contains(e.ownerDocument,e)&&"none"===be.css(e,"display")},Ge=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},Qe={};be.fn.extend({show:function(){return T(this,!0)},hide:function(){return T(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ve(this)?be(this).show():be(this).hide()})}});var Je=/^(?:checkbox|radio)$/i,Ke=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ze=/^$|\/(?:java|ecma)script/i,et={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};et.optgroup=et.option,et.tbody=et.tfoot=et.colgroup=et.caption=et.thead,et.th=et.td;var tt=/<|&#?\w+;/;!function(){var e=ae.createDocumentFragment(),t=e.appendChild(ae.createElement("div")),n=ae.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),me.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",me.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var nt=ae.documentElement,rt=/^key/,it=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ot=/^([^.]*)(?:\.(.+)|)/;be.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,c,l,f,d,p,h,g,y=$e.get(e);if(y)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&be.find.matchesSelector(nt,i),n.guid||(n.guid=be.guid++),(u=y.events)||(u=y.events={}),(s=y.handle)||(s=y.handle=function(t){return"undefined"!=typeof be&&be.event.triggered!==t.type?be.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Fe)||[""],c=t.length;c--;)a=ot.exec(t[c])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p&&(f=be.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=be.event.special[p]||{},l=be.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&be.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=u[p])||(d=u[p]=[],d.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(p,s)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,l):d.push(l),be.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,c,l,f,d,p,h,g,y=$e.hasData(e)&&$e.get(e);if(y&&(u=y.events)){for(t=(t||"").match(Fe)||[""],c=t.length;c--;)if(a=ot.exec(t[c])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p){for(f=be.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,d=u[p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)l=d[o],!i&&g!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(d.splice(o,1),l.selector&&d.delegateCount--,f.remove&&f.remove.call(e,l));s&&!d.length&&(f.teardown&&f.teardown.call(e,h,y.handle)!==!1||be.removeEvent(e,p,y.handle),delete u[p])}else for(p in u)be.event.remove(e,p+t[c],n,r,!0);be.isEmptyObject(u)&&$e.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=be.event.fix(e),u=new Array(arguments.length),c=($e.get(this,"events")||{})[a.type]||[],l=be.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,a)!==!1){for(s=be.event.handlers.call(this,a,c),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,r=((be.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u),void 0!==r&&(a.result=r)===!1&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||c.disabled!==!0)){for(o=[],s={},n=0;n<u;n++)r=t[n],i=r.selector+" ",void 0===s[i]&&(s[i]=r.needsContext?be(i,this).index(c)>-1:be.find(i,this,null,[c]).length),s[i]&&o.push(r);o.length&&a.push({elem:c,handlers:o})}return c=this,u<t.length&&a.push({elem:c,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(be.Event.prototype,e,{enumerable:!0,configurable:!0,get:be.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[be.expando]?e:new be.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==N()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===N()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&c(this,"input"))return this.click(),!1},_default:function(e){return c(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},be.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},be.Event=function(e,t){return this instanceof be.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?S:j,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&be.extend(this,t),this.timeStamp=e&&e.timeStamp||be.now(),void(this[be.expando]=!0)):new be.Event(e,t)},be.Event.prototype={constructor:be.Event,isDefaultPrevented:j,isPropagationStopped:j,isImmediatePropagationStopped:j,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=S,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=S,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=S,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},be.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&rt.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&it.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},be.event.addProp),be.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){be.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||be.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),be.fn.extend({on:function(e,t,n,r){return D(this,e,t,n,r)},one:function(e,t,n,r){return D(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,be(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"===("undefined"==typeof e?"undefined":i(e))){for(o in e)this.off(o,t,e[o]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=j),this.each(function(){be.event.remove(this,e,n,t)})}});var st=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,at=/<script|<style|<link/i,ut=/checked\s*(?:[^=]|=\s*.checked.)/i,ct=/^true\/(.*)/,lt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;be.extend({htmlPrefilter:function(e){return e.replace(st,"<$1></$2>")},clone:function an(e,t,n){var r,i,o,s,an=e.cloneNode(!0),a=be.contains(e.ownerDocument,e);if(!(me.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||be.isXMLDoc(e)))for(s=C(an),o=C(e),r=0,i=o.length;r<i;r++)H(o[r],s[r]);if(t)if(n)for(o=o||C(e),s=s||C(an),r=0,i=o.length;r<i;r++)P(o[r],s[r]);else P(e,an);return s=C(an,"script"),s.length>0&&k(s,!a&&C(e,"script")),an},cleanData:function(e){for(var t,n,r,i=be.event.special,o=0;void 0!==(n=e[o]);o++)if(Ie(n)){if(t=n[$e.expando]){if(t.events)for(r in t.events)i[r]?be.event.remove(n,r):be.removeEvent(n,r,t.handle);n[$e.expando]=void 0}n[Be.expando]&&(n[Be.expando]=void 0)}}}),be.fn.extend({detach:function(e){return F(this,e,!0);
},remove:function(e){return F(this,e)},text:function(e){return We(this,function(e){return void 0===e?be.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return O(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=A(this,e);t.appendChild(e)}})},prepend:function(){return O(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=A(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return O(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return O(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(be.cleanData(C(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return be.clone(this,e,t)})},html:function(e){return We(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!at.test(e)&&!et[(Ke.exec(e)||["",""])[1].toLowerCase()]){e=be.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(be.cleanData(C(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return O(this,arguments,function(t){var n=this.parentNode;be.inArray(this,e)<0&&(be.cleanData(C(this)),n&&n.replaceChild(t,this))},e)}}),be.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){be.fn[e]=function(e){for(var n,r=[],i=be(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),be(i[s])[t](n),fe.apply(r,n.get());return this.pushStack(r)}});var ft=/^margin/,dt=new RegExp("^("+ze+")(?!px)[a-z%]+$","i"),pt=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=o),t.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",nt.appendChild(s);var e=o.getComputedStyle(a);t="1%"!==e.top,i="2px"===e.marginLeft,n="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,nt.removeChild(s),a=null}}var t,n,r,i,s=ae.createElement("div"),a=ae.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",me.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),be.extend(me,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return e(),n},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),i}}))}();var ht=/^(none|table(?!-c[ea]).+)/,gt=/^--/,yt={position:"absolute",visibility:"hidden",display:"block"},vt={letterSpacing:"0",fontWeight:"400"},mt=["Webkit","Moz","ms"],xt=ae.createElement("div").style;be.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=M(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function un(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,s,a,u=be.camelCase(t),c=gt.test(t),un=e.style;return c||(t=I(u)),a=be.cssHooks[t]||be.cssHooks[u],void 0===n?a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:un[t]:(s="undefined"==typeof n?"undefined":i(n),"string"===s&&(o=Ye.exec(n))&&o[1]&&(n=b(e,t,o),s="number"),null!=n&&n===n&&("number"===s&&(n+=o&&o[3]||(be.cssNumber[u]?"":"px")),me.clearCloneStyle||""!==n||0!==t.indexOf("background")||(un[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(c?un.setProperty(t,n):un[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=be.camelCase(t),u=gt.test(t);return u||(t=I(a)),s=be.cssHooks[t]||be.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=M(e,t,r)),"normal"===i&&t in vt&&(i=vt[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),be.each(["height","width"],function(e,t){be.cssHooks[t]={get:function(e,n,r){if(n)return!ht.test(be.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?_(e,t,r):Ge(e,yt,function(){return _(e,t,r)})},set:function(e,n,r){var i,o=r&&pt(e),s=r&&B(e,t,r,"border-box"===be.css(e,"boxSizing",!1,o),o);return s&&(i=Ye.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=be.css(e,t)),$(e,n,s)}}}),be.cssHooks.marginLeft=R(me.reliableMarginLeft,function(e,t){if(t)return(parseFloat(M(e,"marginLeft"))||e.getBoundingClientRect().left-Ge(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),be.each({margin:"",padding:"",border:"Width"},function(e,t){be.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Ue[r]+t]=o[r]||o[r-2]||o[0];return i}},ft.test(e)||(be.cssHooks[e+t].set=$)}),be.fn.extend({css:function(e,t){return We(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=pt(e),i=t.length;s<i;s++)o[t[s]]=be.css(e,t[s],!1,r);return o}return void 0!==n?be.style(e,t,n):be.css(e,t)},e,t,arguments.length>1)}}),be.Tween=X,X.prototype={constructor:X,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||be.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(be.cssNumber[n]?"":"px")},cur:function(){var e=X.propHooks[this.prop];return e&&e.get?e.get(this):X.propHooks._default.get(this)},run:function(e){var t,n=X.propHooks[this.prop];return this.options.duration?this.pos=t=be.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):X.propHooks._default.set(this),this}},X.prototype.init.prototype=X.prototype,X.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=be.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){be.fx.step[e.prop]?be.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[be.cssProps[e.prop]]&&!be.cssHooks[e.prop]?e.elem[e.prop]=e.now:be.style(e.elem,e.prop,e.now+e.unit)}}},X.propHooks.scrollTop=X.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},be.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},be.fx=X.prototype.init,be.fx.step={};var bt,wt,Tt=/^(?:toggle|show|hide)$/,Ct=/queueHooks$/;be.Animation=be.extend(J,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return b(n.elem,e,Ye.exec(t),n),n}]},tweener:function(e,t){be.isFunction(e)?(t=e,e=["*"]):e=e.match(Fe);for(var n,r=0,i=e.length;r<i;r++)n=e[r],J.tweeners[n]=J.tweeners[n]||[],J.tweeners[n].unshift(t)},prefilters:[G],prefilter:function(e,t){t?J.prefilters.unshift(e):J.prefilters.push(e)}}),be.speed=function(e,t,n){var r=e&&"object"===("undefined"==typeof e?"undefined":i(e))?be.extend({},e):{complete:n||!n&&t||be.isFunction(e)&&e,duration:e,easing:n&&t||t&&!be.isFunction(t)&&t};return be.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in be.fx.speeds?r.duration=be.fx.speeds[r.duration]:r.duration=be.fx.speeds._default),null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){be.isFunction(r.old)&&r.old.call(this),r.queue&&be.dequeue(this,r.queue)},r},be.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ve).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=be.isEmptyObject(e),o=be.speed(t,n,r),s=function(){var t=J(this,be.extend({},e),o);(i||$e.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=be.timers,s=$e.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&Ct.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||be.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=$e.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=be.timers,s=r?r.length:0;for(n.finish=!0,be.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),be.each(["toggle","show","hide"],function(e,t){var n=be.fn[t];be.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(U(t,!0),e,r,i)}}),be.each({slideDown:U("show"),slideUp:U("hide"),slideToggle:U("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){be.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),be.timers=[],be.fx.tick=function(){var e,t=0,n=be.timers;for(bt=be.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||be.fx.stop(),bt=void 0},be.fx.timer=function(e){be.timers.push(e),be.fx.start()},be.fx.interval=13,be.fx.start=function(){wt||(wt=!0,z())},be.fx.stop=function(){wt=null},be.fx.speeds={slow:600,fast:200,_default:400},be.fn.delay=function(e,t){return e=be.fx?be.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=o.setTimeout(t,e);n.stop=function(){o.clearTimeout(r)}})},function(){var e=ae.createElement("input"),t=ae.createElement("select"),n=t.appendChild(ae.createElement("option"));e.type="checkbox",me.checkOn=""!==e.value,me.optSelected=n.selected,e=ae.createElement("input"),e.value="t",e.type="radio",me.radioValue="t"===e.value}();var kt,Et=be.expr.attrHandle;be.fn.extend({attr:function(e,t){return We(this,be.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){be.removeAttr(this,e)})}}),be.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?be.prop(e,t,n):(1===o&&be.isXMLDoc(e)||(i=be.attrHooks[t.toLowerCase()]||(be.expr.match.bool.test(t)?kt:void 0)),void 0!==n?null===n?void be.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=be.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!me.radioValue&&"radio"===t&&c(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(Fe);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),kt={set:function(e,t,n){return t===!1?be.removeAttr(e,n):e.setAttribute(n,n),n}},be.each(be.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Et[t]||be.find.attr;Et[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=Et[s],Et[s]=i,i=null!=n(e,t,r)?s:null,Et[s]=o),i}});var St=/^(?:input|select|textarea|button)$/i,jt=/^(?:a|area)$/i;be.fn.extend({prop:function(e,t){return We(this,be.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[be.propFix[e]||e]})}}),be.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&be.isXMLDoc(e)||(t=be.propFix[t]||t,i=be.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=be.find.attr(e,"tabindex");return t?parseInt(t,10):St.test(e.nodeName)||jt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),me.optSelected||(be.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),be.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){be.propFix[this.toLowerCase()]=this}),be.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,u=0;if(be.isFunction(e))return this.each(function(t){be(this).addClass(e.call(this,t,Z(this)))});if("string"==typeof e&&e)for(t=e.match(Fe)||[];n=this[u++];)if(i=Z(n),r=1===n.nodeType&&" "+K(i)+" "){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a=K(r),i!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,u=0;if(be.isFunction(e))return this.each(function(t){be(this).removeClass(e.call(this,t,Z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Fe)||[];n=this[u++];)if(i=Z(n),r=1===n.nodeType&&" "+K(i)+" "){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");a=K(r),i!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n="undefined"==typeof e?"undefined":i(e);return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):be.isFunction(e)?this.each(function(n){be(this).toggleClass(e.call(this,n,Z(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=be(this),o=e.match(Fe)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=Z(this),t&&$e.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":$e.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+K(Z(n))+" ").indexOf(t)>-1)return!0;return!1}});var Nt=/\r/g;be.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=be.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,be(this).val()):e,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=be.map(i,function(e){return null==e?"":e+""})),t=be.valHooks[this.type]||be.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=be.valHooks[i.type]||be.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(Nt,""):null==n?"":n)}}}),be.extend({valHooks:{option:{get:function(e){var t=be.find.attr(e,"value");return null!=t?t:K(be.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:i.length;for(r=o<0?u:s?o:0;r<u;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!c(n.parentNode,"optgroup"))){if(t=be(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=be.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=be.inArray(be.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),be.each(["radio","checkbox"],function(){be.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=be.inArray(be(e).val(),t)>-1}},me.checkOn||(be.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Dt=/^(?:focusinfocus|focusoutblur)$/;be.extend(be.event,{trigger:function(e,t,n,r){var s,a,u,c,l,f,d,p=[n||ae],h=ge.call(e,"type")?e.type:e,g=ge.call(e,"namespace")?e.namespace.split("."):[];if(a=u=n=n||ae,3!==n.nodeType&&8!==n.nodeType&&!Dt.test(h+be.event.triggered)&&(h.indexOf(".")>-1&&(g=h.split("."),h=g.shift(),g.sort()),l=h.indexOf(":")<0&&"on"+h,e=e[be.expando]?e:new be.Event(h,"object"===("undefined"==typeof e?"undefined":i(e))&&e),e.isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:be.makeArray(t,[e]),d=be.event.special[h]||{},r||!d.trigger||d.trigger.apply(n,t)!==!1)){if(!r&&!d.noBubble&&!be.isWindow(n)){for(c=d.delegateType||h,Dt.test(c+h)||(a=a.parentNode);a;a=a.parentNode)p.push(a),u=a;u===(n.ownerDocument||ae)&&p.push(u.defaultView||u.parentWindow||o)}for(s=0;(a=p[s++])&&!e.isPropagationStopped();)e.type=s>1?c:d.bindType||h,f=($e.get(a,"events")||{})[e.type]&&$e.get(a,"handle"),f&&f.apply(a,t),f=l&&a[l],f&&f.apply&&Ie(a)&&(e.result=f.apply(a,t),e.result===!1&&e.preventDefault());return e.type=h,r||e.isDefaultPrevented()||d._default&&d._default.apply(p.pop(),t)!==!1||!Ie(n)||l&&be.isFunction(n[h])&&!be.isWindow(n)&&(u=n[l],u&&(n[l]=null),be.event.triggered=h,n[h](),be.event.triggered=void 0,u&&(n[l]=u)),e.result}},simulate:function(e,t,n){var r=be.extend(new be.Event,n,{type:e,isSimulated:!0});be.event.trigger(r,null,t)}}),be.fn.extend({trigger:function(e,t){return this.each(function(){be.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return be.event.trigger(e,t,n,!0)}}),be.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){be.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),be.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),me.focusin="onfocusin"in o,me.focusin||be.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){be.event.simulate(t,e.target,be.event.fix(e))};be.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=$e.access(r,t);i||r.addEventListener(e,n,!0),$e.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=$e.access(r,t)-1;i?$e.access(r,t,i):(r.removeEventListener(e,n,!0),$e.remove(r,t))}}});var At=o.location,Lt=be.now(),qt=/\?/;be.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new o.DOMParser).parseFromString(e,"text/xml")}catch(n){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||be.error("Invalid XML: "+e),t};var Pt=/\[\]$/,Ht=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,Ft=/^(?:input|select|textarea|keygen)/i;be.param=function(e,t){var n,r=[],i=function(e,t){var n=be.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!be.isPlainObject(e))be.each(e,function(){i(this.name,this.value)});else for(n in e)ee(n,e[n],t,i);return r.join("&")},be.fn.extend({serialize:function(){return be.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=be.prop(this,"elements");return e?be.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!be(this).is(":disabled")&&Ft.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!Je.test(e))}).map(function(e,t){var n=be(this).val();return null==n?null:Array.isArray(n)?be.map(n,function(e){return{name:t.name,value:e.replace(Ht,"\r\n")}}):{name:t.name,value:n.replace(Ht,"\r\n")}}).get()}});var Mt=/%20/g,Rt=/#.*$/,Wt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,$t=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Bt=/^(?:GET|HEAD)$/,_t=/^\/\//,Xt={},zt={},Yt="*/".concat("*"),Ut=ae.createElement("a");Ut.href=At.href,be.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:$t.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Yt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":be.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?re(re(e,be.ajaxSettings),t):re(be.ajaxSettings,e)},ajaxPrefilter:te(Xt),ajaxTransport:te(zt),ajax:function(e,t){function n(e,t,n,i){var u,l,p,h,w,T=t;f||(f=!0,c&&o.clearTimeout(c),r=void 0,a=i||"",k.readyState=e>0?4:0,u=e>=200&&e<300||304===e,n&&(h=ie(g,k,n)),h=oe(g,h,k,u),u?(g.ifModified&&(w=k.getResponseHeader("Last-Modified"),w&&(be.lastModified[s]=w),w=k.getResponseHeader("etag"),w&&(be.etag[s]=w)),204===e||"HEAD"===g.type?T="nocontent":304===e?T="notmodified":(T=h.state,l=h.data,p=h.error,u=!p)):(p=T,!e&&T||(T="error",e<0&&(e=0))),k.status=e,k.statusText=(t||T)+"",u?m.resolveWith(y,[l,T,k]):m.rejectWith(y,[k,T,p]),k.statusCode(b),b=void 0,d&&v.trigger(u?"ajaxSuccess":"ajaxError",[k,g,u?l:p]),x.fireWith(y,[k,T]),d&&(v.trigger("ajaxComplete",[k,g]),--be.active||be.event.trigger("ajaxStop")))}"object"===("undefined"==typeof e?"undefined":i(e))&&(t=e,e=void 0),t=t||{};var r,s,a,u,c,l,f,d,p,h,g=be.ajaxSetup({},t),y=g.context||g,v=g.context&&(y.nodeType||y.jquery)?be(y):be.event,m=be.Deferred(),x=be.Callbacks("once memory"),b=g.statusCode||{},w={},T={},C="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(f){if(!u)for(u={};t=It.exec(a);)u[t[1].toLowerCase()]=t[2];t=u[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return f?a:null},setRequestHeader:function(e,t){return null==f&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==f&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)k.always(e[k.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),n(0,t),this}};if(m.promise(k),g.url=((e||g.url||At.href)+"").replace(_t,At.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(Fe)||[""],null==g.crossDomain){l=ae.createElement("a");try{l.href=g.url,l.href=l.href,g.crossDomain=Ut.protocol+"//"+Ut.host!=l.protocol+"//"+l.host}catch(E){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=be.param(g.data,g.traditional)),ne(Xt,g,t,k),f)return k;d=be.event&&g.global,d&&0===be.active++&&be.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Bt.test(g.type),s=g.url.replace(Rt,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Mt,"+")):(h=g.url.slice(s.length),g.data&&(s+=(qt.test(s)?"&":"?")+g.data,delete g.data),g.cache===!1&&(s=s.replace(Wt,"$1"),h=(qt.test(s)?"&":"?")+"_="+Lt++ +h),g.url=s+h),g.ifModified&&(be.lastModified[s]&&k.setRequestHeader("If-Modified-Since",be.lastModified[s]),be.etag[s]&&k.setRequestHeader("If-None-Match",be.etag[s])),(g.data&&g.hasContent&&g.contentType!==!1||t.contentType)&&k.setRequestHeader("Content-Type",g.contentType),k.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Yt+"; q=0.01":""):g.accepts["*"]);for(p in g.headers)k.setRequestHeader(p,g.headers[p]);if(g.beforeSend&&(g.beforeSend.call(y,k,g)===!1||f))return k.abort();if(C="abort",x.add(g.complete),k.done(g.success),k.fail(g.error),r=ne(zt,g,t,k)){if(k.readyState=1,d&&v.trigger("ajaxSend",[k,g]),f)return k;g.async&&g.timeout>0&&(c=o.setTimeout(function(){k.abort("timeout")},g.timeout));try{f=!1,r.send(w,n)}catch(E){if(f)throw E;n(-1,E)}}else n(-1,"No Transport");return k},getJSON:function(e,t,n){return be.get(e,t,n,"json")},getScript:function(e,t){return be.get(e,void 0,t,"script")}}),be.each(["get","post"],function(e,t){be[t]=function(e,n,r,i){return be.isFunction(n)&&(i=i||r,r=n,n=void 0),be.ajax(be.extend({url:e,type:t,dataType:i,data:n,success:r},be.isPlainObject(e)&&e))}}),be._evalUrl=function(e){return be.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},be.fn.extend({wrapAll:function(e){var t;return this[0]&&(be.isFunction(e)&&(e=e.call(this[0])),t=be(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return be.isFunction(e)?this.each(function(t){be(this).wrapInner(e.call(this,t))}):this.each(function(){var t=be(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=be.isFunction(e);return this.each(function(n){be(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){be(this).replaceWith(this.childNodes)}),this}}),be.expr.pseudos.hidden=function(e){return!be.expr.pseudos.visible(e)},be.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},be.ajaxSettings.xhr=function(){try{return new o.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Gt=be.ajaxSettings.xhr();me.cors=!!Gt&&"withCredentials"in Gt,me.ajax=Gt=!!Gt,be.ajaxTransport(function(e){var t,n;if(me.cors||Gt&&!e.crossDomain)return{send:function(r,i){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Vt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&o.setTimeout(function(){t&&n()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(u){if(t)throw u}},abort:function(){t&&t()}}}),be.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),be.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return be.globalEval(e),e}}}),be.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),be.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=be("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),ae.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Qt=[],Jt=/(=)\?(?=&|$)|\?\?/;be.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||be.expando+"_"+Lt++;return this[e]=!0,e}}),be.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,s,a=e.jsonp!==!1&&(Jt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=be.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Jt,"$1"+r):e.jsonp!==!1&&(e.url+=(qt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||be.error(r+" was not called"),s[0]},e.dataTypes[0]="json",i=o[r],o[r]=function(){s=arguments},n.always(function(){void 0===i?be(o).removeProp(r):o[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(r)),s&&be.isFunction(i)&&i(s[0]),s=i=void 0}),"script"}),me.createHTMLDocument=function(){var e=ae.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),be.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(me.createHTMLDocument?(t=ae.implementation.createHTMLDocument(""),r=t.createElement("base"),r.href=ae.location.href,t.head.appendChild(r)):t=ae),i=De.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=E([e],t,o),o&&o.length&&be(o).remove(),be.merge([],i.childNodes))},be.fn.load=function(e,t,n){var r,o,s,a=this,u=e.indexOf(" ");return u>-1&&(r=K(e.slice(u)),e=e.slice(0,u)),be.isFunction(t)?(n=t,t=void 0):t&&"object"===("undefined"==typeof t?"undefined":i(t))&&(o="POST"),a.length>0&&be.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){s=arguments,a.html(r?be("<div>").append(be.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},be.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){be.fn[t]=function(e){return this.on(t,e)}}),be.expr.pseudos.animated=function(e){return be.grep(be.timers,function(t){return e===t.elem}).length},be.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,c,l=be.css(e,"position"),f=be(e),d={};"static"===l&&(e.style.position="relative"),a=f.offset(),o=be.css(e,"top"),u=be.css(e,"left"),c=("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1,c?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),be.isFunction(t)&&(t=t.call(e,n,be.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+i),"using"in t?t.using.call(e,d):f.css(d)}},be.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){be.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===be.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),c(e[0],"html")||(r=e.offset()),r={top:r.top+be.css(e[0],"borderTopWidth",!0),left:r.left+be.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-be.css(n,"marginTop",!0),left:t.left-r.left-be.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===be.css(e,"position");)e=e.offsetParent;return e||nt})}}),be.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;be.fn[e]=function(r){return We(this,function(e,r,i){var o;return be.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),be.each(["top","left"],function(e,t){be.cssHooks[t]=R(me.pixelPosition,function(e,n){if(n)return n=M(e,t),dt.test(n)?be(e).position()[t]+"px":n})}),be.each({Height:"height",Width:"width"},function(e,t){be.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){be.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(i===!0||o===!0?"margin":"border");return We(this,function(t,n,i){var o;return be.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?be.css(t,n,a):be.style(t,n,i,a)},t,s?i:void 0,s)}})}),be.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),be.holdReady=function(e){e?be.readyWait++:be.ready(!0)},be.isArray=Array.isArray,be.parseJSON=JSON.parse,be.nodeName=c,n=[],r=function(){return be}.apply(t,n),!(void 0!==r&&(e.exports=r));var Kt=o.jQuery,Zt=o.$;return be.noConflict=function(e){return o.$===be&&(o.$=Zt),e&&o.jQuery===be&&(o.jQuery=Kt),be},s||(o.jQuery=o.$=be),be})}).call(t,n(7)(e))},function(e,t,n){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJkZWZhdWx0IiwiX21lbnUiLCJfQmFja2dyb3VuZCIsIl9CYWNrZ3JvdW5kMiIsIl9qcXVlcnkiLCJlIiwiRXJyb3IiLCJjb2RlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiYmciLCJnZXRFbGVtZW50QnlJZCIsInN0YXJ0QW5pbWF0aW9uIiwiaGFzQ2xhc3MiLCJlbGUiLCJjbHMiLCJjbGFzc05hbWUiLCJtYXRjaCIsIlJlZ0V4cCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJyZWciLCJyZXBsYWNlIiwiaW5pdCIsInRvZ2dsZU1lbnUiLCJyZWFkeVN0YXRlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsInZhbHVlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsIndyaXRhYmxlIiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX1BvaW50IiwiX1BvaW50MiIsIl9SZWN0IiwiX1JlY3QyIiwiX0NvbG9yIiwiX0NvbG9yMiIsImxvZyIsIm1zZyIsIkJhY2tncm91bmQiLCJjYW52YXNFbGVtZW50IiwiX3RoaXMiLCJ0aGlzIiwiY2FudmFzIiwiY29udGV4dCIsImdldENvbnRleHQiLCJyZWN0IiwicGFyc2VGbG9hdCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInNldEF0dHJpYnV0ZSIsIldpZHRoIiwiSGVpZ2h0IiwibWF4RGlzdGFuY2UiLCJwb2ludHMiLCJwb3MiLCJnZXRSYW5kb21Qb3MiLCJwdXNoIiwidmVsb2NpdHkiLCJnZXRSYW5kb21WZWxvY2l0eSIsImNvbG9yIiwiciIsInBoYXNlIiwiTWF0aCIsInJhbmRvbSIsIm1vdXNlUG9pbnQiLCJhc3NpZ24iLCJhbHBoYSIsImxhc3RGcmFtZSIsIkRhdGUiLCJub3ciLCJyZXNpemUiLCJiaW5kIiwiZXZlbnQiLCJYIiwicGFnZVgiLCJZIiwicGFnZVkiLCJhbnl3aGVyZSIsInBvaW50Iiwid2lkdGgiLCJoZWlnaHQiLCJjZWlsIiwieCIsInkiLCJ2ZWwiLCJpbnNpZGUiLCJkZWx0YSIsIl90aGlzMiIsImZvckVhY2giLCJBbHBoYSIsImFicyIsImNvcyIsImZyYW1lRGVsdGFUaW1lIiwiY2xlYXJSZWN0IiwiZHJhd1BvaW50cyIsImRyYXdMaW5lcyIsInVwZGF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlciIsIl90aGlzMyIsImZpbGxTdHlsZSIsIlJlZCIsIkdyZWVuIiwiQmx1ZSIsImJlZ2luUGF0aCIsImFyYyIsIlBJIiwiY2xvc2VQYXRoIiwiZmlsbCIsImZyYWN0aW9uIiwiaiIsImEiLCJiIiwic3FydCIsInBvdyIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiUG9pbnQiLCJzZXQiLCJ2YWwiLCJSZWN0IiwicGFkIiwiQ29sb3IiLCJnIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJnbG9iYWwiLCJmYWN0b3J5IiwidyIsInVuZGVmaW5lZCIsIm5vR2xvYmFsIiwiRE9NRXZhbCIsImRvYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaXNBcnJheUxpa2UiLCJ0eXBlIiwialF1ZXJ5IiwiaXNXaW5kb3ciLCJub2RlTmFtZSIsImVsZW0iLCJ0b0xvd2VyQ2FzZSIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJub2RlVHlwZSIsImluZGV4T2YiLCJyaXNTaW1wbGUiLCJ0ZXN0IiwiZmlsdGVyIiwic2libGluZyIsImN1ciIsImRpciIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zIiwiZWFjaCIsInJub3RodG1sd2hpdGUiLCJfIiwiZmxhZyIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJkb25lIiwiZmFpbCIsInRoZW4iLCJhcHBseSIsInNsaWNlIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwiRGF0YSIsImV4cGFuZG8iLCJ1aWQiLCJnZXREYXRhIiwiZGF0YSIsInJicmFjZSIsIkpTT04iLCJwYXJzZSIsImRhdGFBdHRyIiwicm11bHRpRGFzaCIsImdldEF0dHJpYnV0ZSIsImRhdGFVc2VyIiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiY3NzIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsImV4ZWMiLCJzdHlsZSIsInN0YXJ0IiwiZW5kIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJ0ZW1wIiwib3duZXJEb2N1bWVudCIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheU1hcCIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJpbmRleCIsImRhdGFQcml2IiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZ2V0QWxsIiwidGFnIiwicmV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWVyZ2UiLCJzZXRHbG9iYWxFdmFsIiwiZWxlbXMiLCJyZWZFbGVtZW50cyIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsInRtcCIsIndyYXAiLCJjb250YWlucyIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwicmh0bWwiLCJydGFnTmFtZSIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImlubmVySFRNTCIsImh0bWxQcmVmaWx0ZXIiLCJsYXN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCIsInRleHRDb250ZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJpbkFycmF5IiwicnNjcmlwdFR5cGUiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJfb24iLCJ0eXBlcyIsInNlbGVjdG9yIiwiZm4iLCJvbmUiLCJvcmlnRm4iLCJvZmYiLCJhcmd1bWVudHMiLCJndWlkIiwiYWRkIiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiY29udGVudCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjbG9uZUNvcHlFdmVudCIsInNyYyIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImV2ZW50cyIsImhhc0RhdGEiLCJhY2Nlc3MiLCJoYW5kbGUiLCJleHRlbmQiLCJmaXhJbnB1dCIsInJjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImFyZ3MiLCJjYWxsYmFjayIsImNvbmNhdCIsImZpcnN0IiwiaGFzU2NyaXB0cyIsIm5vZGUiLCJpTm9DbG9uZSIsInN1cHBvcnQiLCJjaGVja0Nsb25lIiwicmNoZWNrZWQiLCJzZWxmIiwiZXEiLCJodG1sIiwibWFwIiwiY2xvbmUiLCJfZXZhbFVybCIsInJjbGVhblNjcmlwdCIsIl9yZW1vdmUiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImN1ckNTUyIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbE1hcmdpblJpZ2h0Iiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmVuZG9yUHJvcE5hbWUiLCJlbXB0eVN0eWxlIiwiY2FwTmFtZSIsInRvVXBwZXJDYXNlIiwiY3NzUHJlZml4ZXMiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNzc0V4cGFuZCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiYm94U2l6aW5nUmVsaWFibGUiLCJUd2VlbiIsImVhc2luZyIsInNjaGVkdWxlIiwiaW5Qcm9ncmVzcyIsImhpZGRlbiIsInNldFRpbWVvdXQiLCJmeCIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiYXR0cnMiLCJvcGFjaXR5IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJvcHRzIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJvcmlnIiwiZGF0YVNob3ciLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJyZnh0eXBlcyIsImlzRW1wdHlPYmplY3QiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInJlbW92ZSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY2FtZWxDYXNlIiwiQXJyYXkiLCJpc0FycmF5IiwiY3NzSG9va3MiLCJleHBhbmQiLCJwcm9wZXJ0aWVzIiwicmVzdWx0Iiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJkZWZlcnJlZCIsIkRlZmVycmVkIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInBlcmNlbnQiLCJ0d2VlbnMiLCJydW4iLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJzdG9wIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJwcm94eSIsInByb2dyZXNzIiwiY29tcGxldGUiLCJ0aW1lciIsInN0cmlwQW5kQ29sbGFwc2UiLCJ0b2tlbnMiLCJqb2luIiwiZ2V0Q2xhc3MiLCJidWlsZFBhcmFtcyIsInByZWZpeCIsInRyYWRpdGlvbmFsIiwicmJyYWNrZXQiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJmdW5jIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJ1bnNoaWZ0IiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicHJldiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInNwbGl0Iiwic3RhdGUiLCJlcnJvciIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJfc2xpY2UiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJ2ZXJzaW9uIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJwcmV2T2JqZWN0IiwibGFzdCIsImxlbiIsInNvcnQiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWFkeSIsIm5vb3AiLCJpc051bWVyaWMiLCJpc05hTiIsInByb3RvIiwiQ3RvciIsImdsb2JhbEV2YWwiLCJzdHJpbmciLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiU2l6emxlIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiaWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwidG9rZW5pemUiLCJ0b1NlbGVjdG9yIiwicnNpYmxpbmciLCJ0ZXN0Q29udGV4dCIsInFzYUVycm9yIiwic2VsZWN0IiwiY3JlYXRlQ2FjaGUiLCJjYWNoZSIsImtleXMiLCJFeHByIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWRBbmNlc3RvciIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInNldEZpbHRlcnMiLCJhZGRDb21iaW5hdG9yIiwibWF0Y2hlciIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsIm5leHQiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImZpbmQiLCJkaXJydW5zVW5pcXVlIiwicG9wIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYXR0YWNoRXZlbnQiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiYXR0ciIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwibm9kZUluZGV4IiwicGFyZW50IiwidXNlQ2FjaGUiLCJwc2V1ZG8iLCJpZHgiLCJtYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwic2VsZWN0ZWRJbmRleCIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwidG9rZW4iLCJjb21waWxlZCIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJfZGlyIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwiX3NpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJjb250ZW50RG9jdW1lbnQiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiX2ZpcmVkIiwiX2xvY2tlZCIsImZpcmluZ0luZGV4Iiwib25jZSIsInN0b3BPbkZhbHNlIiwiZGlzYWJsZSIsImxvY2siLCJsb2NrZWQiLCJmaXJlV2l0aCIsImZpcmVkIiwidHVwbGVzIiwiX3N0YXRlIiwiX3Byb21pc2UiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJtYXhEZXB0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJ3YWl0IiwiZG9TY3JvbGwiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJfZGF0YSIsInJlbW92ZURhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInN3YXAiLCJvbGQiLCJoaWRlIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJfaGFuZGxlcnMiLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXIiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwicmVsYXRlZCIsIm9uIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiY29udGFpbmVyIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJlYXNlZCIsInN0ZXAiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImNsYXNzTmFtZXMiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJfc3RhdHVzQ29kZSIsImZpcmVHbG9iYWxzIiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInJlc3BvbnNlSGVhZGVycyIsInVybEFuY2hvciIsInVuY2FjaGVkIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsImFib3J0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRocm93cyIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsIl9jYWxsYmFjayIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiX2NhbGxiYWNrMiIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztDQUFBLFNBQUFBLEdBS0EsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUksRUFBQUosRUFDQUssR0FBQSxFQUNBSCxXQVVBLE9BTkFKLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLEVBQUFBLEVBQUFELFFBQUFILEdBR0FJLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0E0REEsT0FoQ0FGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsU0FBQVAsRUFBQVEsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVYsRUFBQVEsSUFDQUcs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QSxNQW5CQUEsR0FBQXF4QyxrQkFDQXJ4QyxFQUFBc3hDLFVBQUEsYUFDQXR4QyxFQUFBdXhDLFNBRUF2eEMsRUFBQSt5QixXQUFBL3lCLEVBQUEreUIsYUFDQXJ5QixPQUFBQyxlQUFBWCxFQUFBLFVBQ0FhLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE1BQUFkLEdBQUFFLEtBR0FRLE9BQUFDLGVBQUFYLEVBQUEsTUFDQWEsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsTUFBQWQsR0FBQUMsS0FHQUQsRUFBQXF4QyxnQkFBQSxHQUVBcnhDIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX21lbnUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX21lbnUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVudSk7XG5cbnZhciBfQmFja2dyb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfQmFja2dyb3VuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CYWNrZ3JvdW5kKTtcblxudmFyIF9qcXVlcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5fX3dlYnBhY2tfcmVxdWlyZV9fKCEoZnVuY3Rpb24gd2VicGFja01pc3NpbmdNb2R1bGUoKSB7IHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlIFxcXCJqcXVlcnktc2Nyb2xsaWZ5XFxcIlwiKTsgZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnOyB0aHJvdyBlOyB9KCkpKTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJnID0gbmV3IF9CYWNrZ3JvdW5kMi5kZWZhdWx0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub2tleScpKTtcbiAgYmcuc3RhcnRBbmltYXRpb24oKTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy9AcmF6aXRhemkgc3JjOiBodHRwOi8vY29kZXBlbi5pby9yYXppdGF6aS9wZW4vV2JaYU9xICovXG5cbi8vRXhlbGVudCBsaXR0bGUgZnVuY3Rpb25zIHRvIHVzZSBhbnkgdGltZSB3aGVuIGNsYXNzIG1vZGlmaWNhdGlvbiBpcyBuZWVkZWRcbmZ1bmN0aW9uIGhhc0NsYXNzKGVsZSwgY2xzKSB7XG4gICAgcmV0dXJuICEhZWxlLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xzICsgJyhcXFxcc3wkKScpKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxlLCBjbHMpIHtcbiAgICBpZiAoIWhhc0NsYXNzKGVsZSwgY2xzKSkgZWxlLmNsYXNzTmFtZSArPSBcIiBcIiArIGNscztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlLCBjbHMpIHtcbiAgICBpZiAoaGFzQ2xhc3MoZWxlLCBjbHMpKSB7XG4gICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xzICsgJyhcXFxcc3wkKScpO1xuICAgICAgICBlbGUuY2xhc3NOYW1lID0gZWxlLmNsYXNzTmFtZS5yZXBsYWNlKHJlZywgJyAnKTtcbiAgICB9XG59XG5cbi8vQWRkIGV2ZW50IGZyb20ganMgdGhlIGtlZXAgdGhlIG1hcmt1cCBjbGVhblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhbmVsLXRvZ2dsZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdG9nZ2xlTWVudSk7XG59XG5cbi8vVGhlIGFjdHVhbCBmdWN0aW9uXG5mdW5jdGlvbiB0b2dnbGVNZW51KCkge1xuICAgIHZhciBlbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndvcmstcGFuZWxcIik7XG4gICAgaWYgKCFoYXNDbGFzcyhlbGUsIFwib3BlblwiKSkge1xuICAgICAgICBhZGRDbGFzcyhlbGUsIFwib3BlblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZW1vdmVDbGFzcyhlbGUsIFwib3BlblwiKTtcbiAgICB9XG59XG5cbi8vUHJldmVudCB0aGUgZnVuY3Rpb24gdG8gcnVuIGJlZm9yZSB0aGUgZG9jdW1lbnQgaXMgbG9hZGVkXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgaW5pdCgpO1xuICAgIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9Qb2ludCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfUG9pbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9pbnQpO1xuXG52YXIgX1JlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX1JlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVjdCk7XG5cbnZhciBfQ29sb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX0NvbG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbG9yKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGxvZyA9IGZ1bmN0aW9uIGxvZyhtc2cpIHt9O1xuXG52YXIgQmFja2dyb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFja2dyb3VuZChjYW52YXNFbGVtZW50KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYWNrZ3JvdW5kKTtcblxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzRWxlbWVudDtcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMucmVjdCA9IG5ldyBfUmVjdDIuZGVmYXVsdCgwLCAwLCBwYXJzZUZsb2F0KHdpbmRvdy5pbm5lcldpZHRoKSwgcGFyc2VGbG9hdCh3aW5kb3cuaW5uZXJIZWlnaHQpKTtcbiAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5yZWN0LldpZHRoKTtcbiAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMucmVjdC5IZWlnaHQpO1xuICAgIHRoaXMubWF4RGlzdGFuY2UgPSAyNjA7XG5cbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjA7IGkrKykge1xuICAgICAgdmFyIHBvcyA9IHRoaXMuZ2V0UmFuZG9tUG9zKHRydWUpO1xuXG4gICAgICB0aGlzLnBvaW50cy5wdXNoKHtcbiAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgIHZlbG9jaXR5OiB0aGlzLmdldFJhbmRvbVZlbG9jaXR5KHBvcyksXG4gICAgICAgIGNvbG9yOiBuZXcgX0NvbG9yMi5kZWZhdWx0KDIzMCwgMjMwLCAyMzAsIDEpLFxuICAgICAgICByOiAyLFxuICAgICAgICBwaGFzZTogTWF0aC5yYW5kb20oKSAqIDEwXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLm1vdXNlUG9pbnQgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBvaW50c1swXSk7XG4gICAgdGhpcy5tb3VzZVBvaW50LmFscGhhID0gMDtcbiAgICB0aGlzLnBvaW50cy5wdXNoKHRoaXMubW91c2VQb2ludCk7XG5cbiAgICBsb2codGhpcy5tb3VzZVBvaW50KTtcblxuICAgIHRoaXMubGFzdEZyYW1lID0gRGF0ZS5ub3coKTtcblxuICAgIC8vIFN1YnNjcmliZSBldmVudHMuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLm1vdXNlUG9pbnQudmVsb2NpdHkgPSBuZXcgX1BvaW50Mi5kZWZhdWx0KDAsIDApO1xuICAgIH0pO1xuICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5tb3VzZVBvaW50LnBvcyA9IG5ldyBfUG9pbnQyLmRlZmF1bHQoMCwgMCk7XG4gICAgfSk7XG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5tb3VzZVBvaW50LnBvcy5YID0gZXZlbnQucGFnZVg7XG4gICAgICBfdGhpcy5tb3VzZVBvaW50LnBvcy5ZID0gZXZlbnQucGFnZVk7XG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFja2dyb3VuZCwgW3tcbiAgICBrZXk6ICdnZXRSYW5kb21Qb3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5kb21Qb3MoYW55d2hlcmUpIHtcbiAgICAgIHZhciBwb2ludCA9IG5ldyBfUG9pbnQyLmRlZmF1bHQoTWF0aC5yYW5kb20oKSAqIHRoaXMucmVjdC53aWR0aCwgTWF0aC5yYW5kb20oKSAqIHRoaXMucmVjdC5oZWlnaHQpO1xuICAgICAgaWYgKGFueXdoZXJlKSB7XG4gICAgICAgIHJldHVybiBwb2ludDtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiA0KSAtIDEpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHBvaW50LnggPSAwO2JyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcG9pbnQueCA9IHRoaXMucmVjdC53aWR0aDticmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHBvaW50LnkgPSAwO2JyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcG9pbnQueSA9IHRoaXMucmVjdC5oZWlnaHQ7YnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0UmFuZG9tVmVsb2NpdHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5kb21WZWxvY2l0eShwb2ludCkge1xuICAgICAgdmFyIHZlbCA9IG5ldyBfUG9pbnQyLmRlZmF1bHQoTWF0aC5yYW5kb20oKSwgTWF0aC5yYW5kb20oKSk7XG4gICAgICBpZiAoIXRoaXMucmVjdC5pbnNpZGUocG9pbnQsIC0xMCkpIHtcbiAgICAgICAgdmVsLnggKj0gcG9pbnQueCA9PT0gMCA/IDEgOiAtMTtcbiAgICAgICAgdmVsLnkgKj0gcG9pbnQueSA9PT0gMCA/IDEgOiAtMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZlbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoZGVsdGEpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAvLyBVcGRhdGUgcG9zaXRpb24gd2l0aCB2ZWxvY2l0eSB0aW1lcyBkZWx0YS5cbiAgICAgICAgcG9pbnQucG9zLlggKz0gcG9pbnQudmVsb2NpdHkuWCAvIDIwICogZGVsdGE7XG4gICAgICAgIHBvaW50LnBvcy5ZICs9IHBvaW50LnZlbG9jaXR5LlkgLyAyMCAqIGRlbHRhO1xuXG4gICAgICAgIGlmICghX3RoaXMyLnJlY3QuaW5zaWRlKHBvaW50LnBvcywgNTApKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHBvaW50IGlzIG91dHNpZGUgb2YgdGhlIGFjdHVhbCBjYW52YXMsIHdlIGp1c3QgcmVzZXQgaXRzIHBvc2l0aW9uXG4gICAgICAgICAgLy8gdG8gYSByYW5kb20gcG9zaXRpb24gKHdoaWNoIGlzIGF0IG9uZSBvZiB0aGUgZWRnZXMpIGFuZCBwdXNoIGl0IGluIGEgdmVsb2NpdHkgdG93YXJkcyBhIGdpdmVuIGRpcmVjdGlvbi5cbiAgICAgICAgICBwb2ludC5wb3MgPSBfdGhpczIuZ2V0UmFuZG9tUG9zKCk7XG4gICAgICAgICAgcG9pbnQudmVsb2NpdHkgPSBfdGhpczIuZ2V0UmFuZG9tVmVsb2NpdHkocG9pbnQucG9zKTtcbiAgICAgICAgICBwb2ludC5waGFzZSA9IE1hdGgucmFuZG9tKCkgKiAxMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvaW50LnBoYXNlICs9IDAuMDAzO1xuICAgICAgICBwb2ludC5jb2xvci5BbHBoYSA9IE1hdGguYWJzKE1hdGguY29zKHBvaW50LnBoYXNlKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXNpemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICBsb2coJ1Jlc2l6ZSBjYWxsZWQuJyk7XG4gICAgICB0aGlzLnJlY3QuV2lkdGggPSBwYXJzZUZsb2F0KHdpbmRvdy5pbm5lcldpZHRoKTtcbiAgICAgIHRoaXMucmVjdC5IZWlnaHQgPSBwYXJzZUZsb2F0KHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5yZWN0LldpZHRoKTtcbiAgICAgIHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5yZWN0LkhlaWdodCk7XG4gICAgICBsb2coJ1RoZSBzaXplIG9mIHRoZSBib3VuZGluZyByZWN0IGlzOiAoJyArIHRoaXMucmVjdC5YICsgJywgJyArIHRoaXMucmVjdC5ZICsgJywgJyArIHRoaXMucmVjdC5XaWR0aCArICcsICcgKyB0aGlzLnJlY3QuSGVpZ2h0ICsgJyknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgZnJhbWVEZWx0YVRpbWUgPSBEYXRlLm5vdygpIC0gdGhpcy5sYXN0RnJhbWU7XG4gICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KHRoaXMucmVjdC5YLCB0aGlzLnJlY3QuWSwgdGhpcy5yZWN0LldpZHRoLCB0aGlzLnJlY3QuSGVpZ2h0KTtcbiAgICAgIHRoaXMuZHJhd1BvaW50cygpO1xuICAgICAgdGhpcy5kcmF3TGluZXMoKTtcbiAgICAgIHRoaXMudXBkYXRlKGZyYW1lRGVsdGFUaW1lKTtcbiAgICAgIHRoaXMubGFzdEZyYW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZW5kZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd1BvaW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdQb2ludHMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgaWYgKCFwb2ludC5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XG4gICAgICAgICAgdmFyIHBvcyA9IHBvaW50LnBvcztcbiAgICAgICAgICBfdGhpczMuY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgnICsgcG9pbnQuY29sb3IuUmVkICsgJywgJyArIHBvaW50LmNvbG9yLkdyZWVuICsgJywgJyArIHBvaW50LmNvbG9yLkJsdWUgKyAnLCAnICsgcG9pbnQuY29sb3IuQWxwaGEgKyAnKSc7XG4gICAgICAgICAgX3RoaXMzLmNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgX3RoaXMzLmNvbnRleHQuYXJjKHBvcy5YLCBwb3MuWSwgcG9pbnQuciwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgICAgICAgIF90aGlzMy5jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIF90aGlzMy5jb250ZXh0LmZpbGwoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZHJhd0xpbmVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0xpbmVzKCkge1xuICAgICAgdmFyIGZyYWN0aW9uID0gdm9pZCAwLFxuICAgICAgICAgIGFscGhhID0gdm9pZCAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCB0aGlzLnBvaW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBhID0gdGhpcy5wb2ludHNbaV07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzLnBvaW50c1tqXTtcblxuICAgICAgICAgIGZyYWN0aW9uID0gTWF0aC5zcXJ0KE1hdGgucG93KGEucG9zLlggLSBiLnBvcy5YLCAyKSArIE1hdGgucG93KGEucG9zLlkgLSBiLnBvcy5ZLCAyKSkgLyB0aGlzLm1heERpc3RhbmNlO1xuICAgICAgICAgIGlmIChmcmFjdGlvbiA8IDEpIHtcbiAgICAgICAgICAgIGFscGhhID0gMS4wIC0gZnJhY3Rpb247XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgxNTAsIDE1MCwgMTUwLCAnICsgYWxwaGEgKyAnKSc7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gMC44O1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0Lm1vdmVUbyhhLnBvcy5YLCBhLnBvcy5ZKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5saW5lVG8oYi5wb3MuWCwgYi5wb3MuWSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RhcnRBbmltYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydEFuaW1hdGlvbigpIHtcbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYWNrZ3JvdW5kO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCYWNrZ3JvdW5kO1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICovXG4gIGZ1bmN0aW9uIFBvaW50KHgsIHkpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9pbnQpO1xuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvaW50LCBbe1xuICAgIGtleTogXCJYXCIsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICB0aGlzLnggPSB2YWw7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLng7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIllcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMueSA9IHZhbDtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMueTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9pbnQ7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBvaW50O1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKi9cbiAgZnVuY3Rpb24gUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlY3QpO1xuXG4gICAgLy8gVG9wTGVmdCBpcyBhY3R1YWwgY29vcmRpbmF0ZXMgb2YgdGhlIHRvcC1sZWZ0IHBvc2l0aW9uLlxuICAgIC8vIEJvdFJpZ2h0IGlzIHRoZSBhY3R1YWwgY29vcmRpbmF0ZXMgdG8gdGhlIGJvdHRvbS1yaWdodCBwb3NpdGlvbi5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlY3QsIFt7XG4gICAga2V5OiBcImluc2lkZVwiLFxuXG5cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGEgZ2l2ZW4gcG9pbnQgaXMgaW5zaWRlIHRoZSByZWN0LlxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFkXG4gICAgICogQHJldHVybiBib29sZWFuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2lkZShwLCBwYWQpIHtcbiAgICAgIHJldHVybiBwLlggPiB0aGlzLnggLSBwYWQgJiYgcC5YIDwgdGhpcy54ICsgdGhpcy53aWR0aCArIHBhZCAmJiBwLlkgPiB0aGlzLnkgLSBwYWQgJiYgcC5ZIDwgdGhpcy55ICsgdGhpcy5oZWlnaHQgKyBwYWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLng7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMueCA9IHZhbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiWVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMueTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgdGhpcy55ID0gdmFsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJXaWR0aFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMud2lkdGg7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMud2lkdGggPSB2YWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkhlaWdodFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICB0aGlzLmhlaWdodCA9IHZhbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVjdDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUmVjdDtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBDb2xvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29sb3IociwgZywgYiwgYSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvcik7XG5cbiAgICB0aGlzLnIgPSByO1xuICAgIHRoaXMuZyA9IGc7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmEgPSBhO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbG9yLCBbe1xuICAgIGtleTogXCJSZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnI7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMuciA9IHZhbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR3JlZW5cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmc7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgIHRoaXMuZyA9IHZhbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQmx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgdGhpcy5iID0gdmFsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJBbHBoYVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgdGhpcy5hID0gdmFsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb2xvcjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29sb3I7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHt2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTctMDMtMjBUMTg6NTlaXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCggZmFsc2UgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIiAmJiBfdHlwZW9mKG1vZHVsZS5leHBvcnRzKSA9PT0gXCJvYmplY3RcIikge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID8gZmFjdG9yeShnbG9iYWwsIHRydWUpIDogZnVuY3Rpb24gKHcpIHtcblx0XHRcdGlmICghdy5kb2N1bWVudCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhY3Rvcnkodyk7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KGdsb2JhbCk7XG5cdH1cblxuXHQvLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSkodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHVuZGVmaW5lZCwgZnVuY3Rpb24gKHdpbmRvdywgbm9HbG9iYWwpIHtcblxuXHQvLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcblx0Ly8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG5cdC8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG5cdC8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgYXJyID0gW107XG5cblx0dmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cdHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuXHR2YXIgX3NsaWNlID0gYXJyLnNsaWNlO1xuXG5cdHZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG5cdHZhciBwdXNoID0gYXJyLnB1c2g7XG5cblx0dmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxuXHR2YXIgY2xhc3MydHlwZSA9IHt9O1xuXG5cdHZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cblx0dmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cblx0dmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cblx0dmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKE9iamVjdCk7XG5cblx0dmFyIHN1cHBvcnQgPSB7fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKGNvZGUsIGRvYykge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0fVxuXHQvKiBnbG9iYWwgU3ltYm9sICovXG5cdC8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG5cdC8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXHR2YXIgdmVyc2lvbiA9IFwiMy4yLjFcIixcblxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uIGpRdWVyeShzZWxlY3RvciwgY29udGV4dCkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KHNlbGVjdG9yLCBjb250ZXh0KTtcblx0fSxcblxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0ICAgIHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uIGZjYW1lbENhc2UoYWxsLCBsZXR0ZXIpIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cblx0alF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHRcdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0XHRqcXVlcnk6IHZlcnNpb24sXG5cblx0XHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdFx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdFx0bGVuZ3RoOiAwLFxuXG5cdFx0dG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcblx0XHRcdHJldHVybiBfc2xpY2UuY2FsbCh0aGlzKTtcblx0XHR9LFxuXG5cdFx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHRcdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdFx0Z2V0OiBmdW5jdGlvbiBnZXQobnVtKSB7XG5cblx0XHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRcdGlmIChudW0gPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gX3NsaWNlLmNhbGwodGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdHJldHVybiBudW0gPCAwID8gdGhpc1tudW0gKyB0aGlzLmxlbmd0aF0gOiB0aGlzW251bV07XG5cdFx0fSxcblxuXHRcdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0XHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0XHRwdXNoU3RhY2s6IGZ1bmN0aW9uIHB1c2hTdGFjayhlbGVtcykge1xuXG5cdFx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zKTtcblxuXHRcdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSxcblxuXHRcdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdFx0ZWFjaDogZnVuY3Rpb24gZWFjaChjYWxsYmFjaykge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5lYWNoKHRoaXMsIGNhbGxiYWNrKTtcblx0XHR9LFxuXG5cdFx0bWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2spIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uIChlbGVtLCBpKSB7XG5cdFx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKGVsZW0sIGksIGVsZW0pO1xuXHRcdFx0fSkpO1xuXHRcdH0sXG5cblx0XHRzbGljZTogZnVuY3Rpb24gc2xpY2UoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soX3NsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHRcdH0sXG5cblx0XHRmaXJzdDogZnVuY3Rpb24gZmlyc3QoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcSgwKTtcblx0XHR9LFxuXG5cdFx0bGFzdDogZnVuY3Rpb24gbGFzdCgpIHtcblx0XHRcdHJldHVybiB0aGlzLmVxKC0xKTtcblx0XHR9LFxuXG5cdFx0ZXE6IGZ1bmN0aW9uIGVxKGkpIHtcblx0XHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdCAgICBqID0gK2kgKyAoaSA8IDAgPyBsZW4gOiAwKTtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhqID49IDAgJiYgaiA8IGxlbiA/IFt0aGlzW2pdXSA6IFtdKTtcblx0XHR9LFxuXG5cdFx0ZW5kOiBmdW5jdGlvbiBlbmQoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHRcdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRcdHB1c2g6IHB1c2gsXG5cdFx0c29ydDogYXJyLnNvcnQsXG5cdFx0c3BsaWNlOiBhcnIuc3BsaWNlXG5cdH07XG5cblx0alF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG9wdGlvbnMsXG5cdFx0ICAgIG5hbWUsXG5cdFx0ICAgIHNyYyxcblx0XHQgICAgY29weSxcblx0XHQgICAgY29weUlzQXJyYXksXG5cdFx0ICAgIGNsb25lLFxuXHRcdCAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0ICAgIGkgPSAxLFxuXHRcdCAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdCAgICBkZWVwID0gZmFsc2U7XG5cblx0XHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdFx0aWYgKHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0XHR0YXJnZXQgPSBhcmd1bWVudHNbaV0gfHwge307XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdFx0aWYgKCh0eXBlb2YgdGFyZ2V0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodGFyZ2V0KSkgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkpIHtcblx0XHRcdHRhcmdldCA9IHt9O1xuXHRcdH1cblxuXHRcdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRcdGlmIChpID09PSBsZW5ndGgpIHtcblx0XHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0XHRpLS07XG5cdFx0fVxuXG5cdFx0Zm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuXG5cdFx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRpZiAoKG9wdGlvbnMgPSBhcmd1bWVudHNbaV0pICE9IG51bGwpIHtcblxuXHRcdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHRcdGNvcHkgPSBvcHRpb25zW25hbWVdO1xuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRcdGlmICh0YXJnZXQgPT09IGNvcHkpIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmIChkZWVwICYmIGNvcHkgJiYgKGpRdWVyeS5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY29weSkpKSkge1xuXG5cdFx0XHRcdFx0XHRpZiAoY29weUlzQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0galF1ZXJ5LmV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNvcHkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0gY29weTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH07XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cblx0XHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0XHRleHBhbmRvOiBcImpRdWVyeVwiICsgKHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZywgXCJcIiksXG5cblx0XHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRcdGlzUmVhZHk6IHRydWUsXG5cblx0XHRlcnJvcjogZnVuY3Rpb24gZXJyb3IobXNnKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IobXNnKTtcblx0XHR9LFxuXG5cdFx0bm9vcDogZnVuY3Rpb24gbm9vcCgpIHt9LFxuXG5cdFx0aXNGdW5jdGlvbjogZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcblx0XHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImZ1bmN0aW9uXCI7XG5cdFx0fSxcblxuXHRcdGlzV2luZG93OiBmdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcblx0XHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdFx0fSxcblxuXHRcdGlzTnVtZXJpYzogZnVuY3Rpb24gaXNOdW1lcmljKG9iaikge1xuXG5cdFx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUob2JqKTtcblx0XHRcdHJldHVybiAodHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiKSAmJlxuXG5cdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0IWlzTmFOKG9iaiAtIHBhcnNlRmxvYXQob2JqKSk7XG5cdFx0fSxcblxuXHRcdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdFx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0XHRpZiAoIW9iaiB8fCB0b1N0cmluZy5jYWxsKG9iaikgIT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRwcm90byA9IGdldFByb3RvKG9iaik7XG5cblx0XHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRcdGlmICghcHJvdG8pIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0XHRDdG9yID0gaGFzT3duLmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoQ3RvcikgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHRcdH0sXG5cblx0XHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiBpc0VtcHR5T2JqZWN0KG9iaikge1xuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0Zm9yIChuYW1lIGluIG9iaikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dHlwZTogZnVuY3Rpb24gdHlwZShvYmopIHtcblx0XHRcdGlmIChvYmogPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0XHRyZXR1cm4gKHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzczJ0eXBlW3RvU3RyaW5nLmNhbGwob2JqKV0gfHwgXCJvYmplY3RcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xuXHRcdH0sXG5cblx0XHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRcdGdsb2JhbEV2YWw6IGZ1bmN0aW9uIGdsb2JhbEV2YWwoY29kZSkge1xuXHRcdFx0RE9NRXZhbChjb2RlKTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdFx0Y2FtZWxDYXNlOiBmdW5jdGlvbiBjYW1lbENhc2Uoc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2Uocm1zUHJlZml4LCBcIm1zLVwiKS5yZXBsYWNlKHJkYXNoQWxwaGEsIGZjYW1lbENhc2UpO1xuXHRcdH0sXG5cblx0XHRlYWNoOiBmdW5jdGlvbiBlYWNoKG9iaiwgY2FsbGJhY2spIHtcblx0XHRcdHZhciBsZW5ndGgsXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGlmIChpc0FycmF5TGlrZShvYmopKSB7XG5cdFx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRcdGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoaSBpbiBvYmopIHtcblx0XHRcdFx0XHRpZiAoY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdFx0dHJpbTogZnVuY3Rpb24gdHJpbSh0ZXh0KSB7XG5cdFx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID8gXCJcIiA6ICh0ZXh0ICsgXCJcIikucmVwbGFjZShydHJpbSwgXCJcIik7XG5cdFx0fSxcblxuXHRcdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0XHRtYWtlQXJyYXk6IGZ1bmN0aW9uIG1ha2VBcnJheShhcnIsIHJlc3VsdHMpIHtcblx0XHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0XHRpZiAoYXJyICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKGlzQXJyYXlMaWtlKE9iamVjdChhcnIpKSkge1xuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZShyZXQsIHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgPyBbYXJyXSA6IGFycik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHVzaC5jYWxsKHJldCwgYXJyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0sXG5cblx0XHRpbkFycmF5OiBmdW5jdGlvbiBpbkFycmF5KGVsZW0sIGFyciwgaSkge1xuXHRcdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoYXJyLCBlbGVtLCBpKTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdG1lcmdlOiBmdW5jdGlvbiBtZXJnZShmaXJzdCwgc2Vjb25kKSB7XG5cdFx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHQgICAgaiA9IDAsXG5cdFx0XHQgICAgaSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdFx0Zm9yICg7IGogPCBsZW47IGorKykge1xuXHRcdFx0XHRmaXJzdFtpKytdID0gc2Vjb25kW2pdO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3Q7XG5cdFx0fSxcblxuXHRcdGdyZXA6IGZ1bmN0aW9uIGdyZXAoZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQpIHtcblx0XHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHQgICAgbWF0Y2hlcyA9IFtdLFxuXHRcdFx0ICAgIGkgPSAwLFxuXHRcdFx0ICAgIGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdCAgICBjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0XHRmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayhlbGVtc1tpXSwgaSk7XG5cdFx0XHRcdGlmIChjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0KSB7XG5cdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKGVsZW1zW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlcztcblx0XHR9LFxuXG5cdFx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdFx0bWFwOiBmdW5jdGlvbiBtYXAoZWxlbXMsIGNhbGxiYWNrLCBhcmcpIHtcblx0XHRcdHZhciBsZW5ndGgsXG5cdFx0XHQgICAgdmFsdWUsXG5cdFx0XHQgICAgaSA9IDAsXG5cdFx0XHQgICAgcmV0ID0gW107XG5cblx0XHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0XHRpZiAoaXNBcnJheUxpa2UoZWxlbXMpKSB7XG5cdFx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdFx0Zm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soZWxlbXNbaV0sIGksIGFyZyk7XG5cblx0XHRcdFx0XHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0cmV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGkgaW4gZWxlbXMpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKGVsZW1zW2ldLCBpLCBhcmcpO1xuXG5cdFx0XHRcdFx0aWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdHJldC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdFx0cmV0dXJuIGNvbmNhdC5hcHBseShbXSwgcmV0KTtcblx0XHR9LFxuXG5cdFx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdFx0Z3VpZDogMSxcblxuXHRcdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHRcdC8vIGFyZ3VtZW50cy5cblx0XHRwcm94eTogZnVuY3Rpb24gcHJveHkoZm4sIGNvbnRleHQpIHtcblx0XHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0XHRpZiAodHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dG1wID0gZm5bY29udGV4dF07XG5cdFx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdFx0Zm4gPSB0bXA7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdFx0aWYgKCFqUXVlcnkuaXNGdW5jdGlvbihmbikpIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRcdGFyZ3MgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuXHRcdFx0cHJveHkgPSBmdW5jdGlvbiBwcm94eSgpIHtcblx0XHRcdFx0cmV0dXJuIGZuLmFwcGx5KGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoX3NsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdFx0cmV0dXJuIHByb3h5O1xuXHRcdH0sXG5cblx0XHRub3c6IERhdGUubm93LFxuXG5cdFx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdFx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0XHRzdXBwb3J0OiBzdXBwb3J0XG5cdH0pO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRqUXVlcnkuZm5bU3ltYm9sLml0ZXJhdG9yXSA9IGFycltTeW1ib2wuaXRlcmF0b3JdO1xuXHR9XG5cblx0Ly8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5cdGpRdWVyeS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdChcIiBcIiksIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG5cdFx0Y2xhc3MydHlwZVtcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCJdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9KTtcblxuXHRmdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHtcblxuXHRcdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0XHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdFx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdFx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHRcdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdCAgICB0eXBlID0galF1ZXJ5LnR5cGUob2JqKTtcblxuXHRcdGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KG9iaikpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgbGVuZ3RoIC0gMSBpbiBvYmo7XG5cdH1cblx0dmFyIFNpenpsZSA9XG5cdC8qIVxuICAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICAqXG4gICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gICpcbiAgKiBEYXRlOiAyMDE2LTA4LTA4XG4gICovXG5cdGZ1bmN0aW9uICh3aW5kb3cpIHtcblxuXHRcdHZhciBpLFxuXHRcdCAgICBzdXBwb3J0LFxuXHRcdCAgICBFeHByLFxuXHRcdCAgICBnZXRUZXh0LFxuXHRcdCAgICBpc1hNTCxcblx0XHQgICAgdG9rZW5pemUsXG5cdFx0ICAgIGNvbXBpbGUsXG5cdFx0ICAgIHNlbGVjdCxcblx0XHQgICAgb3V0ZXJtb3N0Q29udGV4dCxcblx0XHQgICAgc29ydElucHV0LFxuXHRcdCAgICBoYXNEdXBsaWNhdGUsXG5cblxuXHRcdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0XHRzZXREb2N1bWVudCxcblx0XHQgICAgZG9jdW1lbnQsXG5cdFx0ICAgIGRvY0VsZW0sXG5cdFx0ICAgIGRvY3VtZW50SXNIVE1MLFxuXHRcdCAgICByYnVnZ3lRU0EsXG5cdFx0ICAgIHJidWdneU1hdGNoZXMsXG5cdFx0ICAgIG1hdGNoZXMsXG5cdFx0ICAgIGNvbnRhaW5zLFxuXG5cblx0XHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdFx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0XHQgICAgcHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRcdCAgICBkaXJydW5zID0gMCxcblx0XHQgICAgZG9uZSA9IDAsXG5cdFx0ICAgIGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRcdCAgICB0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0XHQgICAgY29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdFx0ICAgIHNvcnRPcmRlciA9IGZ1bmN0aW9uIHNvcnRPcmRlcihhLCBiKSB7XG5cdFx0XHRpZiAoYSA9PT0gYikge1xuXHRcdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSxcblxuXG5cdFx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRcdGhhc093biA9IHt9Lmhhc093blByb3BlcnR5LFxuXHRcdCAgICBhcnIgPSBbXSxcblx0XHQgICAgcG9wID0gYXJyLnBvcCxcblx0XHQgICAgcHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0XHQgICAgcHVzaCA9IGFyci5wdXNoLFxuXHRcdCAgICBzbGljZSA9IGFyci5zbGljZSxcblxuXHRcdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHRcdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0XHRpbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihsaXN0LCBlbGVtKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHQgICAgbGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGlmIChsaXN0W2ldID09PSBlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiAtMTtcblx0XHR9LFxuXHRcdCAgICBib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXG5cdFx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0XHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0XHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cblx0XHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0XHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblx0XHQgICAgcHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArIFwiKVxcXFwpfClcIixcblxuXG5cdFx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRcdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCh3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiKSxcblx0XHQgICAgcnRyaW0gPSBuZXcgUmVnRXhwKFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiKSxcblx0XHQgICAgcmNvbW1hID0gbmV3IFJlZ0V4cChcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIpLFxuXHRcdCAgICByY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiksXG5cdFx0ICAgIHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIpLFxuXHRcdCAgICBycHNldWRvID0gbmV3IFJlZ0V4cChwc2V1ZG9zKSxcblx0XHQgICAgcmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiKSxcblx0XHQgICAgbWF0Y2hFeHByID0ge1xuXHRcdFx0XCJJRFwiOiBuZXcgUmVnRXhwKFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIpLFxuXHRcdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiKSxcblx0XHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiksXG5cdFx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cChcIl5cIiArIGF0dHJpYnV0ZXMpLFxuXHRcdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cChcIl5cIiArIHBzZXVkb3MpLFxuXHRcdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIpLFxuXHRcdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIpLFxuXHRcdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIpXG5cdFx0fSxcblx0XHQgICAgcmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdFx0ICAgIHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cdFx0ICAgIHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cblx0XHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0XHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cdFx0ICAgIHJzaWJsaW5nID0gL1srfl0vLFxuXG5cblx0XHQvLyBDU1MgZXNjYXBlc1xuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0XHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiKSxcblx0XHQgICAgZnVuZXNjYXBlID0gZnVuY3Rpb24gZnVuZXNjYXBlKF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlKSB7XG5cdFx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgPyBlc2NhcGVkIDogaGlnaCA8IDAgP1xuXHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZShoaWdoICsgMHgxMDAwMCkgOlxuXHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCk7XG5cdFx0fSxcblxuXG5cdFx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0XHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdFx0ICAgIGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiBmY3NzZXNjYXBlKGNoLCBhc0NvZGVQb2ludCkge1xuXHRcdFx0aWYgKGFzQ29kZVBvaW50KSB7XG5cblx0XHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRcdGlmIChjaCA9PT0gXCJcXDBcIikge1xuXHRcdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRcdHJldHVybiBjaC5zbGljZSgwLCAtMSkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoY2gubGVuZ3RoIC0gMSkudG9TdHJpbmcoMTYpICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHRcdH0sXG5cblxuXHRcdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0XHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHRcdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHRcdC8vIGVycm9yIGluIElFXG5cdFx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uIHVubG9hZEhhbmRsZXIoKSB7XG5cdFx0XHRzZXREb2N1bWVudCgpO1xuXHRcdH0sXG5cdFx0ICAgIGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSwgeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH0pO1xuXG5cdFx0Ly8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcblx0XHR0cnkge1xuXHRcdFx0cHVzaC5hcHBseShhcnIgPSBzbGljZS5jYWxsKHByZWZlcnJlZERvYy5jaGlsZE5vZGVzKSwgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMpO1xuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHRcdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0XHRcdGFycltwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdFx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdFx0XHRmdW5jdGlvbiAodGFyZ2V0LCBlbHMpIHtcblx0XHRcdFx0XHRwdXNoX25hdGl2ZS5hcHBseSh0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSk7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdFx0XHRmdW5jdGlvbiAodGFyZ2V0LCBlbHMpIHtcblx0XHRcdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdFx0ICAgIGkgPSAwO1xuXHRcdFx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0XHRcdHdoaWxlICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSB7fVxuXHRcdFx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBTaXp6bGUoc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQpIHtcblx0XHRcdHZhciBtLFxuXHRcdFx0ICAgIGksXG5cdFx0XHQgICAgZWxlbSxcblx0XHRcdCAgICBuaWQsXG5cdFx0XHQgICAgbWF0Y2gsXG5cdFx0XHQgICAgZ3JvdXBzLFxuXHRcdFx0ICAgIG5ld1NlbGVjdG9yLFxuXHRcdFx0ICAgIG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXG5cdFx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRcdFx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRcdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdFx0XHRpZiAodHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fCBub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEpIHtcblxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRcdFx0aWYgKCFzZWVkKSB7XG5cblx0XHRcdFx0aWYgKChjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MpICE9PSBkb2N1bWVudCkge1xuXHRcdFx0XHRcdHNldERvY3VtZW50KGNvbnRleHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0XHRcdGlmIChkb2N1bWVudElzSFRNTCkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRcdFx0aWYgKG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoc2VsZWN0b3IpKSkge1xuXG5cdFx0XHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRcdFx0aWYgKG0gPSBtYXRjaFsxXSkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRcdFx0aWYgKG5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKG0pKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGVsZW0uaWQgPT09IG0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRcdGlmIChuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZChtKSkgJiYgY29udGFpbnMoY29udGV4dCwgZWxlbSkgJiYgZWxlbS5pZCA9PT0gbSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goZWxlbSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKG1hdGNoWzJdKSB7XG5cdFx0XHRcdFx0XHRcdHB1c2guYXBwbHkocmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3RvcikpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICgobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB7XG5cblx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobSkpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRcdFx0aWYgKHN1cHBvcnQucXNhICYmICFjb21waWxlckNhY2hlW3NlbGVjdG9yICsgXCIgXCJdICYmICghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdChzZWxlY3RvcikpKSB7XG5cblx0XHRcdFx0XHRcdGlmIChub2RlVHlwZSAhPT0gMSkge1xuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIikge1xuXG5cdFx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRcdGlmIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZShcImlkXCIpKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UocmNzc2VzY2FwZSwgZmNzc2VzY2FwZSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBuaWQgPSBleHBhbmRvKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZShzZWxlY3Rvcik7XG5cdFx0XHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoZ3JvdXBzW2ldKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKFwiLFwiKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3Qoc2VsZWN0b3IpICYmIHRlc3RDb250ZXh0KGNvbnRleHQucGFyZW50Tm9kZSkgfHwgY29udGV4dDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKG5ld1NlbGVjdG9yKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwobmV3U2VsZWN0b3IpKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAocXNhRXJyb3IpIHt9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChuaWQgPT09IGV4cGFuZG8pIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsbCBvdGhlcnNcblx0XHRcdHJldHVybiBzZWxlY3Qoc2VsZWN0b3IucmVwbGFjZShydHJpbSwgXCIkMVwiKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCk7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gICAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICAgKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICAgKi9cblx0XHRmdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0XHRcdHZhciBrZXlzID0gW107XG5cblx0XHRcdGZ1bmN0aW9uIGNhY2hlKGtleSwgdmFsdWUpIHtcblx0XHRcdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRcdFx0aWYgKGtleXMucHVzaChrZXkgKyBcIiBcIikgPiBFeHByLmNhY2hlTGVuZ3RoKSB7XG5cdFx0XHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRcdFx0ZGVsZXRlIGNhY2hlW2tleXMuc2hpZnQoKV07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGNhY2hlW2tleSArIFwiIFwiXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNhY2hlO1xuXHRcdH1cblxuXHRcdC8qKlxuICAgKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICAgKi9cblx0XHRmdW5jdGlvbiBtYXJrRnVuY3Rpb24oZm4pIHtcblx0XHRcdGZuW2V4cGFuZG9dID0gdHJ1ZTtcblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cblx0XHQvKipcbiAgICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICAgKi9cblx0XHRmdW5jdGlvbiBhc3NlcnQoZm4pIHtcblx0XHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuICEhZm4oZWwpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRcdFx0aWYgKGVsLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdFx0XHRlbCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAgICovXG5cdFx0ZnVuY3Rpb24gYWRkSGFuZGxlKGF0dHJzLCBoYW5kbGVyKSB7XG5cdFx0XHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdFx0ICAgIGkgPSBhcnIubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdEV4cHIuYXR0ckhhbmRsZVthcnJbaV1dID0gaGFuZGxlcjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKipcbiAgICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAgICogQHBhcmFtIHtFbGVtZW50fSBiXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICAgKi9cblx0XHRmdW5jdGlvbiBzaWJsaW5nQ2hlY2soYSwgYikge1xuXHRcdFx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRcdCAgICBkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJiBhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHRcdFx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdFx0XHRpZiAoZGlmZikge1xuXHRcdFx0XHRyZXR1cm4gZGlmZjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0XHRcdGlmIChjdXIpIHtcblx0XHRcdFx0d2hpbGUgKGN1ciA9IGN1ci5uZXh0U2libGluZykge1xuXHRcdFx0XHRcdGlmIChjdXIgPT09IGIpIHtcblx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGEgPyAxIDogLTE7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICovXG5cdFx0ZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8odHlwZSkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKi9cblx0XHRmdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8odHlwZSkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8qKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gICAqL1xuXHRcdGZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKGRpc2FibGVkKSB7XG5cblx0XHRcdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cblx0XHRcdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdFx0XHRpZiAoXCJmb3JtXCIgaW4gZWxlbSkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdFx0XHRpZiAoZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdFx0XHRpZiAoXCJsYWJlbFwiIGluIGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0aWYgKFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiYgZGlzYWJsZWRBbmNlc3RvcihlbGVtKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0XHRcdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdFx0XHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdFx0XHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdFx0XHR9IGVsc2UgaWYgKFwibGFiZWxcIiBpbiBlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKi9cblx0XHRmdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZuKSB7XG5cdFx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChhcmd1bWVudCkge1xuXHRcdFx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRcdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiAoc2VlZCwgbWF0Y2hlcykge1xuXHRcdFx0XHRcdHZhciBqLFxuXHRcdFx0XHRcdCAgICBtYXRjaEluZGV4ZXMgPSBmbihbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50KSxcblx0XHRcdFx0XHQgICAgaSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRpZiAoc2VlZFtqID0gbWF0Y2hJbmRleGVzW2ldXSkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8qKlxuICAgKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gICAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gICAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICAgKi9cblx0XHRmdW5jdGlvbiB0ZXN0Q29udGV4dChjb250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xuXHRcdH1cblxuXHRcdC8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5cdFx0c3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cblx0XHQvKipcbiAgICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAgICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICAgKi9cblx0XHRpc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdFx0XHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0XHRcdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcblx0XHR9O1xuXG5cdFx0LyoqXG4gICAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICAgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gICAqL1xuXHRcdHNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0XHRcdHZhciBoYXNDb21wYXJlLFxuXHRcdFx0ICAgIHN1YldpbmRvdyxcblx0XHRcdCAgICBkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0XHRcdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdFx0XHRpZiAoZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQpIHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRcdFx0ZG9jdW1lbnQgPSBkb2M7XG5cdFx0XHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoZG9jdW1lbnQpO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdFx0XHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdFx0XHRpZiAocHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJiAoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdykge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0XHRcdGlmIChzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdFx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0XHRcdH0gZWxzZSBpZiAoc3ViV2luZG93LmF0dGFjaEV2ZW50KSB7XG5cdFx0XHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyogQXR0cmlidXRlc1xuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0XHRcdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRcdFx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRcdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdFx0XHR9KTtcblxuXHRcdFx0LyogZ2V0RWxlbWVudChzKUJ5KlxuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdFx0XHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdFx0XHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpKTtcblx0XHRcdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8MTBcblx0XHRcdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHRcdFx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdFx0XHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0XHRcdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZChlbCkuaWQgPSBleHBhbmRvO1xuXHRcdFx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShleHBhbmRvKS5sZW5ndGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdFx0XHRpZiAoc3VwcG9ydC5nZXRCeUlkKSB7XG5cdFx0XHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiAoaWQpIHtcblx0XHRcdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSk7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cdFx0XHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24gKGlkLCBjb250ZXh0KSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MKSB7XG5cdFx0XHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbZWxlbV0gOiBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpO1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0XHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24gKGlkLCBjb250ZXh0KSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MKSB7XG5cdFx0XHRcdFx0XHR2YXIgbm9kZSxcblx0XHRcdFx0XHRcdCAgICBpLFxuXHRcdFx0XHRcdFx0ICAgIGVsZW1zLFxuXHRcdFx0XHRcdFx0ICAgIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKGlkKTtcblxuXHRcdFx0XHRcdFx0aWYgKGVsZW0pIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRcdGlmIChub2RlICYmIG5vZGUudmFsdWUgPT09IGlkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFtlbGVtXTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoaWQpO1xuXHRcdFx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSBlbGVtc1tpKytdKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChub2RlICYmIG5vZGUudmFsdWUgPT09IGlkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gW2VsZW1dO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWdcblx0XHRcdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBmdW5jdGlvbiAodGFnLCBjb250ZXh0KSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdFx0fSBlbHNlIGlmIChzdXBwb3J0LnFzYSkge1xuXHRcdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwodGFnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSA6IGZ1bmN0aW9uICh0YWcsIGNvbnRleHQpIHtcblx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdCAgICB0bXAgPSBbXSxcblx0XHRcdFx0ICAgIGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKTtcblxuXHRcdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRcdGlmICh0YWcgPT09IFwiKlwiKSB7XG5cdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSByZXN1bHRzW2krK10pIHtcblx0XHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdHRtcC5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDbGFzc1xuXHRcdFx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24gKGNsYXNzTmFtZSwgY29udGV4dCkge1xuXHRcdFx0XHRpZiAodHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCkge1xuXHRcdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdFx0XHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0XHRcdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdFx0XHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0XHRcdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdFx0XHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0XHRcdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0XHRcdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdFx0XHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRcdFx0aWYgKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpKSB7XG5cdFx0XHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdFx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0XHRcdGFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKGVsKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICsgXCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArIFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRcdFx0aWYgKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdFx0XHRpZiAoIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRcdFx0aWYgKCFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdFx0XHRpZiAoIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0XHRcdGlmICghZWwucXVlcnlTZWxlY3RvckFsbChcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRhc3NlcnQoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICsgXCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImhpZGRlblwiKTtcblx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZChpbnB1dCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcIkRcIik7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdFx0XHRpZiAoZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRcdFx0aWYgKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoZWwpLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRpZiAoZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fCBkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fCBkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHwgZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikpIHtcblxuXHRcdFx0XHRhc3NlcnQoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKGVsLCBcIipcIik7XG5cblx0XHRcdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0XHRcdG1hdGNoZXMuY2FsbChlbCwgXCJbcyE9JyddOnhcIik7XG5cdFx0XHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKFwiIT1cIiwgcHNldWRvcyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAocmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpKTtcblx0XHRcdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKHJidWdneU1hdGNoZXMuam9pbihcInxcIikpO1xuXG5cdFx0XHQvKiBDb250YWluc1xuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRcdFx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdChkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKTtcblxuXHRcdFx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdFx0XHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0XHRcdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdFx0XHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KGRvY0VsZW0uY29udGFpbnMpID8gZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0ICAgIGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKGFkb3duLmNvbnRhaW5zID8gYWRvd24uY29udGFpbnMoYnVwKSA6IGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihidXApICYgMTYpKTtcblx0XHRcdH0gOiBmdW5jdGlvbiAoYSwgYikge1xuXHRcdFx0XHRpZiAoYikge1xuXHRcdFx0XHRcdHdoaWxlIChiID0gYi5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0XHRpZiAoYiA9PT0gYSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblxuXHRcdFx0LyogU29ydGluZ1xuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdFx0XHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdFx0XHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID8gZnVuY3Rpb24gKGEsIGIpIHtcblxuXHRcdFx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdFx0XHRpZiAoYSA9PT0gYikge1xuXHRcdFx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0XHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRcdFx0aWYgKGNvbXBhcmUpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRcdFx0Y29tcGFyZSA9IChhLm93bmVyRG9jdW1lbnQgfHwgYSkgPT09IChiLm93bmVyRG9jdW1lbnQgfHwgYikgPyBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdFx0MTtcblxuXHRcdFx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdFx0aWYgKGNvbXBhcmUgJiAxIHx8ICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGEpID09PSBjb21wYXJlKSB7XG5cblx0XHRcdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdFx0XHRpZiAoYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdFx0XHRyZXR1cm4gc29ydElucHV0ID8gaW5kZXhPZihzb3J0SW5wdXQsIGEpIC0gaW5kZXhPZihzb3J0SW5wdXQsIGIpIDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0XHRcdH0gOiBmdW5jdGlvbiAoYSwgYikge1xuXHRcdFx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0XHRcdGlmIChhID09PSBiKSB7XG5cdFx0XHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBjdXIsXG5cdFx0XHRcdCAgICBpID0gMCxcblx0XHRcdFx0ICAgIGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdFx0ICAgIGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdFx0ICAgIGFwID0gW2FdLFxuXHRcdFx0XHQgICAgYnAgPSBbYl07XG5cblx0XHRcdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRcdFx0aWYgKCFhdXAgfHwgIWJ1cCkge1xuXHRcdFx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDogYiA9PT0gZG9jdW1lbnQgPyAxIDogYXVwID8gLTEgOiBidXAgPyAxIDogc29ydElucHV0ID8gaW5kZXhPZihzb3J0SW5wdXQsIGEpIC0gaW5kZXhPZihzb3J0SW5wdXQsIGIpIDogMDtcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0XHRcdH0gZWxzZSBpZiAoYXVwID09PSBidXApIHtcblx0XHRcdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKGEsIGIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRcdFx0Y3VyID0gYTtcblx0XHRcdFx0d2hpbGUgKGN1ciA9IGN1ci5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0YXAudW5zaGlmdChjdXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1ciA9IGI7XG5cdFx0XHRcdHdoaWxlIChjdXIgPSBjdXIucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdGJwLnVuc2hpZnQoY3VyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0XHRcdHdoaWxlIChhcFtpXSA9PT0gYnBbaV0pIHtcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gaSA/XG5cdFx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0XHRzaWJsaW5nQ2hlY2soYXBbaV0sIGJwW2ldKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6IGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDogMDtcblx0XHRcdH07XG5cblx0XHRcdHJldHVybiBkb2N1bWVudDtcblx0XHR9O1xuXG5cdFx0U2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiAoZXhwciwgZWxlbWVudHMpIHtcblx0XHRcdHJldHVybiBTaXp6bGUoZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMpO1xuXHRcdH07XG5cblx0XHRTaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24gKGVsZW0sIGV4cHIpIHtcblx0XHRcdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRcdFx0aWYgKChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkgIT09IGRvY3VtZW50KSB7XG5cdFx0XHRcdHNldERvY3VtZW50KGVsZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0XHRcdGV4cHIgPSBleHByLnJlcGxhY2UocmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIik7XG5cblx0XHRcdGlmIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJiAhY29tcGlsZXJDYWNoZVtleHByICsgXCIgXCJdICYmICghcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KGV4cHIpKSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoZXhwcikpKSB7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKGVsZW0sIGV4cHIpO1xuXG5cdFx0XHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0XHRcdGlmIChyZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEpIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gU2l6emxlKGV4cHIsIGRvY3VtZW50LCBudWxsLCBbZWxlbV0pLmxlbmd0aCA+IDA7XG5cdFx0fTtcblxuXHRcdFNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uIChjb250ZXh0LCBlbGVtKSB7XG5cdFx0XHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0XHRcdGlmICgoY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQpICE9PSBkb2N1bWVudCkge1xuXHRcdFx0XHRzZXREb2N1bWVudChjb250ZXh0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjb250YWlucyhjb250ZXh0LCBlbGVtKTtcblx0XHR9O1xuXG5cdFx0U2l6emxlLmF0dHIgPSBmdW5jdGlvbiAoZWxlbSwgbmFtZSkge1xuXHRcdFx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdFx0XHRpZiAoKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKSAhPT0gZG9jdW1lbnQpIHtcblx0XHRcdFx0c2V0RG9jdW1lbnQoZWxlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVtuYW1lLnRvTG93ZXJDYXNlKCldLFxuXG5cdFx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpKSA/IGZuKGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCkgOiB1bmRlZmluZWQ7XG5cblx0XHRcdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/IHZhbCA6IHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgPyBlbGVtLmdldEF0dHJpYnV0ZShuYW1lKSA6ICh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgPyB2YWwudmFsdWUgOiBudWxsO1xuXHRcdH07XG5cblx0XHRTaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24gKHNlbCkge1xuXHRcdFx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUpO1xuXHRcdH07XG5cblx0XHRTaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiAobXNnKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyk7XG5cdFx0fTtcblxuXHRcdC8qKlxuICAgKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gICAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gICAqL1xuXHRcdFNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0ICAgIGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRcdCAgICBqID0gMCxcblx0XHRcdCAgICBpID0gMDtcblxuXHRcdFx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRcdFx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0XHRcdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSgwKTtcblx0XHRcdHJlc3VsdHMuc29ydChzb3J0T3JkZXIpO1xuXG5cdFx0XHRpZiAoaGFzRHVwbGljYXRlKSB7XG5cdFx0XHRcdHdoaWxlIChlbGVtID0gcmVzdWx0c1tpKytdKSB7XG5cdFx0XHRcdFx0aWYgKGVsZW0gPT09IHJlc3VsdHNbaV0pIHtcblx0XHRcdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHdoaWxlIChqLS0pIHtcblx0XHRcdFx0XHRyZXN1bHRzLnNwbGljZShkdXBsaWNhdGVzW2pdLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdFx0XHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdFx0LyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gICAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICAgKi9cblx0XHRnZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0dmFyIG5vZGUsXG5cdFx0XHQgICAgcmV0ID0gXCJcIixcblx0XHRcdCAgICBpID0gMCxcblx0XHRcdCAgICBub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHRcdGlmICghbm9kZVR5cGUpIHtcblx0XHRcdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHRcdFx0d2hpbGUgKG5vZGUgPSBlbGVtW2krK10pIHtcblx0XHRcdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0XHRcdHJldCArPSBnZXRUZXh0KG5vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSkge1xuXHRcdFx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0XHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0XHRcdGlmICh0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0XHRcdGZvciAoZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcpIHtcblx0XHRcdFx0XHRcdHJldCArPSBnZXRUZXh0KGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdFx0XHR9XG5cdFx0XHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9O1xuXG5cdFx0RXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0XHRcdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRcdFx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdFx0XHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRcdFx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRcdFx0YXR0ckhhbmRsZToge30sXG5cblx0XHRcdGZpbmQ6IHt9LFxuXG5cdFx0XHRyZWxhdGl2ZToge1xuXHRcdFx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0XHRcdH0sXG5cblx0XHRcdHByZUZpbHRlcjoge1xuXHRcdFx0XHRcIkFUVFJcIjogZnVuY3Rpb24gQVRUUihtYXRjaCkge1xuXHRcdFx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSk7XG5cblx0XHRcdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0XHRcdG1hdGNoWzNdID0gKG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIpLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpO1xuXG5cdFx0XHRcdFx0aWYgKG1hdGNoWzJdID09PSBcIn49XCIpIHtcblx0XHRcdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBtYXRjaC5zbGljZSgwLCA0KTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uIENISUxEKG1hdGNoKSB7XG5cdFx0XHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG4gICAgIFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG4gICAgIFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuICAgICBcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG4gICAgIFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG4gICAgIFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuICAgICBcdDYgeCBvZiB4bi1jb21wb25lbnRcbiAgICAgXHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcbiAgICAgXHQ4IHkgb2YgeS1jb21wb25lbnRcbiAgICAgKi9cblx0XHRcdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdFx0XHRpZiAobWF0Y2hbMV0uc2xpY2UoMCwgMykgPT09IFwibnRoXCIpIHtcblx0XHRcdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdFx0XHRpZiAoIW1hdGNoWzNdKSB7XG5cdFx0XHRcdFx0XHRcdFNpenpsZS5lcnJvcihtYXRjaFswXSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRcdFx0bWF0Y2hbNF0gPSArKG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIikpO1xuXHRcdFx0XHRcdFx0bWF0Y2hbNV0gPSArKG1hdGNoWzddICsgbWF0Y2hbOF0gfHwgbWF0Y2hbM10gPT09IFwib2RkXCIpO1xuXG5cdFx0XHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG1hdGNoWzNdKSB7XG5cdFx0XHRcdFx0XHRTaXp6bGUuZXJyb3IobWF0Y2hbMF0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiBQU0VVRE8obWF0Y2gpIHtcblx0XHRcdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHRcdCAgICB1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0XHRcdGlmIChtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KG1hdGNoWzBdKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdFx0XHRpZiAobWF0Y2hbM10pIHtcblx0XHRcdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0XHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCh1bnF1b3RlZCkgJiYgKFxuXHRcdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdFx0ZXhjZXNzID0gdG9rZW5pemUodW5xdW90ZWQsIHRydWUpKSAmJiAoXG5cdFx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdFx0ZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZihcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzKSAtIHVucXVvdGVkLmxlbmd0aCkpIHtcblxuXHRcdFx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoMCwgZXhjZXNzKTtcblx0XHRcdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoMCwgZXhjZXNzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoMCwgMyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGZpbHRlcjoge1xuXG5cdFx0XHRcdFwiVEFHXCI6IGZ1bmN0aW9uIFRBRyhub2RlTmFtZVNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH0gOiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24gQ0xBU1MoY2xhc3NOYW1lKSB7XG5cdFx0XHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlW2NsYXNzTmFtZSArIFwiIFwiXTtcblxuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuIHx8IChwYXR0ZXJuID0gbmV3IFJlZ0V4cChcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIikpICYmIGNsYXNzQ2FjaGUoY2xhc3NOYW1lLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCh0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJBVFRSXCI6IGZ1bmN0aW9uIEFUVFIobmFtZSwgb3BlcmF0b3IsIGNoZWNrKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoZWxlbSwgbmFtZSk7XG5cblx0XHRcdFx0XHRcdGlmIChyZXN1bHQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3BlcmF0b3IpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6IG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDogb3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKGNoZWNrKSA9PT0gMCA6IG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZihjaGVjaykgPiAtMSA6IG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoLWNoZWNrLmxlbmd0aCkgPT09IGNoZWNrIDogb3BlcmF0b3IgPT09IFwifj1cIiA/IChcIiBcIiArIHJlc3VsdC5yZXBsYWNlKHJ3aGl0ZXNwYWNlLCBcIiBcIikgKyBcIiBcIikuaW5kZXhPZihjaGVjaykgPiAtMSA6IG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSgwLCBjaGVjay5sZW5ndGggKyAxKSA9PT0gY2hlY2sgKyBcIi1cIiA6IGZhbHNlO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJDSElMRFwiOiBmdW5jdGlvbiBDSElMRCh0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QpIHtcblx0XHRcdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSgwLCAzKSAhPT0gXCJudGhcIixcblx0XHRcdFx0XHQgICAgZm9yd2FyZCA9IHR5cGUuc2xpY2UoLTQpICE9PSBcImxhc3RcIixcblx0XHRcdFx0XHQgICAgb2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHR9IDogZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHRcdFx0dmFyIGNhY2hlLFxuXHRcdFx0XHRcdFx0ICAgIHVuaXF1ZUNhY2hlLFxuXHRcdFx0XHRcdFx0ICAgIG91dGVyQ2FjaGUsXG5cdFx0XHRcdFx0XHQgICAgbm9kZSxcblx0XHRcdFx0XHRcdCAgICBub2RlSW5kZXgsXG5cdFx0XHRcdFx0XHQgICAgc3RhcnQsXG5cdFx0XHRcdFx0XHQgICAgZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdCAgICBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHQgICAgbmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHQgICAgdXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHQgICAgZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0XHRpZiAocGFyZW50KSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0XHRpZiAoc2ltcGxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKGRpcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSAobm9kZSA9IG5vZGVbZGlyXSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAob2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRzdGFydCA9IFtmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0XHRpZiAoZm9yd2FyZCAmJiB1c2VDYWNoZSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVtleHBhbmRvXSB8fCAobm9kZVtleHBhbmRvXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gfHwgKG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlW3R5cGVdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzFdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbMl07XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1tub2RlSW5kZXhdO1xuXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbZGlyXSB8fCAoXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbdHlwZV0gPSBbZGlycnVucywgbm9kZUluZGV4LCBkaWZmXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRcdGlmICh1c2VDYWNoZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVtleHBhbmRvXSB8fCAobm9kZVtleHBhbmRvXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gfHwgKG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbdHlwZV0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGlmZiA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVtkaXJdIHx8IChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoKG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEpICYmICsrZGlmZikge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICh1c2VDYWNoZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbZXhwYW5kb10gfHwgKG5vZGVbZXhwYW5kb10gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlW25vZGUudW5pcXVlSURdIHx8IChvdXRlckNhY2hlW25vZGUudW5pcXVlSURdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVt0eXBlXSA9IFtkaXJydW5zLCBkaWZmXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAobm9kZSA9PT0gZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24gUFNFVURPKHBzZXVkbywgYXJndW1lbnQpIHtcblx0XHRcdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdFx0ICAgIGZuID0gRXhwci5wc2V1ZG9zW3BzZXVkb10gfHwgRXhwci5zZXRGaWx0ZXJzW3BzZXVkby50b0xvd2VyQ2FzZSgpXSB8fCBTaXp6bGUuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvKTtcblxuXHRcdFx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdFx0XHRpZiAoZm5bZXhwYW5kb10pIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbihhcmd1bWVudCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRcdFx0aWYgKGZuLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdGFyZ3MgPSBbcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50XTtcblx0XHRcdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkocHNldWRvLnRvTG93ZXJDYXNlKCkpID8gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChzZWVkLCBtYXRjaGVzKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdCAgICBtYXRjaGVkID0gZm4oc2VlZCwgYXJndW1lbnQpLFxuXHRcdFx0XHRcdFx0XHQgICAgaSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZihzZWVkLCBtYXRjaGVkW2ldKTtcblx0XHRcdFx0XHRcdFx0XHRzZWVkW2lkeF0gPSAhKG1hdGNoZXNbaWR4XSA9IG1hdGNoZWRbaV0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KSA6IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmbihlbGVtLCAwLCBhcmdzKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGZuO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRwc2V1ZG9zOiB7XG5cdFx0XHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRcdCAgICByZXN1bHRzID0gW10sXG5cdFx0XHRcdFx0ICAgIG1hdGNoZXIgPSBjb21waWxlKHNlbGVjdG9yLnJlcGxhY2UocnRyaW0sIFwiJDFcIikpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXJbZXhwYW5kb10gPyBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHQgICAgdW5tYXRjaGVkID0gbWF0Y2hlcihzZWVkLCBudWxsLCB4bWwsIFtdKSxcblx0XHRcdFx0XHRcdCAgICBpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHRcdFx0aWYgKGVsZW0gPSB1bm1hdGNoZWRbaV0pIHtcblx0XHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6IGZ1bmN0aW9uIChlbGVtLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRcdG1hdGNoZXIoaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyk7XG5cdFx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0pLFxuXG5cdFx0XHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiAoc2VsZWN0b3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBTaXp6bGUoc2VsZWN0b3IsIGVsZW0pLmxlbmd0aCA+IDA7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHRleHQpIHtcblx0XHRcdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKTtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiAoZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KGVsZW0pKS5pbmRleE9mKHRleHQpID4gLTE7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0XHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0XHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0XHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0XHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdFx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiAobGFuZykge1xuXHRcdFx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdFx0XHRpZiAoIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSkge1xuXHRcdFx0XHRcdFx0U2l6emxlLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRcdFx0aWYgKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgPyBlbGVtLmxhbmcgOiBlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKGxhbmcgKyBcIi1cIikgPT09IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gd2hpbGUgKChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uIHRhcmdldChlbGVtKSB7XG5cdFx0XHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSgxKSA9PT0gZWxlbS5pZDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcInJvb3RcIjogZnVuY3Rpb24gcm9vdChlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiBmb2N1cyhlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKGZhbHNlKSxcblx0XHRcdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyh0cnVlKSxcblxuXHRcdFx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24gY2hlY2tlZChlbGVtKSB7XG5cdFx0XHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgfHwgbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24gc2VsZWN0ZWQoZWxlbSkge1xuXHRcdFx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRcdFx0aWYgKGVsZW0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ29udGVudHNcblx0XHRcdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiBlbXB0eShlbGVtKSB7XG5cdFx0XHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRcdFx0Zm9yIChlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZykge1xuXHRcdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPCA2KSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24gcGFyZW50KGVsZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKGVsZW0pO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24gaGVhZGVyKGVsZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KGVsZW0ubm9kZU5hbWUpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiaW5wdXRcIjogZnVuY3Rpb24gaW5wdXQoZWxlbSkge1xuXHRcdFx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoZWxlbS5ub2RlTmFtZSk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJidXR0b25cIjogZnVuY3Rpb24gYnV0dG9uKGVsZW0pIHtcblx0XHRcdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwidGV4dFwiOiBmdW5jdGlvbiB0ZXh0KGVsZW0pIHtcblx0XHRcdFx0XHR2YXIgYXR0cjtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcInRleHRcIiAmJiAoXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0XHQoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFswXTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24gKG1hdGNoSW5kZXhlcywgbGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFtsZW5ndGggLSAxXTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uIChtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQpIHtcblx0XHRcdFx0XHRyZXR1cm4gW2FyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnRdO1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiAobWF0Y2hJbmRleGVzLCBsZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRcdFx0Zm9yICg7IGkgPCBsZW5ndGg7IGkgKz0gMikge1xuXHRcdFx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0XHRcdH0pLFxuXG5cdFx0XHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24gKG1hdGNoSW5kZXhlcywgbGVuZ3RoKSB7XG5cdFx0XHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0XHRcdGZvciAoOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHtcblx0XHRcdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKGkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24gKG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCkge1xuXHRcdFx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdFx0XHRmb3IgKDsgLS1pID49IDA7KSB7XG5cdFx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaChpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uIChtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQpIHtcblx0XHRcdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRcdFx0Zm9yICg7ICsraSA8IGxlbmd0aDspIHtcblx0XHRcdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKGkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRFeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuXHRcdC8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5cdFx0Zm9yIChpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSkge1xuXHRcdFx0RXhwci5wc2V1ZG9zW2ldID0gY3JlYXRlSW5wdXRQc2V1ZG8oaSk7XG5cdFx0fVxuXHRcdGZvciAoaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSkge1xuXHRcdFx0RXhwci5wc2V1ZG9zW2ldID0gY3JlYXRlQnV0dG9uUHNldWRvKGkpO1xuXHRcdH1cblxuXHRcdC8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuXHRcdGZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuXHRcdHNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuXHRcdEV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cblx0XHR0b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChzZWxlY3RvciwgcGFyc2VPbmx5KSB7XG5cdFx0XHR2YXIgbWF0Y2hlZCxcblx0XHRcdCAgICBtYXRjaCxcblx0XHRcdCAgICB0b2tlbnMsXG5cdFx0XHQgICAgdHlwZSxcblx0XHRcdCAgICBzb0Zhcixcblx0XHRcdCAgICBncm91cHMsXG5cdFx0XHQgICAgcHJlRmlsdGVycyxcblx0XHRcdCAgICBjYWNoZWQgPSB0b2tlbkNhY2hlW3NlbGVjdG9yICsgXCIgXCJdO1xuXG5cdFx0XHRpZiAoY2FjaGVkKSB7XG5cdFx0XHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKDApO1xuXHRcdFx0fVxuXG5cdFx0XHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRcdFx0Z3JvdXBzID0gW107XG5cdFx0XHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0XHRcdHdoaWxlIChzb0Zhcikge1xuXG5cdFx0XHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRcdFx0aWYgKCFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKHNvRmFyKSkpIHtcblx0XHRcdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKG1hdGNoWzBdLmxlbmd0aCkgfHwgc29GYXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdyb3Vwcy5wdXNoKHRva2VucyA9IFtdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyhzb0ZhcikpIHtcblx0XHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZShydHJpbSwgXCIgXCIpXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZShtYXRjaGVkLmxlbmd0aCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGaWx0ZXJzXG5cdFx0XHRcdGZvciAodHlwZSBpbiBFeHByLmZpbHRlcikge1xuXHRcdFx0XHRcdGlmICgobWF0Y2ggPSBtYXRjaEV4cHJbdHlwZV0uZXhlYyhzb0ZhcikpICYmICghcHJlRmlsdGVyc1t0eXBlXSB8fCAobWF0Y2ggPSBwcmVGaWx0ZXJzW3R5cGVdKG1hdGNoKSkpKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UobWF0Y2hlZC5sZW5ndGgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghbWF0Y2hlZCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHRcdFx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdFx0XHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0XHRcdHJldHVybiBwYXJzZU9ubHkgPyBzb0Zhci5sZW5ndGggOiBzb0ZhciA/IFNpenpsZS5lcnJvcihzZWxlY3RvcikgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZShzZWxlY3RvciwgZ3JvdXBzKS5zbGljZSgwKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdG9TZWxlY3Rvcih0b2tlbnMpIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdCAgICBsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdFx0ICAgIHNlbGVjdG9yID0gXCJcIjtcblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFkZENvbWJpbmF0b3IobWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSkge1xuXHRcdFx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdFx0ICAgIHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0XHQgICAga2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0XHQgICAgY2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRcdCAgICBkb25lTmFtZSA9IGRvbmUrKztcblxuXHRcdFx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0XHRmdW5jdGlvbiAoZWxlbSwgY29udGV4dCwgeG1sKSB7XG5cdFx0XHRcdHdoaWxlIChlbGVtID0gZWxlbVtkaXJdKSB7XG5cdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cykge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoZWxlbSwgY29udGV4dCwgeG1sKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSA6XG5cblx0XHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdFx0ZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHR2YXIgb2xkQ2FjaGUsXG5cdFx0XHRcdCAgICB1bmlxdWVDYWNoZSxcblx0XHRcdFx0ICAgIG91dGVyQ2FjaGUsXG5cdFx0XHRcdCAgICBuZXdDYWNoZSA9IFtkaXJydW5zLCBkb25lTmFtZV07XG5cblx0XHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRcdGlmICh4bWwpIHtcblx0XHRcdFx0XHR3aGlsZSAoZWxlbSA9IGVsZW1bZGlyXSkge1xuXHRcdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cykge1xuXHRcdFx0XHRcdFx0XHRpZiAobWF0Y2hlcihlbGVtLCBjb250ZXh0LCB4bWwpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSBlbGVtW2Rpcl0pIHtcblx0XHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMpIHtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bZXhwYW5kb10gfHwgKGVsZW1bZXhwYW5kb10gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlW2VsZW0udW5pcXVlSURdIHx8IChvdXRlckNhY2hlW2VsZW0udW5pcXVlSURdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkge1xuXHRcdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtW2Rpcl0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICgob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVtrZXldKSAmJiBvbGRDYWNoZVswXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsxXSA9PT0gZG9uZU5hbWUpIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG5ld0NhY2hlWzJdID0gb2xkQ2FjaGVbMl07XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlW2tleV0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRcdGlmIChuZXdDYWNoZVsyXSA9IG1hdGNoZXIoZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIobWF0Y2hlcnMpIHtcblx0XHRcdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID8gZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdGlmICghbWF0Y2hlcnNbaV0oZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gOiBtYXRjaGVyc1swXTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cykge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0ICAgIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0U2l6emxlKHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb25kZW5zZSh1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0ICAgIG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdFx0ICAgIGkgPSAwLFxuXHRcdFx0ICAgIGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0XHQgICAgbWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW0gPSB1bm1hdGNoZWRbaV0pIHtcblx0XHRcdFx0XHRpZiAoIWZpbHRlciB8fCBmaWx0ZXIoZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goZWxlbSk7XG5cdFx0XHRcdFx0XHRpZiAobWFwcGVkKSB7XG5cdFx0XHRcdFx0XHRcdG1hcC5wdXNoKGkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNldE1hdGNoZXIocHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yKSB7XG5cdFx0XHRpZiAocG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlcltleHBhbmRvXSkge1xuXHRcdFx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlcihwb3N0RmlsdGVyKTtcblx0XHRcdH1cblx0XHRcdGlmIChwb3N0RmluZGVyICYmICFwb3N0RmluZGVyW2V4cGFuZG9dKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKHBvc3RGaW5kZXIsIHBvc3RTZWxlY3Rvcik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdFx0dmFyIHRlbXAsXG5cdFx0XHRcdCAgICBpLFxuXHRcdFx0XHQgICAgZWxlbSxcblx0XHRcdFx0ICAgIHByZU1hcCA9IFtdLFxuXHRcdFx0XHQgICAgcG9zdE1hcCA9IFtdLFxuXHRcdFx0XHQgICAgcHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXG5cdFx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gW2NvbnRleHRdIDogY29udGV4dCwgW10pLFxuXG5cblx0XHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoc2VlZCB8fCAhc2VsZWN0b3IpID8gY29uZGVuc2UoZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwpIDogZWxlbXMsXG5cdFx0XHRcdCAgICBtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyKSA/XG5cblx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFtdIDpcblxuXHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0cmVzdWx0cyA6IG1hdGNoZXJJbjtcblxuXHRcdFx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdFx0XHRpZiAobWF0Y2hlcikge1xuXHRcdFx0XHRcdG1hdGNoZXIobWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdFx0XHRpZiAocG9zdEZpbHRlcikge1xuXHRcdFx0XHRcdHRlbXAgPSBjb25kZW5zZShtYXRjaGVyT3V0LCBwb3N0TWFwKTtcblx0XHRcdFx0XHRwb3N0RmlsdGVyKHRlbXAsIFtdLCBjb250ZXh0LCB4bWwpO1xuXG5cdFx0XHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRpZiAoZWxlbSA9IHRlbXBbaV0pIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlck91dFtwb3N0TWFwW2ldXSA9ICEobWF0Y2hlckluW3Bvc3RNYXBbaV1dID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRpZiAocG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIpIHtcblx0XHRcdFx0XHRcdGlmIChwb3N0RmluZGVyKSB7XG5cdFx0XHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChlbGVtID0gbWF0Y2hlck91dFtpXSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0XHRcdHRlbXAucHVzaChtYXRjaGVySW5baV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cG9zdEZpbmRlcihudWxsLCBtYXRjaGVyT3V0ID0gW10sIHRlbXAsIHhtbCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdGlmICgoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmICh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2Yoc2VlZCwgZWxlbSkgOiBwcmVNYXBbaV0pID4gLTEpIHtcblxuXHRcdFx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShtYXRjaGVyT3V0ID09PSByZXN1bHRzID8gbWF0Y2hlck91dC5zcGxpY2UocHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoKSA6IG1hdGNoZXJPdXQpO1xuXHRcdFx0XHRcdGlmIChwb3N0RmluZGVyKSB7XG5cdFx0XHRcdFx0XHRwb3N0RmluZGVyKG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkocmVzdWx0cywgbWF0Y2hlck91dCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtYXRjaGVyRnJvbVRva2Vucyh0b2tlbnMpIHtcblx0XHRcdHZhciBjaGVja0NvbnRleHQsXG5cdFx0XHQgICAgbWF0Y2hlcixcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0XHQgICAgbGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVt0b2tlbnNbMF0udHlwZV0sXG5cdFx0XHQgICAgaW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRcdCAgICBpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblxuXHRcdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUpLFxuXHRcdFx0ICAgIG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4T2YoY2hlY2tDb250ZXh0LCBlbGVtKSA+IC0xO1xuXHRcdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSksXG5cdFx0XHQgICAgbWF0Y2hlcnMgPSBbZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHR2YXIgcmV0ID0gIWxlYWRpbmdSZWxhdGl2ZSAmJiAoeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQpIHx8ICgoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgPyBtYXRjaENvbnRleHQoZWxlbSwgY29udGV4dCwgeG1sKSA6IG1hdGNoQW55Q29udGV4dChlbGVtLCBjb250ZXh0LCB4bWwpKTtcblx0XHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XTtcblxuXHRcdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRpZiAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbdG9rZW5zW2ldLnR5cGVdKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcnMgPSBbYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlcihtYXRjaGVycyksIG1hdGNoZXIpXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbdG9rZW5zW2ldLnR5cGVdLmFwcGx5KG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzKTtcblxuXHRcdFx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRcdFx0aWYgKG1hdGNoZXJbZXhwYW5kb10pIHtcblx0XHRcdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0XHRcdGZvciAoOyBqIDwgbGVuOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKEV4cHIucmVsYXRpdmVbdG9rZW5zW2pdLnR5cGVdKSB7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKG1hdGNoZXJzKSwgaSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoMCwgaSAtIDEpLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbaSAtIDJdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pKS5yZXBsYWNlKHJ0cmltLCBcIiQxXCIpLCBtYXRjaGVyLCBpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2Vucyh0b2tlbnMuc2xpY2UoaSwgaikpLCBqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKHRva2VucyA9IHRva2Vucy5zbGljZShqKSksIGogPCBsZW4gJiYgdG9TZWxlY3Rvcih0b2tlbnMpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bWF0Y2hlcnMucHVzaChtYXRjaGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbWVudE1hdGNoZXIobWF0Y2hlcnMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyhlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzKSB7XG5cdFx0XHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdFx0ICAgIGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdFx0ICAgIHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uIHN1cGVyTWF0Y2hlcihzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCkge1xuXHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0ICAgIGosXG5cdFx0XHRcdCAgICBtYXRjaGVyLFxuXHRcdFx0XHQgICAgbWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0ICAgIGkgPSBcIjBcIixcblx0XHRcdFx0ICAgIHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdCAgICBzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdCAgICBjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKFwiKlwiLCBvdXRlcm1vc3QpLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSxcblx0XHRcdFx0ICAgIGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAob3V0ZXJtb3N0KSB7XG5cdFx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0XHRmb3IgKDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKykge1xuXHRcdFx0XHRcdGlmIChieUVsZW1lbnQgJiYgZWxlbSkge1xuXHRcdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0XHRpZiAoIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCkge1xuXHRcdFx0XHRcdFx0XHRzZXREb2N1bWVudChlbGVtKTtcblx0XHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0d2hpbGUgKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkge1xuXHRcdFx0XHRcdFx0XHRpZiAobWF0Y2hlcihlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAob3V0ZXJtb3N0KSB7XG5cdFx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0XHRpZiAoYnlTZXQpIHtcblx0XHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRcdGlmIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdFx0aWYgKGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlcih1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRcdGlmIChtYXRjaGVkQ291bnQgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbChyZXN1bHRzKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZShzZXRNYXRjaGVkKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBzZXRNYXRjaGVkKTtcblxuXHRcdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRcdGlmIChvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCA+IDEpIHtcblxuXHRcdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQocmVzdWx0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRcdGlmIChvdXRlcm1vc3QpIHtcblx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gYnlTZXQgPyBtYXJrRnVuY3Rpb24oc3VwZXJNYXRjaGVyKSA6IHN1cGVyTWF0Y2hlcjtcblx0XHR9XG5cblx0XHRjb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBzZXRNYXRjaGVycyA9IFtdLFxuXHRcdFx0ICAgIGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdFx0ICAgIGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbc2VsZWN0b3IgKyBcIiBcIl07XG5cblx0XHRcdGlmICghY2FjaGVkKSB7XG5cdFx0XHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdFx0XHRpZiAoIW1hdGNoKSB7XG5cdFx0XHRcdFx0bWF0Y2ggPSB0b2tlbml6ZShzZWxlY3Rvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKG1hdGNoW2ldKTtcblx0XHRcdFx0XHRpZiAoY2FjaGVkW2V4cGFuZG9dKSB7XG5cdFx0XHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKGNhY2hlZCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKGNhY2hlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0XHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyhlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzKSk7XG5cblx0XHRcdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0XHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblx0XHR9O1xuXG5cdFx0LyoqXG4gICAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAgICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICAgKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gICAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gICAqL1xuXHRcdHNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQpIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0ICAgIHRva2Vucyxcblx0XHRcdCAgICB0b2tlbixcblx0XHRcdCAgICB0eXBlLFxuXHRcdFx0ICAgIGZpbmQsXG5cdFx0XHQgICAgY29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRcdCAgICBtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpO1xuXG5cdFx0XHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdFx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0XHRcdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0XHRcdGlmIChtYXRjaC5sZW5ndGggPT09IDEpIHtcblxuXHRcdFx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdFx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKDApO1xuXHRcdFx0XHRpZiAodG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlW3Rva2Vuc1sxXS50eXBlXSkge1xuXG5cdFx0XHRcdFx0Y29udGV4dCA9IChFeHByLmZpbmRbXCJJRFwiXSh0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0KSB8fCBbXSlbMF07XG5cdFx0XHRcdFx0aWYgKCFjb250ZXh0KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY29tcGlsZWQpIHtcblx0XHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSh0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdFx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3Qoc2VsZWN0b3IpID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdFx0XHRpZiAoRXhwci5yZWxhdGl2ZVt0eXBlID0gdG9rZW4udHlwZV0pIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZmluZCA9IEV4cHIuZmluZFt0eXBlXSkge1xuXHRcdFx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdFx0XHRpZiAoc2VlZCA9IGZpbmQodG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgcnNpYmxpbmcudGVzdCh0b2tlbnNbMF0udHlwZSkgJiYgdGVzdENvbnRleHQoY29udGV4dC5wYXJlbnROb2RlKSB8fCBjb250ZXh0KSkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IodG9rZW5zKTtcblx0XHRcdFx0XHRcdFx0aWYgKCFzZWxlY3Rvcikge1xuXHRcdFx0XHRcdFx0XHRcdHB1c2guYXBwbHkocmVzdWx0cywgc2VlZCk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdFx0XHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdFx0XHQoY29tcGlsZWQgfHwgY29tcGlsZShzZWxlY3RvciwgbWF0Y2gpKShzZWVkLCBjb250ZXh0LCAhZG9jdW1lbnRJc0hUTUwsIHJlc3VsdHMsICFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3Qoc2VsZWN0b3IpICYmIHRlc3RDb250ZXh0KGNvbnRleHQucGFyZW50Tm9kZSkgfHwgY29udGV4dCk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdFx0Ly8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuXHRcdC8vIFNvcnQgc3RhYmlsaXR5XG5cdFx0c3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KHNvcnRPcmRlcikuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcblx0XHQvLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5cdFx0c3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cblx0XHQvLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcblx0XHRzZXREb2N1bWVudCgpO1xuXG5cdFx0Ly8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcblx0XHQvLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcblx0XHRzdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRcdFx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSkgJiAxO1xuXHRcdH0pO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdC8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG5cdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcblx0XHRpZiAoIWFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRcdFx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCI7XG5cdFx0fSkpIHtcblx0XHRcdGFkZEhhbmRsZShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24gKGVsZW0sIG5hbWUsIGlzWE1MKSB7XG5cdFx0XHRcdGlmICghaXNYTUwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUobmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcblx0XHRpZiAoIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRcdFx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIlwiKTtcblx0XHRcdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBcIlwiO1xuXHRcdH0pKSB7XG5cdFx0XHRhZGRIYW5kbGUoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoZWxlbSwgbmFtZSwgaXNYTUwpIHtcblx0XHRcdFx0aWYgKCFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIikge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcblx0XHRpZiAoIWFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xuXHRcdH0pKSB7XG5cdFx0XHRhZGRIYW5kbGUoYm9vbGVhbnMsIGZ1bmN0aW9uIChlbGVtLCBuYW1lLCBpc1hNTCkge1xuXHRcdFx0XHR2YXIgdmFsO1xuXHRcdFx0XHRpZiAoIWlzWE1MKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1bbmFtZV0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOiAodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID8gdmFsLnZhbHVlIDogbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFNpenpsZTtcblx0fSh3aW5kb3cpO1xuXG5cdGpRdWVyeS5maW5kID0gU2l6emxlO1xuXHRqUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cblx0Ly8gRGVwcmVjYXRlZFxuXHRqUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xuXHRqUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcblx0alF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcblx0alF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xuXHRqUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5cdGpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblx0dmFyIGRpciA9IGZ1bmN0aW9uIGRpcihlbGVtLCBfZGlyLCB1bnRpbCkge1xuXHRcdHZhciBtYXRjaGVkID0gW10sXG5cdFx0ICAgIHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHRcdHdoaWxlICgoZWxlbSA9IGVsZW1bX2Rpcl0pICYmIGVsZW0ubm9kZVR5cGUgIT09IDkpIHtcblx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdGlmICh0cnVuY2F0ZSAmJiBqUXVlcnkoZWxlbSkuaXModW50aWwpKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF0Y2hlZC5wdXNoKGVsZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fTtcblxuXHR2YXIgX3NpYmxpbmdzID0gZnVuY3Rpb24gX3NpYmxpbmdzKG4sIGVsZW0pIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdFx0Zm9yICg7IG47IG4gPSBuLm5leHRTaWJsaW5nKSB7XG5cdFx0XHRpZiAobi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtKSB7XG5cdFx0XHRcdG1hdGNoZWQucHVzaChuKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fTtcblxuXHR2YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXHRmdW5jdGlvbiBub2RlTmFtZShlbGVtLCBuYW1lKSB7XG5cblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fTtcblx0dmFyIHJzaW5nbGVUYWcgPSAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaTtcblxuXHR2YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG5cdC8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5cdGZ1bmN0aW9uIHdpbm5vdyhlbGVtZW50cywgcXVhbGlmaWVyLCBub3QpIHtcblx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ocXVhbGlmaWVyKSkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbSwgaSkge1xuXHRcdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbChlbGVtLCBpLCBlbGVtKSAhPT0gbm90O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0XHRpZiAocXVhbGlmaWVyLm5vZGVUeXBlKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtID09PSBxdWFsaWZpZXIgIT09IG5vdDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRcdGlmICh0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwocXVhbGlmaWVyLCBlbGVtKSA+IC0xICE9PSBub3Q7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRcdGlmIChyaXNTaW1wbGUudGVzdChxdWFsaWZpZXIpKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlcihxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QpO1xuXHRcdH1cblxuXHRcdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKHF1YWxpZmllciwgZWxlbWVudHMpO1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcChlbGVtZW50cywgZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwocXVhbGlmaWVyLCBlbGVtKSA+IC0xICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0XHR9KTtcblx0fVxuXG5cdGpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiAoZXhwciwgZWxlbXMsIG5vdCkge1xuXHRcdHZhciBlbGVtID0gZWxlbXNbMF07XG5cblx0XHRpZiAobm90KSB7XG5cdFx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHRcdH1cblxuXHRcdGlmIChlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihlbGVtLCBleHByKSA/IFtlbGVtXSA6IFtdO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKGV4cHIsIGpRdWVyeS5ncmVwKGVsZW1zLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSkpO1xuXHR9O1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGZpbmQ6IGZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0ICAgIHJldCxcblx0XHRcdCAgICBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdCAgICBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soalF1ZXJ5KHNlbGVjdG9yKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5jb250YWlucyhzZWxmW2ldLCB0aGlzKSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soW10pO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0alF1ZXJ5LmZpbmQoc2VsZWN0b3IsIHNlbGZbaV0sIHJldCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQocmV0KSA6IHJldDtcblx0XHR9LFxuXHRcdGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKHNlbGVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2sod2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkpO1xuXHRcdH0sXG5cdFx0bm90OiBmdW5jdGlvbiBub3Qoc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayh3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpKTtcblx0XHR9LFxuXHRcdGlzOiBmdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuXHRcdFx0cmV0dXJuICEhd2lubm93KHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3Qoc2VsZWN0b3IpID8galF1ZXJ5KHNlbGVjdG9yKSA6IHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkubGVuZ3RoO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG5cdC8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxuXHR2YXIgcm9vdGpRdWVyeSxcblxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXHQgICAgaW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb250ZXh0LCByb290KSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCFzZWxlY3Rvcikge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0aWYgKHNlbGVjdG9yWzBdID09PSBcIjxcIiAmJiBzZWxlY3RvcltzZWxlY3Rvci5sZW5ndGggLSAxXSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMpIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFtudWxsLCBzZWxlY3RvciwgbnVsbF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyhzZWxlY3Rvcik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmIChtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmIChtYXRjaFsxXSkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSh0aGlzLCBqUXVlcnkucGFyc2VIVE1MKG1hdGNoWzFdLCBjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LCB0cnVlKSk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKHJzaW5nbGVUYWcudGVzdChtYXRjaFsxXSkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29udGV4dCkpIHtcblx0XHRcdFx0XHRcdGZvciAobWF0Y2ggaW4gY29udGV4dCkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKHRoaXNbbWF0Y2hdKSkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbbWF0Y2hdKGNvbnRleHRbbWF0Y2hdKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIobWF0Y2gsIGNvbnRleHRbbWF0Y2hdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWF0Y2hbMl0pO1xuXG5cdFx0XHRcdFx0aWYgKGVsZW0pIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5KSB7XG5cdFx0XHRcdHJldHVybiAoY29udGV4dCB8fCByb290KS5maW5kKHNlbGVjdG9yKTtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcihjb250ZXh0KS5maW5kKHNlbGVjdG9yKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSkge1xuXHRcdFx0dGhpc1swXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoalF1ZXJ5LmlzRnVuY3Rpb24oc2VsZWN0b3IpKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID8gcm9vdC5yZWFkeShzZWxlY3RvcikgOlxuXG5cdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRzZWxlY3RvcihqUXVlcnkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KHNlbGVjdG9yLCB0aGlzKTtcblx0fTtcblxuXHQvLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5cdGluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG5cdC8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2Vcblx0cm9vdGpRdWVyeSA9IGpRdWVyeShkb2N1bWVudCk7XG5cblx0dmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQpIHtcblx0XHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KHRhcmdldCwgdGhpcyksXG5cdFx0XHQgICAgbCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKGpRdWVyeS5jb250YWlucyh0aGlzLCB0YXJnZXRzW2ldKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Y2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdChzZWxlY3RvcnMsIGNvbnRleHQpIHtcblx0XHRcdHZhciBjdXIsXG5cdFx0XHQgICAgaSA9IDAsXG5cdFx0XHQgICAgbCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0ICAgIG1hdGNoZWQgPSBbXSxcblx0XHRcdCAgICB0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoc2VsZWN0b3JzKTtcblxuXHRcdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdFx0aWYgKCFybmVlZHNDb250ZXh0LnRlc3Qoc2VsZWN0b3JzKSkge1xuXHRcdFx0XHRmb3IgKDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGZvciAoY3VyID0gdGhpc1tpXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0XHRpZiAoY3VyLm5vZGVUeXBlIDwgMTEgJiYgKHRhcmdldHMgPyB0YXJnZXRzLmluZGV4KGN1cikgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykpKSB7XG5cblx0XHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKGN1cik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2sobWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQobWF0Y2hlZCkgOiBtYXRjaGVkKTtcblx0XHR9LFxuXG5cdFx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdFx0aW5kZXg6IGZ1bmN0aW9uIGluZGV4KGVsZW0pIHtcblxuXHRcdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRcdGlmICghZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpc1swXSAmJiB0aGlzWzBdLnBhcmVudE5vZGUgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdFx0aWYgKHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoalF1ZXJ5KGVsZW0pLCB0aGlzWzBdKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWzBdIDogZWxlbSk7XG5cdFx0fSxcblxuXHRcdGFkZDogZnVuY3Rpb24gYWRkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soalF1ZXJ5LnVuaXF1ZVNvcnQoalF1ZXJ5Lm1lcmdlKHRoaXMuZ2V0KCksIGpRdWVyeShzZWxlY3RvciwgY29udGV4dCkpKSk7XG5cdFx0fSxcblxuXHRcdGFkZEJhY2s6IGZ1bmN0aW9uIGFkZEJhY2soc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiB0aGlzLmFkZChzZWxlY3RvciA9PSBudWxsID8gdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3RvcikpO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gc2libGluZyhjdXIsIGRpcikge1xuXHRcdHdoaWxlICgoY3VyID0gY3VyW2Rpcl0pICYmIGN1ci5ub2RlVHlwZSAhPT0gMSkge31cblx0XHRyZXR1cm4gY3VyO1xuXHR9XG5cblx0alF1ZXJ5LmVhY2goe1xuXHRcdHBhcmVudDogZnVuY3Rpb24gcGFyZW50KGVsZW0pIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHRcdH0sXG5cdFx0cGFyZW50czogZnVuY3Rpb24gcGFyZW50cyhlbGVtKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwicGFyZW50Tm9kZVwiKTtcblx0XHR9LFxuXHRcdHBhcmVudHNVbnRpbDogZnVuY3Rpb24gcGFyZW50c1VudGlsKGVsZW0sIGksIHVudGlsKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCk7XG5cdFx0fSxcblx0XHRuZXh0OiBmdW5jdGlvbiBuZXh0KGVsZW0pIHtcblx0XHRcdHJldHVybiBzaWJsaW5nKGVsZW0sIFwibmV4dFNpYmxpbmdcIik7XG5cdFx0fSxcblx0XHRwcmV2OiBmdW5jdGlvbiBwcmV2KGVsZW0pIHtcblx0XHRcdHJldHVybiBzaWJsaW5nKGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIpO1xuXHRcdH0sXG5cdFx0bmV4dEFsbDogZnVuY3Rpb24gbmV4dEFsbChlbGVtKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwibmV4dFNpYmxpbmdcIik7XG5cdFx0fSxcblx0XHRwcmV2QWxsOiBmdW5jdGlvbiBwcmV2QWxsKGVsZW0pIHtcblx0XHRcdHJldHVybiBkaXIoZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIik7XG5cdFx0fSxcblx0XHRuZXh0VW50aWw6IGZ1bmN0aW9uIG5leHRVbnRpbChlbGVtLCBpLCB1bnRpbCkge1xuXHRcdFx0cmV0dXJuIGRpcihlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsKTtcblx0XHR9LFxuXHRcdHByZXZVbnRpbDogZnVuY3Rpb24gcHJldlVudGlsKGVsZW0sIGksIHVudGlsKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsKTtcblx0XHR9LFxuXHRcdHNpYmxpbmdzOiBmdW5jdGlvbiBzaWJsaW5ncyhlbGVtKSB7XG5cdFx0XHRyZXR1cm4gX3NpYmxpbmdzKChlbGVtLnBhcmVudE5vZGUgfHwge30pLmZpcnN0Q2hpbGQsIGVsZW0pO1xuXHRcdH0sXG5cdFx0Y2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKGVsZW0pIHtcblx0XHRcdHJldHVybiBfc2libGluZ3MoZWxlbS5maXJzdENoaWxkKTtcblx0XHR9LFxuXHRcdGNvbnRlbnRzOiBmdW5jdGlvbiBjb250ZW50cyhlbGVtKSB7XG5cdFx0XHRpZiAobm9kZU5hbWUoZWxlbSwgXCJpZnJhbWVcIikpIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRcdGlmIChub2RlTmFtZShlbGVtLCBcInRlbXBsYXRlXCIpKSB7XG5cdFx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGpRdWVyeS5tZXJnZShbXSwgZWxlbS5jaGlsZE5vZGVzKTtcblx0XHR9XG5cdH0sIGZ1bmN0aW9uIChuYW1lLCBmbikge1xuXHRcdGpRdWVyeS5mbltuYW1lXSA9IGZ1bmN0aW9uICh1bnRpbCwgc2VsZWN0b3IpIHtcblx0XHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCh0aGlzLCBmbiwgdW50aWwpO1xuXG5cdFx0XHRpZiAobmFtZS5zbGljZSgtNSkgIT09IFwiVW50aWxcIikge1xuXHRcdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKHNlbGVjdG9yLCBtYXRjaGVkKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubGVuZ3RoID4gMSkge1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRcdGlmICghZ3VhcmFudGVlZFVuaXF1ZVtuYW1lXSkge1xuXHRcdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KG1hdGNoZWQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdFx0aWYgKHJwYXJlbnRzcHJldi50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKG1hdGNoZWQpO1xuXHRcdH07XG5cdH0pO1xuXHR2YXIgcm5vdGh0bWx3aGl0ZSA9IC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztcblxuXHQvLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuXHRmdW5jdGlvbiBjcmVhdGVPcHRpb25zKG9wdGlvbnMpIHtcblx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0alF1ZXJ5LmVhY2gob3B0aW9ucy5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXSwgZnVuY3Rpb24gKF8sIGZsYWcpIHtcblx0XHRcdG9iamVjdFtmbGFnXSA9IHRydWU7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG9iamVjdDtcblx0fVxuXG5cdC8qXG4gICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICpcbiAgKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICAqXG4gICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAgKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gICpcbiAgKiBQb3NzaWJsZSBvcHRpb25zOlxuICAqXG4gICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICAqXG4gICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICAqXG4gICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAgKlxuICAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICAqXG4gICovXG5cdGpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG5cdFx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHRcdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0XHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgPyBjcmVhdGVPcHRpb25zKG9wdGlvbnMpIDogalF1ZXJ5LmV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cblx0XHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0X2ZpcmVkLFxuXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0X2xvY2tlZCxcblxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24gZmlyZSgpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRfbG9ja2VkID0gX2xvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0X2ZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEpIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAobGlzdFtmaXJpbmdJbmRleF0uYXBwbHkobWVtb3J5WzBdLCBtZW1vcnlbMV0pID09PSBmYWxzZSAmJiBvcHRpb25zLnN0b3BPbkZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCFvcHRpb25zLm1lbW9yeSkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoX2xvY2tlZCkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKG1lbW9yeSkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbiBhZGQoKSB7XG5cdFx0XHRcdGlmIChsaXN0KSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmIChtZW1vcnkgJiYgIWZpcmluZykge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKG1lbW9yeSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KGZ1bmN0aW9uIGFkZChhcmdzKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaChhcmdzLCBmdW5jdGlvbiAoXywgYXJnKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihhcmcpKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoYXJnKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKGFyZyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKGFyZykgIT09IFwic3RyaW5nXCIpIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoYXJnKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSkoYXJndW1lbnRzKTtcblxuXHRcdFx0XHRcdGlmIChtZW1vcnkgJiYgIWZpcmluZykge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uIChfLCBhcmcpIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKChpbmRleCA9IGpRdWVyeS5pbkFycmF5KGFyZywgbGlzdCwgaW5kZXgpKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZShpbmRleCwgMSk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKGluZGV4IDw9IGZpcmluZ0luZGV4KSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uIGhhcyhmbikge1xuXHRcdFx0XHRyZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheShmbiwgbGlzdCkgPiAtMSA6IGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbiBlbXB0eSgpIHtcblx0XHRcdFx0aWYgKGxpc3QpIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRcdFx0X2xvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbiBsb2NrKCkge1xuXHRcdFx0XHRfbG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCFtZW1vcnkgJiYgIWZpcmluZykge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24gbG9ja2VkKCkge1xuXHRcdFx0XHRyZXR1cm4gISFfbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uIGZpcmVXaXRoKGNvbnRleHQsIGFyZ3MpIHtcblx0XHRcdFx0aWYgKCFfbG9ja2VkKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFtjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJnc107XG5cdFx0XHRcdFx0cXVldWUucHVzaChhcmdzKTtcblx0XHRcdFx0XHRpZiAoIWZpcmluZykge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbiBmaXJlKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24gZmlyZWQoKSB7XG5cdFx0XHRcdHJldHVybiAhIV9maXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH07XG5cblx0ZnVuY3Rpb24gSWRlbnRpdHkodikge1xuXHRcdHJldHVybiB2O1xuXHR9XG5cdGZ1bmN0aW9uIFRocm93ZXIoZXgpIHtcblx0XHR0aHJvdyBleDtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkb3B0VmFsdWUodmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSkge1xuXHRcdHZhciBtZXRob2Q7XG5cblx0XHR0cnkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0XHRpZiAodmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24obWV0aG9kID0gdmFsdWUucHJvbWlzZSkpIHtcblx0XHRcdFx0bWV0aG9kLmNhbGwodmFsdWUpLmRvbmUocmVzb2x2ZSkuZmFpbChyZWplY3QpO1xuXG5cdFx0XHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbihtZXRob2QgPSB2YWx1ZS50aGVuKSkge1xuXHRcdFx0XHRtZXRob2QuY2FsbCh2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcblxuXHRcdFx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0XHRyZXNvbHZlLmFwcGx5KHVuZGVmaW5lZCwgW3ZhbHVlXS5zbGljZShub1ZhbHVlKSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHRcdFx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHRcdFx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0XHR9IGNhdGNoICh2YWx1ZSkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0XHRyZWplY3QuYXBwbHkodW5kZWZpbmVkLCBbdmFsdWVdKTtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKHtcblxuXHRcdERlZmVycmVkOiBmdW5jdGlvbiBEZWZlcnJlZChmdW5jKSB7XG5cdFx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0W1wibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwgMl0sIFtcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCAwLCBcInJlc29sdmVkXCJdLCBbXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCAxLCBcInJlamVjdGVkXCJdXSxcblx0XHRcdCAgICBfc3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdCAgICBfcHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uIHN0YXRlKCkge1xuXHRcdFx0XHRcdHJldHVybiBfc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24gYWx3YXlzKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24gX2NhdGNoKGZuKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF9wcm9taXNlLnRoZW4obnVsbCwgZm4pO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24gcGlwZSgpIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICove1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uIChuZXdEZWZlcikge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2godHVwbGVzLCBmdW5jdGlvbiAoaSwgdHVwbGUpIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oZm5zW3R1cGxlWzRdXSkgJiYgZm5zW3R1cGxlWzRdXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkW3R1cGxlWzFdXShmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAocmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24ocmV0dXJuZWQucHJvbWlzZSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKS5wcm9ncmVzcyhuZXdEZWZlci5ub3RpZnkpLmRvbmUobmV3RGVmZXIucmVzb2x2ZSkuZmFpbChuZXdEZWZlci5yZWplY3QpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclt0dXBsZVswXSArIFwiV2l0aFwiXSh0aGlzLCBmbiA/IFtyZXR1cm5lZF0gOiBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHQgICAgYXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0ICAgIG1pZ2h0VGhyb3cgPSBmdW5jdGlvbiBtaWdodFRocm93KCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGVwdGggPCBtYXhEZXB0aCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSh0aGF0LCBhcmdzKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdGlmIChyZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmIChcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdCh0eXBlb2YgcmV0dXJuZWQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihyZXR1cm5lZCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiKSAmJiByZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24odGhlbikpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHNwZWNpYWwpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKHJldHVybmVkLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwpLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCkpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKHJldHVybmVkLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwpLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCksIHJlc29sdmUobWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgZGVmZXJyZWQubm90aWZ5V2l0aCkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGhhbmRsZXIgIT09IElkZW50aXR5KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbcmV0dXJuZWRdO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdChzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoKSh0aGF0LCBhcmdzKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0sXG5cblxuXHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgPyBtaWdodFRocm93IDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2spIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soZSwgcHJvY2Vzcy5zdGFja1RyYWNlKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGRlcHRoICsgMSA+PSBtYXhEZXB0aCkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChoYW5kbGVyICE9PSBUaHJvd2VyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gW2VdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCh0aGF0LCBhcmdzKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoZGVwdGgpIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaykge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChwcm9jZXNzKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uIChuZXdEZWZlcikge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbMF1bM10uYWRkKHJlc29sdmUoMCwgbmV3RGVmZXIsIGpRdWVyeS5pc0Z1bmN0aW9uKG9uUHJvZ3Jlc3MpID8gb25Qcm9ncmVzcyA6IElkZW50aXR5LCBuZXdEZWZlci5ub3RpZnlXaXRoKSk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbMV1bM10uYWRkKHJlc29sdmUoMCwgbmV3RGVmZXIsIGpRdWVyeS5pc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogSWRlbnRpdHkpKTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWzJdWzNdLmFkZChyZXNvbHZlKDAsIG5ld0RlZmVyLCBqUXVlcnkuaXNGdW5jdGlvbihvblJlamVjdGVkKSA/IG9uUmVqZWN0ZWQgOiBUaHJvd2VyKSk7XG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKG9iaikge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQob2JqLCBfcHJvbWlzZSkgOiBfcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCAgICBkZWZlcnJlZCA9IHt9O1xuXG5cdFx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0XHRqUXVlcnkuZWFjaCh0dXBsZXMsIGZ1bmN0aW9uIChpLCB0dXBsZSkge1xuXHRcdFx0XHR2YXIgbGlzdCA9IHR1cGxlWzJdLFxuXHRcdFx0XHQgICAgc3RhdGVTdHJpbmcgPSB0dXBsZVs1XTtcblxuXHRcdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdFx0X3Byb21pc2VbdHVwbGVbMV1dID0gbGlzdC5hZGQ7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRcdGlmIChzdGF0ZVN0cmluZykge1xuXHRcdFx0XHRcdGxpc3QuYWRkKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRfc3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbMyAtIGldWzJdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1swXVsyXS5sb2NrKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0XHRsaXN0LmFkZCh0dXBsZVszXS5maXJlKTtcblxuXHRcdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRcdGRlZmVycmVkW3R1cGxlWzBdXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRkZWZlcnJlZFt0dXBsZVswXSArIFwiV2l0aFwiXSh0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRcdGRlZmVycmVkW3R1cGxlWzBdICsgXCJXaXRoXCJdID0gbGlzdC5maXJlV2l0aDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRcdF9wcm9taXNlLnByb21pc2UoZGVmZXJyZWQpO1xuXG5cdFx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0XHRpZiAoZnVuYykge1xuXHRcdFx0XHRmdW5jLmNhbGwoZGVmZXJyZWQsIGRlZmVycmVkKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWxsIGRvbmUhXG5cdFx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdFx0fSxcblxuXHRcdC8vIERlZmVycmVkIGhlbHBlclxuXHRcdHdoZW46IGZ1bmN0aW9uIHdoZW4oc2luZ2xlVmFsdWUpIHtcblx0XHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KGkpLFxuXHRcdFx0ICAgIHJlc29sdmVWYWx1ZXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiB1cGRhdGVGdW5jKGkpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1tpXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1tpXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gX3NsaWNlLmNhbGwoYXJndW1lbnRzKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICghIC0tcmVtYWluaW5nKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgocmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRcdGlmIChyZW1haW5pbmcgPD0gMSkge1xuXHRcdFx0XHRhZG9wdFZhbHVlKHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSh1cGRhdGVGdW5jKGkpKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LCAhcmVtYWluaW5nKTtcblxuXHRcdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRcdGlmIChtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHwgalF1ZXJ5LmlzRnVuY3Rpb24ocmVzb2x2ZVZhbHVlc1tpXSAmJiByZXNvbHZlVmFsdWVzW2ldLnRoZW4pKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRhZG9wdFZhbHVlKHJlc29sdmVWYWx1ZXNbaV0sIHVwZGF0ZUZ1bmMoaSksIG1hc3Rlci5yZWplY3QpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuXHQvLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cblx0dmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cblx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiAoZXJyb3IsIHN0YWNrKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdFx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0XHRpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KGVycm9yLm5hbWUpKSB7XG5cdFx0XHR3aW5kb3cuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2spO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9KTtcblx0fTtcblxuXHQvLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcblx0dmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5cdGpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uIChmbikge1xuXG5cdFx0cmVhZHlMaXN0LnRoZW4oZm4pXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oZXJyb3IpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cblx0XHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRcdGlzUmVhZHk6IGZhbHNlLFxuXG5cdFx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHRcdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdFx0cmVhZHlXYWl0OiAxLFxuXG5cdFx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRcdHJlYWR5OiBmdW5jdGlvbiByZWFkeSh3YWl0KSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRcdGlmICh3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRcdGlmICh3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoZG9jdW1lbnQsIFtqUXVlcnldKTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cblx0Ly8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2Rcblx0ZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCk7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNvbXBsZXRlZCk7XG5cdFx0alF1ZXJ5LnJlYWR5KCk7XG5cdH1cblxuXHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuXHQvLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuXHQvLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cblx0aWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKSB7XG5cblx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHR3aW5kb3cuc2V0VGltZW91dChqUXVlcnkucmVhZHkpO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCk7XG5cblx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBjb21wbGV0ZWQpO1xuXHR9XG5cblx0Ly8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG5cdC8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxuXHR2YXIgYWNjZXNzID0gZnVuY3Rpb24gYWNjZXNzKGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3KSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdCAgICBsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0ICAgIGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHRcdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0XHRpZiAoalF1ZXJ5LnR5cGUoa2V5KSA9PT0gXCJvYmplY3RcIikge1xuXHRcdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRcdGZvciAoaSBpbiBrZXkpIHtcblx0XHRcdFx0YWNjZXNzKGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0XHR9IGVsc2UgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRcdGlmICghalF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdFx0XHRcdHJhdyA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChidWxrKSB7XG5cblx0XHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRcdGlmIChyYXcpIHtcblx0XHRcdFx0XHRmbi5jYWxsKGVsZW1zLCB2YWx1ZSk7XG5cdFx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0XHRmbiA9IGZ1bmN0aW9uIGZuKGVsZW0sIGtleSwgdmFsdWUpIHtcblx0XHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoalF1ZXJ5KGVsZW0pLCB2YWx1ZSk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZm4pIHtcblx0XHRcdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGZuKGVsZW1zW2ldLCBrZXksIHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbChlbGVtc1tpXSwgaSwgZm4oZWxlbXNbaV0sIGtleSkpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChjaGFpbmFibGUpIHtcblx0XHRcdHJldHVybiBlbGVtcztcblx0XHR9XG5cblx0XHQvLyBHZXRzXG5cdFx0aWYgKGJ1bGspIHtcblx0XHRcdHJldHVybiBmbi5jYWxsKGVsZW1zKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID8gZm4oZWxlbXNbMF0sIGtleSkgOiBlbXB0eUdldDtcblx0fTtcblx0dmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiBhY2NlcHREYXRhKG93bmVyKSB7XG5cblx0XHQvLyBBY2NlcHRzIG9ubHk6XG5cdFx0Ly8gIC0gTm9kZVxuXHRcdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0XHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHRcdC8vICAtIE9iamVjdFxuXHRcdC8vICAgIC0gQW55XG5cdFx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICErb3duZXIubm9kZVR5cGU7XG5cdH07XG5cblx0ZnVuY3Rpb24gRGF0YSgpIHtcblx0XHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG5cdH1cblxuXHREYXRhLnVpZCA9IDE7XG5cblx0RGF0YS5wcm90b3R5cGUgPSB7XG5cblx0XHRjYWNoZTogZnVuY3Rpb24gY2FjaGUob3duZXIpIHtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0XHR2YXIgdmFsdWUgPSBvd25lclt0aGlzLmV4cGFuZG9dO1xuXG5cdFx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRcdGlmICghdmFsdWUpIHtcblx0XHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRcdGlmIChhY2NlcHREYXRhKG93bmVyKSkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdFx0aWYgKG93bmVyLm5vZGVUeXBlKSB7XG5cdFx0XHRcdFx0XHRvd25lclt0aGlzLmV4cGFuZG9dID0gdmFsdWU7XG5cblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIHNldChvd25lciwgZGF0YSwgdmFsdWUpIHtcblx0XHRcdHZhciBwcm9wLFxuXHRcdFx0ICAgIGNhY2hlID0gdGhpcy5jYWNoZShvd25lcik7XG5cblx0XHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRjYWNoZVtqUXVlcnkuY2FtZWxDYXNlKGRhdGEpXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRcdGZvciAocHJvcCBpbiBkYXRhKSB7XG5cdFx0XHRcdFx0Y2FjaGVbalF1ZXJ5LmNhbWVsQ2FzZShwcm9wKV0gPSBkYXRhW3Byb3BdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY2FjaGU7XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIGdldChvd25lciwga2V5KSB7XG5cdFx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyB0aGlzLmNhY2hlKG93bmVyKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyW3RoaXMuZXhwYW5kb10gJiYgb3duZXJbdGhpcy5leHBhbmRvXVtqUXVlcnkuY2FtZWxDYXNlKGtleSldO1xuXHRcdH0sXG5cdFx0YWNjZXNzOiBmdW5jdGlvbiBhY2Nlc3Mob3duZXIsIGtleSwgdmFsdWUpIHtcblxuXHRcdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdFx0Ly9cblx0XHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdFx0Ly9cblx0XHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdFx0Ly9cblx0XHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHRcdC8vXG5cdFx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLmdldChvd25lciwga2V5KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdFx0Ly9cblx0XHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0XHQvL1xuXHRcdFx0dGhpcy5zZXQob3duZXIsIGtleSwgdmFsdWUpO1xuXG5cdFx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0XHR9LFxuXHRcdHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG93bmVyLCBrZXkpIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0ICAgIGNhY2hlID0gb3duZXJbdGhpcy5leHBhbmRvXTtcblxuXHRcdFx0aWYgKGNhY2hlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRcdGtleSA9IGtleS5tYXAoalF1ZXJ5LmNhbWVsQ2FzZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZShrZXkpO1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID8gW2tleV0gOiBrZXkubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIGNhY2hlW2tleVtpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoY2FjaGUpKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRcdGlmIChvd25lci5ub2RlVHlwZSkge1xuXHRcdFx0XHRcdG93bmVyW3RoaXMuZXhwYW5kb10gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVsZXRlIG93bmVyW3RoaXMuZXhwYW5kb107XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhc0RhdGE6IGZ1bmN0aW9uIGhhc0RhdGEob3duZXIpIHtcblx0XHRcdHZhciBjYWNoZSA9IG93bmVyW3RoaXMuZXhwYW5kb107XG5cdFx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoY2FjaGUpO1xuXHRcdH1cblx0fTtcblx0dmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxuXHR2YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cdC8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG5cdC8vXG5cdC8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG5cdC8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcblx0Ly9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuXHQvL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cblx0Ly9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcblx0Ly9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuXHQvL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cblx0dmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0ICAgIHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuXHRmdW5jdGlvbiBnZXREYXRhKGRhdGEpIHtcblx0XHRpZiAoZGF0YSA9PT0gXCJ0cnVlXCIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChkYXRhID09PSBcImZhbHNlXCIpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoZGF0YSA9PT0gXCJudWxsXCIpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0aWYgKGRhdGEgPT09ICtkYXRhICsgXCJcIikge1xuXHRcdFx0cmV0dXJuICtkYXRhO1xuXHRcdH1cblxuXHRcdGlmIChyYnJhY2UudGVzdChkYXRhKSkge1xuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRmdW5jdGlvbiBkYXRhQXR0cihlbGVtLCBrZXksIGRhdGEpIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0XHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0XHRpZiAoZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZShybXVsdGlEYXNoLCBcIi0kJlwiKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG5cdFx0XHRpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRkYXRhID0gZ2V0RGF0YShkYXRhKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KGVsZW0sIGtleSwgZGF0YSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdGpRdWVyeS5leHRlbmQoe1xuXHRcdGhhc0RhdGE6IGZ1bmN0aW9uIGhhc0RhdGEoZWxlbSkge1xuXHRcdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoZWxlbSkgfHwgZGF0YVByaXYuaGFzRGF0YShlbGVtKTtcblx0XHR9LFxuXG5cdFx0ZGF0YTogZnVuY3Rpb24gZGF0YShlbGVtLCBuYW1lLCBfZGF0YSkge1xuXHRcdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyhlbGVtLCBuYW1lLCBfZGF0YSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZURhdGE6IGZ1bmN0aW9uIHJlbW92ZURhdGEoZWxlbSwgbmFtZSkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKGVsZW0sIG5hbWUpO1xuXHRcdH0sXG5cblx0XHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHRcdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRcdF9kYXRhOiBmdW5jdGlvbiBfZGF0YShlbGVtLCBuYW1lLCBkYXRhKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKGVsZW0sIG5hbWUsIGRhdGEpO1xuXHRcdH0sXG5cblx0XHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24gX3JlbW92ZURhdGEoZWxlbSwgbmFtZSkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKGVsZW0sIG5hbWUpO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0ZGF0YTogZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBuYW1lLFxuXHRcdFx0ICAgIGRhdGEsXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF0sXG5cdFx0XHQgICAgYXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKHRoaXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldChlbGVtKTtcblxuXHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoZWxlbSwgXCJoYXNEYXRhQXR0cnNcIikpIHtcblx0XHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdFx0aWYgKGF0dHJzW2ldKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzW2ldLm5hbWU7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG5hbWUuaW5kZXhPZihcImRhdGEtXCIpID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZShuYW1lLnNsaWNlKDUpKTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKGVsZW0sIG5hbWUsIGRhdGFbbmFtZV0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdFx0aWYgKCh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yoa2V5KSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KHRoaXMsIGtleSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRcdGlmIChlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcblxuXHRcdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoZWxlbSwga2V5KTtcblx0XHRcdFx0XHRpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoZWxlbSwga2V5KTtcblx0XHRcdFx0XHRpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KHRoaXMsIGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZURhdGE6IGZ1bmN0aW9uIHJlbW92ZURhdGEoa2V5KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0ZGF0YVVzZXIucmVtb3ZlKHRoaXMsIGtleSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5leHRlbmQoe1xuXHRcdHF1ZXVlOiBmdW5jdGlvbiBxdWV1ZShlbGVtLCB0eXBlLCBkYXRhKSB7XG5cdFx0XHR2YXIgcXVldWU7XG5cblx0XHRcdGlmIChlbGVtKSB7XG5cdFx0XHRcdHR5cGUgPSAodHlwZSB8fCBcImZ4XCIpICsgXCJxdWV1ZVwiO1xuXHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldChlbGVtLCB0eXBlKTtcblxuXHRcdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRcdGlmIChkYXRhKSB7XG5cdFx0XHRcdFx0aWYgKCFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KGRhdGEpKSB7XG5cdFx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyhlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaChkYXRhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRkZXF1ZXVlOiBmdW5jdGlvbiBkZXF1ZXVlKGVsZW0sIHR5cGUpIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKGVsZW0sIHR5cGUpLFxuXHRcdFx0ICAgIHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0ICAgIGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdCAgICBob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyhlbGVtLCB0eXBlKSxcblx0XHRcdCAgICBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoZWxlbSwgdHlwZSk7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0XHRpZiAoZm4gPT09IFwiaW5wcm9ncmVzc1wiKSB7XG5cdFx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZuKSB7XG5cblx0XHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRcdGlmICh0eXBlID09PSBcImZ4XCIpIHtcblx0XHRcdFx0XHRxdWV1ZS51bnNoaWZ0KFwiaW5wcm9ncmVzc1wiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRcdGZuLmNhbGwoZWxlbSwgbmV4dCwgaG9va3MpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXN0YXJ0TGVuZ3RoICYmIGhvb2tzKSB7XG5cdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0XHRfcXVldWVIb29rczogZnVuY3Rpb24gX3F1ZXVlSG9va3MoZWxlbSwgdHlwZSkge1xuXHRcdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRcdHJldHVybiBkYXRhUHJpdi5nZXQoZWxlbSwga2V5KSB8fCBkYXRhUHJpdi5hY2Nlc3MoZWxlbSwga2V5LCB7XG5cdFx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZWxlbSwgW3R5cGUgKyBcInF1ZXVlXCIsIGtleV0pO1xuXHRcdFx0XHR9KVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRxdWV1ZTogZnVuY3Rpb24gcXVldWUodHlwZSwgZGF0YSkge1xuXHRcdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRcdGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdFx0c2V0dGVyLS07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkucXVldWUodGhpc1swXSwgdHlwZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKHRoaXMsIHR5cGUsIGRhdGEpO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyh0aGlzLCB0eXBlKTtcblxuXHRcdFx0XHRpZiAodHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWzBdICE9PSBcImlucHJvZ3Jlc3NcIikge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKHRoaXMsIHR5cGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdGRlcXVldWU6IGZ1bmN0aW9uIGRlcXVldWUodHlwZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKHRoaXMsIHR5cGUpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRjbGVhclF1ZXVlOiBmdW5jdGlvbiBjbGVhclF1ZXVlKHR5cGUpIHtcblx0XHRcdHJldHVybiB0aGlzLnF1ZXVlKHR5cGUgfHwgXCJmeFwiLCBbXSk7XG5cdFx0fSxcblxuXHRcdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0XHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0XHRwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKHR5cGUsIG9iaikge1xuXHRcdFx0dmFyIHRtcCxcblx0XHRcdCAgICBjb3VudCA9IDEsXG5cdFx0XHQgICAgZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdCAgICBlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHQgICAgaSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0ICAgIHJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xuXHRcdFx0XHRpZiAoISAtLWNvdW50KSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoZWxlbWVudHMsIFtlbGVtZW50c10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAodHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoZWxlbWVudHNbaV0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIik7XG5cdFx0XHRcdGlmICh0bXAgJiYgdG1wLmVtcHR5KSB7XG5cdFx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0XHR0bXAuZW1wdHkuYWRkKHJlc29sdmUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZShvYmopO1xuXHRcdH1cblx0fSk7XG5cdHZhciBwbnVtID0gL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlO1xuXG5cdHZhciByY3NzTnVtID0gbmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIik7XG5cblx0dmFyIGNzc0V4cGFuZCA9IFtcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiXTtcblxuXHR2YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24gaXNIaWRkZW5XaXRoaW5UcmVlKGVsZW0sIGVsKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0alF1ZXJ5LmNvbnRhaW5zKGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSkgJiYgalF1ZXJ5LmNzcyhlbGVtLCBcImRpc3BsYXlcIikgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cdHZhciBzd2FwID0gZnVuY3Rpb24gc3dhcChlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncykge1xuXHRcdHZhciByZXQsXG5cdFx0ICAgIG5hbWUsXG5cdFx0ICAgIG9sZCA9IHt9O1xuXG5cdFx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdG9sZFtuYW1lXSA9IGVsZW0uc3R5bGVbbmFtZV07XG5cdFx0XHRlbGVtLnN0eWxlW25hbWVdID0gb3B0aW9uc1tuYW1lXTtcblx0XHR9XG5cblx0XHRyZXQgPSBjYWxsYmFjay5hcHBseShlbGVtLCBhcmdzIHx8IFtdKTtcblxuXHRcdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRlbGVtLnN0eWxlW25hbWVdID0gb2xkW25hbWVdO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH07XG5cblx0ZnVuY3Rpb24gYWRqdXN0Q1NTKGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuKSB7XG5cdFx0dmFyIGFkanVzdGVkLFxuXHRcdCAgICBzY2FsZSA9IDEsXG5cdFx0ICAgIG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHQgICAgY3VycmVudFZhbHVlID0gdHdlZW4gPyBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0fSA6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY3NzKGVsZW0sIHByb3AsIFwiXCIpO1xuXHRcdH0sXG5cdFx0ICAgIGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHQgICAgdW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1szXSB8fCAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSA/IFwiXCIgOiBcInB4XCIpLFxuXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwpICYmIHJjc3NOdW0uZXhlYyhqUXVlcnkuY3NzKGVsZW0sIHByb3ApKTtcblxuXHRcdGlmIChpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbM10gIT09IHVuaXQpIHtcblxuXHRcdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFszXTtcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZShlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCk7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHRcdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHRcdH0gd2hpbGUgKHNjYWxlICE9PSAoc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyk7XG5cdFx0fVxuXG5cdFx0aWYgKHZhbHVlUGFydHMpIHtcblx0XHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sxXSA/IGluaXRpYWxJblVuaXQgKyAodmFsdWVQYXJ0c1sxXSArIDEpICogdmFsdWVQYXJ0c1syXSA6ICt2YWx1ZVBhcnRzWzJdO1xuXHRcdFx0aWYgKHR3ZWVuKSB7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gYWRqdXN0ZWQ7XG5cdH1cblxuXHR2YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuXHRmdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheShlbGVtKSB7XG5cdFx0dmFyIHRlbXAsXG5cdFx0ICAgIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHQgICAgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdCAgICBkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbbm9kZU5hbWVdO1xuXG5cdFx0aWYgKGRpc3BsYXkpIHtcblx0XHRcdHJldHVybiBkaXNwbGF5O1xuXHRcdH1cblxuXHRcdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlRWxlbWVudChub2RlTmFtZSkpO1xuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKHRlbXAsIFwiZGlzcGxheVwiKTtcblxuXHRcdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0ZW1wKTtcblxuXHRcdGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuXHRcdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0XHR9XG5cdFx0ZGVmYXVsdERpc3BsYXlNYXBbbm9kZU5hbWVdID0gZGlzcGxheTtcblxuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2hvd0hpZGUoZWxlbWVudHMsIHNob3cpIHtcblx0XHR2YXIgZGlzcGxheSxcblx0XHQgICAgZWxlbSxcblx0XHQgICAgdmFsdWVzID0gW10sXG5cdFx0ICAgIGluZGV4ID0gMCxcblx0XHQgICAgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdFx0Zm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRlbGVtID0gZWxlbWVudHNbaW5kZXhdO1xuXHRcdFx0aWYgKCFlbGVtLnN0eWxlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdFx0aWYgKHNob3cpIHtcblxuXHRcdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRcdGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuXHRcdFx0XHRcdHZhbHVlc1tpbmRleF0gPSBkYXRhUHJpdi5nZXQoZWxlbSwgXCJkaXNwbGF5XCIpIHx8IG51bGw7XG5cdFx0XHRcdFx0aWYgKCF2YWx1ZXNbaW5kZXhdKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZShlbGVtKSkge1xuXHRcdFx0XHRcdHZhbHVlc1tpbmRleF0gPSBnZXREZWZhdWx0RGlzcGxheShlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKGRpc3BsYXkgIT09IFwibm9uZVwiKSB7XG5cdFx0XHRcdFx0dmFsdWVzW2luZGV4XSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldChlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdFx0Zm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRpZiAodmFsdWVzW2luZGV4XSAhPSBudWxsKSB7XG5cdFx0XHRcdGVsZW1lbnRzW2luZGV4XS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzW2luZGV4XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbWVudHM7XG5cdH1cblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuXHRcdFx0cmV0dXJuIHNob3dIaWRlKHRoaXMsIHRydWUpO1xuXHRcdH0sXG5cdFx0aGlkZTogZnVuY3Rpb24gaGlkZSgpIHtcblx0XHRcdHJldHVybiBzaG93SGlkZSh0aGlzKTtcblx0XHR9LFxuXHRcdHRvZ2dsZTogZnVuY3Rpb24gdG9nZ2xlKHN0YXRlKSB7XG5cdFx0XHRpZiAodHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIikge1xuXHRcdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKGlzSGlkZGVuV2l0aGluVHJlZSh0aGlzKSkge1xuXHRcdFx0XHRcdGpRdWVyeSh0aGlzKS5zaG93KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblx0dmFyIHJjaGVja2FibGVUeXBlID0gL14oPzpjaGVja2JveHxyYWRpbykkL2k7XG5cblx0dmFyIHJ0YWdOYW1lID0gLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pO1xuXG5cdHZhciByc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2k7XG5cblx0Ly8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcblx0dmFyIHdyYXBNYXAgPSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdG9wdGlvbjogWzEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiXSxcblxuXHRcdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdFx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHRcdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0XHR0aGVhZDogWzEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCJdLFxuXHRcdGNvbDogWzIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLFxuXHRcdHRyOiBbMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIl0sXG5cdFx0dGQ6IFszLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxcblxuXHRcdF9kZWZhdWx0OiBbMCwgXCJcIiwgXCJcIl1cblx0fTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cblx0d3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcblx0d3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblx0ZnVuY3Rpb24gZ2V0QWxsKGNvbnRleHQsIHRhZykge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0XHR2YXIgcmV0O1xuXG5cdFx0aWYgKHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyB8fCBcIipcIik7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwodGFnIHx8IFwiKlwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ID0gW107XG5cdFx0fVxuXG5cdFx0aWYgKHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZShjb250ZXh0LCB0YWcpKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKFtjb250ZXh0XSwgcmV0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0Ly8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5cdGZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoZWxlbXMsIHJlZkVsZW1lbnRzKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdCAgICBsID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0Zm9yICg7IGkgPCBsOyBpKyspIHtcblx0XHRcdGRhdGFQcml2LnNldChlbGVtc1tpXSwgXCJnbG9iYWxFdmFsXCIsICFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQocmVmRWxlbWVudHNbaV0sIFwiZ2xvYmFsRXZhbFwiKSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5cdGZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdCAgICB0bXAsXG5cdFx0ICAgIHRhZyxcblx0XHQgICAgd3JhcCxcblx0XHQgICAgY29udGFpbnMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ICAgIG5vZGVzID0gW10sXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBsID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0Zm9yICg7IGkgPCBsOyBpKyspIHtcblx0XHRcdGVsZW0gPSBlbGVtc1tpXTtcblxuXHRcdFx0aWYgKGVsZW0gfHwgZWxlbSA9PT0gMCkge1xuXG5cdFx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0XHRpZiAoalF1ZXJ5LnR5cGUoZWxlbSkgPT09IFwib2JqZWN0XCIpIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2Uobm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbZWxlbV0gOiBlbGVtKTtcblxuXHRcdFx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0XHR9IGVsc2UgaWYgKCFyaHRtbC50ZXN0KGVsZW0pKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaChjb250ZXh0LmNyZWF0ZVRleHROb2RlKGVsZW0pKTtcblxuXHRcdFx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZChjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuXG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHRcdHRhZyA9IChydGFnTmFtZS5leGVjKGVsZW0pIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR3cmFwID0gd3JhcE1hcFt0YWddIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBqUXVlcnkuaHRtbFByZWZpbHRlcihlbGVtKSArIHdyYXBbMl07XG5cblx0XHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0XHRqID0gd3JhcFswXTtcblx0XHRcdFx0XHR3aGlsZSAoai0tKSB7XG5cdFx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2Uobm9kZXMsIHRtcC5jaGlsZE5vZGVzKTtcblxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlIChlbGVtID0gbm9kZXNbaSsrXSkge1xuXG5cdFx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdFx0aWYgKHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheShlbGVtLCBzZWxlY3Rpb24pID4gLTEpIHtcblx0XHRcdFx0aWYgKGlnbm9yZWQpIHtcblx0XHRcdFx0XHRpZ25vcmVkLnB1c2goZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSk7XG5cblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdFx0dG1wID0gZ2V0QWxsKGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW0pLCBcInNjcmlwdFwiKTtcblxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdFx0aWYgKGNvbnRhaW5zKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwodG1wKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdFx0aWYgKHNjcmlwdHMpIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlIChlbGVtID0gdG1wW2orK10pIHtcblx0XHRcdFx0XHRpZiAocnNjcmlwdFR5cGUudGVzdChlbGVtLnR5cGUgfHwgXCJcIikpIHtcblx0XHRcdFx0XHRcdHNjcmlwdHMucHVzaChlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZnJhZ21lbnQ7XG5cdH1cblxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHQgICAgZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksXG5cdFx0ICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdFx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHRcdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJyYWRpb1wiKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwidFwiKTtcblxuXHRcdGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0XHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0XHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKHRydWUpLmNsb25lTm9kZSh0cnVlKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRcdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUodHJ1ZSkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblx0fSkoKTtcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHR2YXIgcmtleUV2ZW50ID0gL15rZXkvLFxuXHQgICAgcm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdCAgICBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cblx0ZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuXHRmdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdFx0fSBjYXRjaCAoZXJyKSB7fVxuXHR9XG5cblx0ZnVuY3Rpb24gX29uKGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSkge1xuXHRcdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0XHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0XHRpZiAoKHR5cGVvZiB0eXBlcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHR5cGVzKSkgPT09IFwib2JqZWN0XCIpIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIpIHtcblxuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAodHlwZSBpbiB0eXBlcykge1xuXHRcdFx0XHRfb24oZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzW3R5cGVdLCBvbmUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0fVxuXG5cdFx0aWYgKGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIGlmIChmbiA9PSBudWxsKSB7XG5cdFx0XHRpZiAodHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG5cblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRcdGZuID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGZuID09PSBmYWxzZSkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCFmbikge1xuXHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0fVxuXG5cdFx0aWYgKG9uZSA9PT0gMSkge1xuXHRcdFx0b3JpZ0ZuID0gZm47XG5cdFx0XHRmbiA9IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG5cblx0XHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRcdGpRdWVyeSgpLm9mZihldmVudCk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH07XG5cblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCh0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qXG4gICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gICovXG5cdGpRdWVyeS5ldmVudCA9IHtcblxuXHRcdGdsb2JhbDoge30sXG5cblx0XHRhZGQ6IGZ1bmN0aW9uIGFkZChlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IpIHtcblxuXHRcdFx0dmFyIGhhbmRsZU9iakluLFxuXHRcdFx0ICAgIGV2ZW50SGFuZGxlLFxuXHRcdFx0ICAgIHRtcCxcblx0XHRcdCAgICBldmVudHMsXG5cdFx0XHQgICAgdCxcblx0XHRcdCAgICBoYW5kbGVPYmosXG5cdFx0XHQgICAgc3BlY2lhbCxcblx0XHRcdCAgICBoYW5kbGVycyxcblx0XHRcdCAgICB0eXBlLFxuXHRcdFx0ICAgIG5hbWVzcGFjZXMsXG5cdFx0XHQgICAgb3JpZ1R5cGUsXG5cdFx0XHQgICAgZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoZWxlbSk7XG5cblx0XHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0XHRpZiAoIWVsZW1EYXRhKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0XHRpZiAoaGFuZGxlci5oYW5kbGVyKSB7XG5cdFx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdFx0aWYgKHNlbGVjdG9yKSB7XG5cdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3Rvcihkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0XHRpZiAoIWhhbmRsZXIuZ3VpZCkge1xuXHRcdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0XHRpZiAoIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpKSB7XG5cdFx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpKSB7XG5cdFx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24gKGUpIHtcblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/IGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseShlbGVtLCBhcmd1bWVudHMpIDogdW5kZWZpbmVkO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0XHR0eXBlcyA9ICh0eXBlcyB8fCBcIlwiKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXCJcIl07XG5cdFx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKHQtLSkge1xuXHRcdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKHR5cGVzW3RdKSB8fCBbXTtcblx0XHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0XHRuYW1lc3BhY2VzID0gKHRtcFsyXSB8fCBcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpO1xuXG5cdFx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0XHRpZiAoIXR5cGUpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0gfHwge307XG5cblx0XHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHRcdHR5cGUgPSAoc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUpIHx8IHR5cGU7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0gfHwge307XG5cblx0XHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCh7XG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChzZWxlY3RvciksXG5cdFx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpXG5cdFx0XHRcdH0sIGhhbmRsZU9iakluKTtcblxuXHRcdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0XHRpZiAoIShoYW5kbGVycyA9IGV2ZW50c1t0eXBlXSkpIHtcblx0XHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1t0eXBlXSA9IFtdO1xuXHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdFx0aWYgKCFzcGVjaWFsLnNldHVwIHx8IHNwZWNpYWwuc2V0dXAuY2FsbChlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSkgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGV2ZW50SGFuZGxlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc3BlY2lhbC5hZGQpIHtcblx0XHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKGVsZW0sIGhhbmRsZU9iaik7XG5cblx0XHRcdFx0XHRpZiAoIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQpIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdFx0aWYgKHNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRoYW5kbGVycy5wdXNoKGhhbmRsZU9iaik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbdHlwZV0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0XHRyZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzKSB7XG5cblx0XHRcdHZhciBqLFxuXHRcdFx0ICAgIG9yaWdDb3VudCxcblx0XHRcdCAgICB0bXAsXG5cdFx0XHQgICAgZXZlbnRzLFxuXHRcdFx0ICAgIHQsXG5cdFx0XHQgICAgaGFuZGxlT2JqLFxuXHRcdFx0ICAgIHNwZWNpYWwsXG5cdFx0XHQgICAgaGFuZGxlcnMsXG5cdFx0XHQgICAgdHlwZSxcblx0XHRcdCAgICBuYW1lc3BhY2VzLFxuXHRcdFx0ICAgIG9yaWdUeXBlLFxuXHRcdFx0ICAgIGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YShlbGVtKSAmJiBkYXRhUHJpdi5nZXQoZWxlbSk7XG5cblx0XHRcdGlmICghZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdFx0dHlwZXMgPSAodHlwZXMgfHwgXCJcIikubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW1wiXCJdO1xuXHRcdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHRcdHdoaWxlICh0LS0pIHtcblx0XHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyh0eXBlc1t0XSkgfHwgW107XG5cdFx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcblx0XHRcdFx0bmFtZXNwYWNlcyA9ICh0bXBbMl0gfHwgXCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKTtcblxuXHRcdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCF0eXBlKSB7XG5cdFx0XHRcdFx0Zm9yICh0eXBlIGluIGV2ZW50cykge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZShlbGVtLCB0eXBlICsgdHlwZXNbdF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0gfHwge307XG5cdFx0XHRcdHR5cGUgPSAoc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUpIHx8IHR5cGU7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzW3R5cGVdIHx8IFtdO1xuXHRcdFx0XHR0bXAgPSB0bXBbMl0gJiYgbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlIChqLS0pIHtcblx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1tqXTtcblxuXHRcdFx0XHRcdGlmICgobWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSkgJiYgKCFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQpICYmICghdG1wIHx8IHRtcC50ZXN0KGhhbmRsZU9iai5uYW1lc3BhY2UpKSAmJiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IpKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoaiwgMSk7XG5cblx0XHRcdFx0XHRcdGlmIChoYW5kbGVPYmouc2VsZWN0b3IpIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHNwZWNpYWwucmVtb3ZlKSB7XG5cdFx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoZWxlbSwgaGFuZGxlT2JqKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0XHRpZiAob3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGgpIHtcblx0XHRcdFx0XHRpZiAoIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSkgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudChlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGRlbGV0ZSBldmVudHNbdHlwZV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRcdGlmIChqUXVlcnkuaXNFbXB0eU9iamVjdChldmVudHMpKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZShlbGVtLCBcImhhbmRsZSBldmVudHNcIik7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaChuYXRpdmVFdmVudCkge1xuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgobmF0aXZlRXZlbnQpO1xuXG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIHJldCxcblx0XHRcdCAgICBtYXRjaGVkLFxuXHRcdFx0ICAgIGhhbmRsZU9iaixcblx0XHRcdCAgICBoYW5kbGVyUXVldWUsXG5cdFx0XHQgICAgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxcblx0XHRcdCAgICBoYW5kbGVycyA9IChkYXRhUHJpdi5nZXQodGhpcywgXCJldmVudHNcIikgfHwge30pW2V2ZW50LnR5cGVdIHx8IFtdLFxuXHRcdFx0ICAgIHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFtldmVudC50eXBlXSB8fCB7fTtcblxuXHRcdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRcdGFyZ3NbMF0gPSBldmVudDtcblxuXHRcdFx0Zm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0fVxuXG5cdFx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRcdGlmIChzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCh0aGlzLCBldmVudCkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLCBldmVudCwgaGFuZGxlcnMpO1xuXG5cdFx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdFx0aSA9IDA7XG5cdFx0XHR3aGlsZSAoKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbaSsrXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcblx0XHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKChoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzW2orK10pICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdFx0aWYgKCFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdChoYW5kbGVPYmoubmFtZXNwYWNlKSkge1xuXG5cdFx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRcdHJldCA9ICgoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbaGFuZGxlT2JqLm9yaWdUeXBlXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyKS5hcHBseShtYXRjaGVkLmVsZW0sIGFyZ3MpO1xuXG5cdFx0XHRcdFx0XHRpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0aWYgKChldmVudC5yZXN1bHQgPSByZXQpID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdFx0aWYgKHNwZWNpYWwucG9zdERpc3BhdGNoKSB7XG5cdFx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwodGhpcywgZXZlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVyczogZnVuY3Rpb24gaGFuZGxlcnMoZXZlbnQsIF9oYW5kbGVycykge1xuXHRcdFx0dmFyIGksXG5cdFx0XHQgICAgaGFuZGxlT2JqLFxuXHRcdFx0ICAgIHNlbCxcblx0XHRcdCAgICBtYXRjaGVkSGFuZGxlcnMsXG5cdFx0XHQgICAgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdCAgICBoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdCAgICBkZWxlZ2F0ZUNvdW50ID0gX2hhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHQgICAgY3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0XHRpZiAoZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0IShldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEpKSB7XG5cblx0XHRcdFx0Zm9yICg7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcykge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdFx0aWYgKGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUpKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKyspIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gX2hhbmRsZXJzW2ldO1xuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChtYXRjaGVkU2VsZWN0b3JzW3NlbF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbc2VsXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgPyBqUXVlcnkoc2VsLCB0aGlzKS5pbmRleChjdXIpID4gLTEgOiBqUXVlcnkuZmluZChzZWwsIHRoaXMsIG51bGwsIFtjdXJdKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKG1hdGNoZWRTZWxlY3RvcnNbc2VsXSkge1xuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKGhhbmRsZU9iaik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChtYXRjaGVkSGFuZGxlcnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0XHRjdXIgPSB0aGlzO1xuXHRcdFx0aWYgKGRlbGVnYXRlQ291bnQgPCBfaGFuZGxlcnMubGVuZ3RoKSB7XG5cdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogX2hhbmRsZXJzLnNsaWNlKGRlbGVnYXRlQ291bnQpIH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHRcdH0sXG5cblx0XHRhZGRQcm9wOiBmdW5jdGlvbiBhZGRQcm9wKG5hbWUsIGhvb2spIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKGhvb2spID8gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKHRoaXMub3JpZ2luYWxFdmVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbbmFtZV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Zml4OiBmdW5jdGlvbiBmaXgob3JpZ2luYWxFdmVudCkge1xuXHRcdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbalF1ZXJ5LmV4cGFuZG9dID8gb3JpZ2luYWxFdmVudCA6IG5ldyBqUXVlcnkuRXZlbnQob3JpZ2luYWxFdmVudCk7XG5cdFx0fSxcblxuXHRcdHNwZWNpYWw6IHtcblx0XHRcdGxvYWQ6IHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0Zm9jdXM6IHtcblxuXHRcdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcblx0XHRcdFx0XHRpZiAodGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0XHR9LFxuXHRcdFx0Ymx1cjoge1xuXHRcdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1cikge1xuXHRcdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdFx0fSxcblx0XHRcdGNsaWNrOiB7XG5cblx0XHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcblx0XHRcdFx0XHRpZiAodGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSh0aGlzLCBcImlucHV0XCIpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoZXZlbnQpIHtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoZXZlbnQudGFyZ2V0LCBcImFcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uIHBvc3REaXNwYXRjaChldmVudCkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdFx0aWYgKGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQpIHtcblx0XHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdGpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uIChlbGVtLCB0eXBlLCBoYW5kbGUpIHtcblxuXHRcdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRcdGlmIChlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGUpO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiAoc3JjLCBwcm9wcykge1xuXG5cdFx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdFx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkpIHtcblx0XHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KHNyYywgcHJvcHMpO1xuXHRcdH1cblxuXHRcdC8vIEV2ZW50IG9iamVjdFxuXHRcdGlmIChzcmMgJiYgc3JjLnR5cGUpIHtcblx0XHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8IHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID8gcmV0dXJuVHJ1ZSA6IHJldHVybkZhbHNlO1xuXG5cdFx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0XHR0aGlzLnRhcmdldCA9IHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyA/IHNyYy50YXJnZXQucGFyZW50Tm9kZSA6IHNyYy50YXJnZXQ7XG5cblx0XHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0XHRcdC8vIEV2ZW50IHR5cGVcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50eXBlID0gc3JjO1xuXHRcdH1cblxuXHRcdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdFx0aWYgKHByb3BzKSB7XG5cdFx0XHRqUXVlcnkuZXh0ZW5kKHRoaXMsIHByb3BzKTtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHRcdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdFx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHRcdHRoaXNbalF1ZXJ5LmV4cGFuZG9dID0gdHJ1ZTtcblx0fTtcblxuXHQvLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxuXHRqUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRcdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdFx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0XHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdFx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRcdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRcdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcblx0XHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRcdGlmIChlICYmICF0aGlzLmlzU2ltdWxhdGVkKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuXHRcdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0XHRpZiAoZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCkge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbiBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSB7XG5cdFx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRcdGlmIChlICYmICF0aGlzLmlzU2ltdWxhdGVkKSB7XG5cdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRhbHRLZXk6IHRydWUsXG5cdFx0YnViYmxlczogdHJ1ZSxcblx0XHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRcdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRcdGN0cmxLZXk6IHRydWUsXG5cdFx0ZGV0YWlsOiB0cnVlLFxuXHRcdGV2ZW50UGhhc2U6IHRydWUsXG5cdFx0bWV0YUtleTogdHJ1ZSxcblx0XHRwYWdlWDogdHJ1ZSxcblx0XHRwYWdlWTogdHJ1ZSxcblx0XHRzaGlmdEtleTogdHJ1ZSxcblx0XHR2aWV3OiB0cnVlLFxuXHRcdFwiY2hhclwiOiB0cnVlLFxuXHRcdGNoYXJDb2RlOiB0cnVlLFxuXHRcdGtleTogdHJ1ZSxcblx0XHRrZXlDb2RlOiB0cnVlLFxuXHRcdGJ1dHRvbjogdHJ1ZSxcblx0XHRidXR0b25zOiB0cnVlLFxuXHRcdGNsaWVudFg6IHRydWUsXG5cdFx0Y2xpZW50WTogdHJ1ZSxcblx0XHRvZmZzZXRYOiB0cnVlLFxuXHRcdG9mZnNldFk6IHRydWUsXG5cdFx0cG9pbnRlcklkOiB0cnVlLFxuXHRcdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRcdHNjcmVlblg6IHRydWUsXG5cdFx0c2NyZWVuWTogdHJ1ZSxcblx0XHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHRcdHRvRWxlbWVudDogdHJ1ZSxcblx0XHR0b3VjaGVzOiB0cnVlLFxuXG5cdFx0d2hpY2g6IGZ1bmN0aW9uIHdoaWNoKGV2ZW50KSB7XG5cdFx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmIChldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KGV2ZW50LnR5cGUpKSB7XG5cdFx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHRpZiAoIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoZXZlbnQudHlwZSkpIHtcblx0XHRcdFx0aWYgKGJ1dHRvbiAmIDEpIHtcblx0XHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChidXR0b24gJiAyKSB7XG5cdFx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYnV0dG9uICYgNCkge1xuXHRcdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudC53aGljaDtcblx0XHR9XG5cdH0sIGpRdWVyeS5ldmVudC5hZGRQcm9wKTtcblxuXHQvLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncblx0Ly8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cblx0Ly8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcblx0Ly9cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuXHQvLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcblx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG5cdC8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRcdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0XHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0XHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG5cdH0sIGZ1bmN0aW9uIChvcmlnLCBmaXgpIHtcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFtvcmlnXSA9IHtcblx0XHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdFx0aGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcblx0XHRcdFx0dmFyIHJldCxcblx0XHRcdFx0ICAgIHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdCAgICByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0ICAgIGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0XHRpZiAoIXJlbGF0ZWQgfHwgcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnModGFyZ2V0LCByZWxhdGVkKSkge1xuXHRcdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cblx0XHRvbjogZnVuY3Rpb24gb24odHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbikge1xuXHRcdFx0cmV0dXJuIF9vbih0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuKTtcblx0XHR9LFxuXHRcdG9uZTogZnVuY3Rpb24gb25lKHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4pIHtcblx0XHRcdHJldHVybiBfb24odGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSk7XG5cdFx0fSxcblx0XHRvZmY6IGZ1bmN0aW9uIG9mZih0eXBlcywgc2VsZWN0b3IsIGZuKSB7XG5cdFx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdFx0aWYgKHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaikge1xuXG5cdFx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0XHRqUXVlcnkodHlwZXMuZGVsZWdhdGVUYXJnZXQpLm9mZihoYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLm9yaWdUeXBlLCBoYW5kbGVPYmouc2VsZWN0b3IsIGhhbmRsZU9iai5oYW5kbGVyKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHR5cGVvZiB0eXBlcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHR5cGVzKSkgPT09IFwib2JqZWN0XCIpIHtcblxuXHRcdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0XHRmb3IgKHR5cGUgaW4gdHlwZXMpIHtcblx0XHRcdFx0XHR0aGlzLm9mZih0eXBlLCBzZWxlY3RvciwgdHlwZXNbdHlwZV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuXG5cdFx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZm4gPT09IGZhbHNlKSB7XG5cdFx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSh0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdCAgICByc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHQgICAgcmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG5cdC8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuXHRmdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoZWxlbSwgY29udGVudCkge1xuXHRcdGlmIChub2RlTmFtZShlbGVtLCBcInRhYmxlXCIpICYmIG5vZGVOYW1lKGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiKSkge1xuXG5cdFx0XHRyZXR1cm4galF1ZXJ5KFwiPnRib2R5XCIsIGVsZW0pWzBdIHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHQvLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5cdGZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoZWxlbSkge1xuXHRcdGVsZW0udHlwZSA9IChlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikgIT09IG51bGwpICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblx0ZnVuY3Rpb24gcmVzdG9yZVNjcmlwdChlbGVtKSB7XG5cdFx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyhlbGVtLnR5cGUpO1xuXG5cdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRlbGVtLnR5cGUgPSBtYXRjaFsxXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoc3JjLCBkZXN0KSB7XG5cdFx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0XHRpZiAoZGVzdC5ub2RlVHlwZSAhPT0gMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdFx0aWYgKGRhdGFQcml2Lmhhc0RhdGEoc3JjKSkge1xuXHRcdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3Moc3JjKTtcblx0XHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KGRlc3QsIHBkYXRhT2xkKTtcblx0XHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdFx0aWYgKGV2ZW50cykge1xuXHRcdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0XHRmb3IgKHR5cGUgaW4gZXZlbnRzKSB7XG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgbCA9IGV2ZW50c1t0eXBlXS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoZGVzdCwgdHlwZSwgZXZlbnRzW3R5cGVdW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRcdGlmIChkYXRhVXNlci5oYXNEYXRhKHNyYykpIHtcblx0XHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKHNyYyk7XG5cdFx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoe30sIHVkYXRhT2xkKTtcblxuXHRcdFx0ZGF0YVVzZXIuc2V0KGRlc3QsIHVkYXRhQ3VyKTtcblx0XHR9XG5cdH1cblxuXHQvLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcblx0ZnVuY3Rpb24gZml4SW5wdXQoc3JjLCBkZXN0KSB7XG5cdFx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdFx0aWYgKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdChzcmMudHlwZSkpIHtcblx0XHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdFx0XHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHRcdH0gZWxzZSBpZiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiKSB7XG5cdFx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZG9tTWFuaXAoY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQpIHtcblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRhcmdzID0gY29uY2F0LmFwcGx5KFtdLCBhcmdzKTtcblxuXHRcdHZhciBmcmFnbWVudCxcblx0XHQgICAgZmlyc3QsXG5cdFx0ICAgIHNjcmlwdHMsXG5cdFx0ICAgIGhhc1NjcmlwdHMsXG5cdFx0ICAgIG5vZGUsXG5cdFx0ICAgIGRvYyxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHQgICAgaU5vQ2xvbmUgPSBsIC0gMSxcblx0XHQgICAgdmFsdWUgPSBhcmdzWzBdLFxuXHRcdCAgICBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpO1xuXG5cdFx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdFx0aWYgKGlzRnVuY3Rpb24gfHwgbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG5cdFx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcShpbmRleCk7XG5cdFx0XHRcdGlmIChpc0Z1bmN0aW9uKSB7XG5cdFx0XHRcdFx0YXJnc1swXSA9IHZhbHVlLmNhbGwodGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkb21NYW5pcChzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAobCkge1xuXHRcdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KGFyZ3MsIGNvbGxlY3Rpb25bMF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQpO1xuXHRcdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRpZiAoZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0XHRpZiAoZmlyc3QgfHwgaWdub3JlZCkge1xuXHRcdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcChnZXRBbGwoZnJhZ21lbnQsIFwic2NyaXB0XCIpLCBkaXNhYmxlU2NyaXB0KTtcblx0XHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdFx0aWYgKGkgIT09IGlOb0Nsb25lKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKG5vZGUsIHRydWUsIHRydWUpO1xuXG5cdFx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0XHRpZiAoaGFzU2NyaXB0cykge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZShzY3JpcHRzLCBnZXRBbGwobm9kZSwgXCJzY3JpcHRcIikpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoY29sbGVjdGlvbltpXSwgbm9kZSwgaSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaGFzU2NyaXB0cykge1xuXHRcdFx0XHRcdGRvYyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoc2NyaXB0cywgcmVzdG9yZVNjcmlwdCk7XG5cblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKykge1xuXHRcdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbaV07XG5cdFx0XHRcdFx0XHRpZiAocnNjcmlwdFR5cGUudGVzdChub2RlLnR5cGUgfHwgXCJcIikgJiYgIWRhdGFQcml2LmFjY2Vzcyhub2RlLCBcImdsb2JhbEV2YWxcIikgJiYgalF1ZXJ5LmNvbnRhaW5zKGRvYywgbm9kZSkpIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAobm9kZS5zcmMpIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5fZXZhbFVybCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKG5vZGUuc3JjKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0RE9NRXZhbChub2RlLnRleHRDb250ZW50LnJlcGxhY2UocmNsZWFuU2NyaXB0LCBcIlwiKSwgZG9jKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjb2xsZWN0aW9uO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3JlbW92ZShlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEpIHtcblx0XHR2YXIgbm9kZSxcblx0XHQgICAgbm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoc2VsZWN0b3IsIGVsZW0pIDogZWxlbSxcblx0XHQgICAgaSA9IDA7XG5cblx0XHRmb3IgKDsgKG5vZGUgPSBub2Rlc1tpXSkgIT0gbnVsbDsgaSsrKSB7XG5cdFx0XHRpZiAoIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YShnZXRBbGwobm9kZSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobm9kZS5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdGlmIChrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMobm9kZS5vd25lckRvY3VtZW50LCBub2RlKSkge1xuXHRcdFx0XHRcdHNldEdsb2JhbEV2YWwoZ2V0QWxsKG5vZGUsIFwic2NyaXB0XCIpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKHtcblx0XHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiBodG1sUHJlZmlsdGVyKGh0bWwpIHtcblx0XHRcdHJldHVybiBodG1sLnJlcGxhY2UocnhodG1sVGFnLCBcIjwkMT48LyQyPlwiKTtcblx0XHR9LFxuXG5cdFx0Y2xvbmU6IGZ1bmN0aW9uIGNsb25lKGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBsLFxuXHRcdFx0ICAgIHNyY0VsZW1lbnRzLFxuXHRcdFx0ICAgIGRlc3RFbGVtZW50cyxcblx0XHRcdCAgICBjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKHRydWUpLFxuXHRcdFx0ICAgIGluUGFnZSA9IGpRdWVyeS5jb250YWlucyhlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0pO1xuXG5cdFx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRcdGlmICghc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSkgJiYgIWpRdWVyeS5pc1hNTERvYyhlbGVtKSkge1xuXG5cdFx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoY2xvbmUpO1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbChlbGVtKTtcblxuXHRcdFx0XHRmb3IgKGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0Zml4SW5wdXQoc3JjRWxlbWVudHNbaV0sIGRlc3RFbGVtZW50c1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdFx0aWYgKGRhdGFBbmRFdmVudHMpIHtcblx0XHRcdFx0aWYgKGRlZXBEYXRhQW5kRXZlbnRzKSB7XG5cdFx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoZWxlbSk7XG5cdFx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbChjbG9uZSk7XG5cblx0XHRcdFx0XHRmb3IgKGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudChzcmNFbGVtZW50c1tpXSwgZGVzdEVsZW1lbnRzW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoZWxlbSwgY2xvbmUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbChjbG9uZSwgXCJzY3JpcHRcIik7XG5cdFx0XHRpZiAoZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbChkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKGVsZW0sIFwic2NyaXB0XCIpKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0XHRyZXR1cm4gY2xvbmU7XG5cdFx0fSxcblxuXHRcdGNsZWFuRGF0YTogZnVuY3Rpb24gY2xlYW5EYXRhKGVsZW1zKSB7XG5cdFx0XHR2YXIgZGF0YSxcblx0XHRcdCAgICBlbGVtLFxuXHRcdFx0ICAgIHR5cGUsXG5cdFx0XHQgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0ICAgIGkgPSAwO1xuXG5cdFx0XHRmb3IgKDsgKGVsZW0gPSBlbGVtc1tpXSkgIT09IHVuZGVmaW5lZDsgaSsrKSB7XG5cdFx0XHRcdGlmIChhY2NlcHREYXRhKGVsZW0pKSB7XG5cdFx0XHRcdFx0aWYgKGRhdGEgPSBlbGVtW2RhdGFQcml2LmV4cGFuZG9dKSB7XG5cdFx0XHRcdFx0XHRpZiAoZGF0YS5ldmVudHMpIHtcblx0XHRcdFx0XHRcdFx0Zm9yICh0eXBlIGluIGRhdGEuZXZlbnRzKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHNwZWNpYWxbdHlwZV0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoZWxlbSwgdHlwZSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdFx0ZWxlbVtkYXRhUHJpdi5leHBhbmRvXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGVsZW1bZGF0YVVzZXIuZXhwYW5kb10pIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdFx0ZWxlbVtkYXRhVXNlci5leHBhbmRvXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGRldGFjaDogZnVuY3Rpb24gZGV0YWNoKHNlbGVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gX3JlbW92ZSh0aGlzLCBzZWxlY3RvciwgdHJ1ZSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKHNlbGVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gX3JlbW92ZSh0aGlzLCBzZWxlY3Rvcik7XG5cdFx0fSxcblxuXHRcdHRleHQ6IGZ1bmN0aW9uIHRleHQodmFsdWUpIHtcblx0XHRcdHJldHVybiBhY2Nlc3ModGhpcywgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8galF1ZXJ5LnRleHQodGhpcykgOiB0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCk7XG5cdFx0fSxcblxuXHRcdGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xuXHRcdFx0cmV0dXJuIGRvbU1hbmlwKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0aWYgKHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSkge1xuXHRcdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQodGhpcywgZWxlbSk7XG5cdFx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0cHJlcGVuZDogZnVuY3Rpb24gcHJlcGVuZCgpIHtcblx0XHRcdHJldHVybiBkb21NYW5pcCh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdGlmICh0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkpIHtcblx0XHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KHRoaXMsIGVsZW0pO1xuXHRcdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0YmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUoKSB7XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRpZiAodGhpcy5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtLCB0aGlzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGFmdGVyOiBmdW5jdGlvbiBhZnRlcigpIHtcblx0XHRcdHJldHVybiBkb21NYW5pcCh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdGlmICh0aGlzLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW0sIHRoaXMubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0ZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KCkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGZvciAoOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKykge1xuXHRcdFx0XHRpZiAoZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKGdldEFsbChlbGVtLCBmYWxzZSkpO1xuXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0Y2xvbmU6IGZ1bmN0aW9uIGNsb25lKGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzKSB7XG5cdFx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRodG1sOiBmdW5jdGlvbiBodG1sKHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXNbMF0gfHwge30sXG5cdFx0XHRcdCAgICBpID0gMCxcblx0XHRcdFx0ICAgIGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCh2YWx1ZSkgJiYgIXdyYXBNYXBbKHJ0YWdOYW1lLmV4ZWModmFsdWUpIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pIHtcblxuXHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIodmFsdWUpO1xuXG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzW2ldIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0XHRpZiAoZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoZ2V0QWxsKGVsZW0sIGZhbHNlKSk7XG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChlbGVtKSB7XG5cdFx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCh2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoKTtcblx0XHR9LFxuXG5cdFx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKCkge1xuXHRcdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRcdGlmIChqUXVlcnkuaW5BcnJheSh0aGlzLCBpZ25vcmVkKSA8IDApIHtcblx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKGdldEFsbCh0aGlzKSk7XG5cdFx0XHRcdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZChlbGVtLCB0aGlzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0XHR9LCBpZ25vcmVkKTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0XHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRcdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0XHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRcdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxuXHR9LCBmdW5jdGlvbiAobmFtZSwgb3JpZ2luYWwpIHtcblx0XHRqUXVlcnkuZm5bbmFtZV0gPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcblx0XHRcdHZhciBlbGVtcyxcblx0XHRcdCAgICByZXQgPSBbXSxcblx0XHRcdCAgICBpbnNlcnQgPSBqUXVlcnkoc2VsZWN0b3IpLFxuXHRcdFx0ICAgIGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdCAgICBpID0gMDtcblxuXHRcdFx0Zm9yICg7IGkgPD0gbGFzdDsgaSsrKSB7XG5cdFx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKHRydWUpO1xuXHRcdFx0XHRqUXVlcnkoaW5zZXJ0W2ldKVtvcmlnaW5hbF0oZWxlbXMpO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdHB1c2guYXBwbHkocmV0LCBlbGVtcy5nZXQoKSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhyZXQpO1xuXHRcdH07XG5cdH0pO1xuXHR2YXIgcm1hcmdpbiA9IC9ebWFyZ2luLztcblxuXHR2YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cChcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIpO1xuXG5cdHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiBnZXRTdHlsZXMoZWxlbSkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCF2aWV3IHx8ICF2aWV3Lm9wZW5lcikge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuXHR9O1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0XHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRcdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0XHRpZiAoIWRpdikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgKyBcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgKyBcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgKyBcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cblx0XHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRpdik7XG5cdFx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuXG5cdFx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0XHRkaXYgPSBudWxsO1xuXHRcdH1cblxuXHRcdHZhciBwaXhlbFBvc2l0aW9uVmFsLFxuXHRcdCAgICBib3hTaXppbmdSZWxpYWJsZVZhbCxcblx0XHQgICAgcGl4ZWxNYXJnaW5SaWdodFZhbCxcblx0XHQgICAgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdCAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdCAgICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdFx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0XHRpZiAoIWRpdi5zdHlsZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdFx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRcdGRpdi5jbG9uZU5vZGUodHJ1ZSkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRcdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArIFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKGRpdik7XG5cblx0XHRqUXVlcnkuZXh0ZW5kKHN1cHBvcnQsIHtcblx0XHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uIHBpeGVsUG9zaXRpb24oKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdFx0fSxcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbiBib3hTaXppbmdSZWxpYWJsZSgpIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdFx0fSxcblx0XHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uIHBpeGVsTWFyZ2luUmlnaHQoKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdFx0fSxcblx0XHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24gcmVsaWFibGVNYXJnaW5MZWZ0KCkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KSgpO1xuXG5cdGZ1bmN0aW9uIGN1ckNTUyhlbGVtLCBuYW1lLCBjb21wdXRlZCkge1xuXHRcdHZhciB3aWR0aCxcblx0XHQgICAgbWluV2lkdGgsXG5cdFx0ICAgIG1heFdpZHRoLFxuXHRcdCAgICByZXQsXG5cblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKGVsZW0pO1xuXG5cdFx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHRcdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHRcdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRcdGlmIChjb21wdXRlZCkge1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSB8fCBjb21wdXRlZFtuYW1lXTtcblxuXHRcdFx0aWYgKHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSkpIHtcblx0XHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKGVsZW0sIG5hbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdFx0aWYgKCFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdChyZXQpICYmIHJtYXJnaW4udGVzdChuYW1lKSkge1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDogcmV0O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkR2V0SG9va0lmKGNvbmRpdGlvbkZuLCBob29rRm4pIHtcblxuXHRcdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRpZiAoY29uZGl0aW9uRm4oKSkge1xuXG5cdFx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdFx0cmV0dXJuICh0aGlzLmdldCA9IGhvb2tGbikuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0dmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0ICAgIHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdCAgICBjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0ICAgIGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cdCAgICBjc3NQcmVmaXhlcyA9IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLFxuXHQgICAgZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7XG5cblx0Ly8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuXHRmdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZShuYW1lKSB7XG5cblx0XHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRcdGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0XHR2YXIgY2FwTmFtZSA9IG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksXG5cdFx0ICAgIGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRuYW1lID0gY3NzUHJlZml4ZXNbaV0gKyBjYXBOYW1lO1xuXHRcdFx0aWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuXHRcdFx0XHRyZXR1cm4gbmFtZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cblx0Ly8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5cdGZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUobmFtZSkge1xuXHRcdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbbmFtZV07XG5cdFx0aWYgKCFyZXQpIHtcblx0XHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1tuYW1lXSA9IHZlbmRvclByb3BOYW1lKG5hbWUpIHx8IG5hbWU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlcihlbGVtLCB2YWx1ZSwgc3VidHJhY3QpIHtcblxuXHRcdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0XHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0XHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyh2YWx1ZSk7XG5cdFx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCgwLCBtYXRjaGVzWzJdIC0gKHN1YnRyYWN0IHx8IDApKSArIChtYXRjaGVzWzNdIHx8IFwicHhcIikgOiB2YWx1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzKSB7XG5cdFx0dmFyIGksXG5cdFx0ICAgIHZhbCA9IDA7XG5cblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHRpZiAoZXh0cmEgPT09IChpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIikpIHtcblx0XHRcdGkgPSA0O1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdFx0fSBlbHNlIHtcblx0XHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0XHR9XG5cblx0XHRmb3IgKDsgaSA8IDQ7IGkgKz0gMikge1xuXG5cdFx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0XHRpZiAoZXh0cmEgPT09IFwibWFyZ2luXCIpIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbaV0sIHRydWUsIHN0eWxlcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc0JvcmRlckJveCkge1xuXG5cdFx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0XHRpZiAoZXh0cmEgPT09IFwiY29udGVudFwiKSB7XG5cdFx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbaV0sIHRydWUsIHN0eWxlcyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0XHRpZiAoZXh0cmEgIT09IFwibWFyZ2luXCIpIHtcblx0XHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyhlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kW2ldICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kW2ldLCB0cnVlLCBzdHlsZXMpO1xuXG5cdFx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdFx0aWYgKGV4dHJhICE9PSBcInBhZGRpbmdcIikge1xuXHRcdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbaV0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodChlbGVtLCBuYW1lLCBleHRyYSkge1xuXG5cdFx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHRcdHZhciB2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdCAgICBzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbSksXG5cdFx0ICAgIHZhbCA9IGN1ckNTUyhlbGVtLCBuYW1lLCBzdHlsZXMpLFxuXHRcdCAgICBpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcykgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAocm51bW5vbnB4LnRlc3QodmFsKSkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiYgKHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbbmFtZV0pO1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL0hlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdGlmICh2YWwgPT09IFwiYXV0b1wiKSB7XG5cdFx0XHR2YWwgPSBlbGVtW1wib2Zmc2V0XCIgKyBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpXTtcblx0XHR9XG5cblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdFx0dmFsID0gcGFyc2VGbG9hdCh2YWwpIHx8IDA7XG5cblx0XHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRcdHJldHVybiB2YWwgKyBhdWdtZW50V2lkdGhPckhlaWdodChlbGVtLCBuYW1lLCBleHRyYSB8fCAoaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIpLCB2YWx1ZUlzQm9yZGVyQm94LCBzdHlsZXMpICsgXCJweFwiO1xuXHR9XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cblx0XHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0XHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0XHRjc3NIb29rczoge1xuXHRcdFx0b3BhY2l0eToge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChlbGVtLCBjb21wdXRlZCkge1xuXHRcdFx0XHRcdGlmIChjb21wdXRlZCkge1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyhlbGVtLCBcIm9wYWNpdHlcIik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdFx0Y3NzTnVtYmVyOiB7XG5cdFx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XHRcInpvb21cIjogdHJ1ZVxuXHRcdH0sXG5cblx0XHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdFx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRcdGNzc1Byb3BzOiB7XG5cdFx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHRcdH0sXG5cblx0XHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRcdHN0eWxlOiBmdW5jdGlvbiBzdHlsZShlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEpIHtcblxuXHRcdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0XHRpZiAoIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0ICAgIHR5cGUsXG5cdFx0XHQgICAgaG9va3MsXG5cdFx0XHQgICAgb3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKG5hbWUpLFxuXHRcdFx0ICAgIGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QobmFtZSksXG5cdFx0XHQgICAgc3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRcdGlmICghaXNDdXN0b21Qcm9wKSB7XG5cdFx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKG9yaWdOYW1lKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzW25hbWVdIHx8IGpRdWVyeS5jc3NIb29rc1tvcmlnTmFtZV07XG5cblx0XHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHZhbHVlKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRcdGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIChyZXQgPSByY3NzTnVtLmV4ZWModmFsdWUpKSAmJiByZXRbMV0pIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyhlbGVtLCBuYW1lLCByZXQpO1xuXG5cdFx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0XHRpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdFx0aWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WzNdIHx8IChqUXVlcnkuY3NzTnVtYmVyW29yaWdOYW1lXSA/IFwiXCIgOiBcInB4XCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0XHRpZiAoIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZihcImJhY2tncm91bmRcIikgPT09IDApIHtcblx0XHRcdFx0XHRzdHlsZVtuYW1lXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRcdGlmICghaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoZWxlbSwgdmFsdWUsIGV4dHJhKSkgIT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHRcdFx0aWYgKGlzQ3VzdG9tUHJvcCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdHlsZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdFx0aWYgKGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldChlbGVtLCBmYWxzZSwgZXh0cmEpKSAhPT0gdW5kZWZpbmVkKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdFx0cmV0dXJuIHN0eWxlW25hbWVdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRjc3M6IGZ1bmN0aW9uIGNzcyhlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzKSB7XG5cdFx0XHR2YXIgdmFsLFxuXHRcdFx0ICAgIG51bSxcblx0XHRcdCAgICBob29rcyxcblx0XHRcdCAgICBvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UobmFtZSksXG5cdFx0XHQgICAgaXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdChuYW1lKTtcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdFx0aWYgKCFpc0N1c3RvbVByb3ApIHtcblx0XHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUob3JpZ05hbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1tuYW1lXSB8fCBqUXVlcnkuY3NzSG9va3Nbb3JpZ05hbWVdO1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MpIHtcblx0XHRcdFx0dmFsID0gaG9va3MuZ2V0KGVsZW0sIHRydWUsIGV4dHJhKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR2YWwgPSBjdXJDU1MoZWxlbSwgbmFtZSwgc3R5bGVzKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0XHRpZiAodmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtKSB7XG5cdFx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVtuYW1lXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0XHRpZiAoZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEpIHtcblx0XHRcdFx0bnVtID0gcGFyc2VGbG9hdCh2YWwpO1xuXHRcdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUobnVtKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1wiaGVpZ2h0XCIsIFwid2lkdGhcIl0sIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzW25hbWVdID0ge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSwgY29tcHV0ZWQsIGV4dHJhKSB7XG5cdFx0XHRcdGlmIChjb21wdXRlZCkge1xuXG5cdFx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoalF1ZXJ5LmNzcyhlbGVtLCBcImRpc3BsYXlcIikpICYmIChcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSA/IHN3YXAoZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoZWxlbSwgbmFtZSwgZXh0cmEpO1xuXHRcdFx0XHRcdH0pIDogZ2V0V2lkdGhPckhlaWdodChlbGVtLCBuYW1lLCBleHRyYSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0sIHZhbHVlLCBleHRyYSkge1xuXHRcdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0ICAgIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyhlbGVtKSxcblx0XHRcdFx0ICAgIHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoZWxlbSwgbmFtZSwgZXh0cmEsIGpRdWVyeS5jc3MoZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcykgPT09IFwiYm9yZGVyLWJveFwiLCBzdHlsZXMpO1xuXG5cdFx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRcdGlmIChzdWJ0cmFjdCAmJiAobWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyh2YWx1ZSkpICYmIChtYXRjaGVzWzNdIHx8IFwicHhcIikgIT09IFwicHhcIikge1xuXG5cdFx0XHRcdFx0ZWxlbS5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyhlbGVtLCBuYW1lKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlcihlbGVtLCB2YWx1ZSwgc3VidHJhY3QpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LCBmdW5jdGlvbiAoZWxlbSwgY29tcHV0ZWQpIHtcblx0XHRpZiAoY29tcHV0ZWQpIHtcblx0XHRcdHJldHVybiAocGFyc2VGbG9hdChjdXJDU1MoZWxlbSwgXCJtYXJnaW5MZWZ0XCIpKSB8fCBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBzd2FwKGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHR9KSkgKyBcInB4XCI7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRtYXJnaW46IFwiXCIsXG5cdFx0cGFkZGluZzogXCJcIixcblx0XHRib3JkZXI6IFwiV2lkdGhcIlxuXHR9LCBmdW5jdGlvbiAocHJlZml4LCBzdWZmaXgpIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbcHJlZml4ICsgc3VmZml4XSA9IHtcblx0XHRcdGV4cGFuZDogZnVuY3Rpb24gZXhwYW5kKHZhbHVlKSB7XG5cdFx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ICAgIGV4cGFuZGVkID0ge30sXG5cblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdChcIiBcIikgOiBbdmFsdWVdO1xuXG5cdFx0XHRcdGZvciAoOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdFx0ZXhwYW5kZWRbcHJlZml4ICsgY3NzRXhwYW5kW2ldICsgc3VmZml4XSA9IHBhcnRzW2ldIHx8IHBhcnRzW2kgLSAyXSB8fCBwYXJ0c1swXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0aWYgKCFybWFyZ2luLnRlc3QocHJlZml4KSkge1xuXHRcdFx0alF1ZXJ5LmNzc0hvb2tzW3ByZWZpeCArIHN1ZmZpeF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRjc3M6IGZ1bmN0aW9uIGNzcyhuYW1lLCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBmdW5jdGlvbiAoZWxlbSwgbmFtZSwgdmFsdWUpIHtcblx0XHRcdFx0dmFyIHN0eWxlcyxcblx0XHRcdFx0ICAgIGxlbixcblx0XHRcdFx0ICAgIG1hcCA9IHt9LFxuXHRcdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcblx0XHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbSk7XG5cdFx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0XHRtYXBbbmFtZVtpXV0gPSBqUXVlcnkuY3NzKGVsZW0sIG5hbWVbaV0sIGZhbHNlLCBzdHlsZXMpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IGpRdWVyeS5zdHlsZShlbGVtLCBuYW1lLCB2YWx1ZSkgOiBqUXVlcnkuY3NzKGVsZW0sIG5hbWUpO1xuXHRcdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKTtcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIFR3ZWVuKGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nKSB7XG5cdFx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdChlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyk7XG5cdH1cblx0alF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblx0VHdlZW4ucHJvdG90eXBlID0ge1xuXHRcdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0XHRpbml0OiBmdW5jdGlvbiBpbml0KGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0KSB7XG5cdFx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSA/IFwiXCIgOiBcInB4XCIpO1xuXHRcdH0sXG5cdFx0Y3VyOiBmdW5jdGlvbiBjdXIoKSB7XG5cdFx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbdGhpcy5wcm9wXTtcblxuXHRcdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/IGhvb2tzLmdldCh0aGlzKSA6IFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyk7XG5cdFx0fSxcblx0XHRydW46IGZ1bmN0aW9uIHJ1bihwZXJjZW50KSB7XG5cdFx0XHR2YXIgZWFzZWQsXG5cdFx0XHQgICAgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbdGhpcy5wcm9wXTtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5kdXJhdGlvbikge1xuXHRcdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1t0aGlzLmVhc2luZ10ocGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5ub3cgPSAodGhpcy5lbmQgLSB0aGlzLnN0YXJ0KSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zdGVwKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChob29rcyAmJiBob29rcy5zZXQpIHtcblx0XHRcdFx0aG9va3Muc2V0KHRoaXMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fTtcblxuXHRUd2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblx0VHdlZW4ucHJvcEhvb2tzID0ge1xuXHRcdF9kZWZhdWx0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCh0d2Vlbikge1xuXHRcdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRcdGlmICh0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8IHR3ZWVuLmVsZW1bdHdlZW4ucHJvcF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlW3R3ZWVuLnByb3BdID09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVt0d2Vlbi5wcm9wXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyh0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQodHdlZW4pIHtcblxuXHRcdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0XHRpZiAoalF1ZXJ5LmZ4LnN0ZXBbdHdlZW4ucHJvcF0pIHtcblx0XHRcdFx0XHRqUXVlcnkuZnguc3RlcFt0d2Vlbi5wcm9wXSh0d2Vlbik7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAodHdlZW4uZWxlbS5zdHlsZVtqUXVlcnkuY3NzUHJvcHNbdHdlZW4ucHJvcF1dICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzW3R3ZWVuLnByb3BdKSkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSh0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0d2Vlbi5lbGVtW3R3ZWVuLnByb3BdID0gdHdlZW4ubm93O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiBzZXQodHdlZW4pIHtcblx0XHRcdGlmICh0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHR0d2Vlbi5lbGVtW3R3ZWVuLnByb3BdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZWFzaW5nID0ge1xuXHRcdGxpbmVhcjogZnVuY3Rpb24gbGluZWFyKHApIHtcblx0XHRcdHJldHVybiBwO1xuXHRcdH0sXG5cdFx0c3dpbmc6IGZ1bmN0aW9uIHN3aW5nKHApIHtcblx0XHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyhwICogTWF0aC5QSSkgLyAyO1xuXHRcdH0sXG5cdFx0X2RlZmF1bHQ6IFwic3dpbmdcIlxuXHR9O1xuXG5cdGpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG5cdC8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5cdGpRdWVyeS5meC5zdGVwID0ge307XG5cblx0dmFyIGZ4Tm93LFxuXHQgICAgaW5Qcm9ncmVzcyxcblx0ICAgIHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHQgICAgcnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cblx0ZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdFx0aWYgKGluUHJvZ3Jlc3MpIHtcblx0XHRcdGlmIChkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblx0XHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzY2hlZHVsZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsKTtcblx0XHRcdH1cblxuXHRcdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0XHR9XG5cdH1cblxuXHQvLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5cdGZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHRcdHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXHRcdHJldHVybiBmeE5vdyA9IGpRdWVyeS5ub3coKTtcblx0fVxuXG5cdC8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5cdGZ1bmN0aW9uIGdlbkZ4KHR5cGUsIGluY2x1ZGVXaWR0aCkge1xuXHRcdHZhciB3aGljaCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHRcdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0XHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRcdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRcdGZvciAoOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoKSB7XG5cdFx0XHR3aGljaCA9IGNzc0V4cGFuZFtpXTtcblx0XHRcdGF0dHJzW1wibWFyZ2luXCIgKyB3aGljaF0gPSBhdHRyc1tcInBhZGRpbmdcIiArIHdoaWNoXSA9IHR5cGU7XG5cdFx0fVxuXG5cdFx0aWYgKGluY2x1ZGVXaWR0aCkge1xuXHRcdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYXR0cnM7XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVUd2Vlbih2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uKSB7XG5cdFx0dmFyIHR3ZWVuLFxuXHRcdCAgICBjb2xsZWN0aW9uID0gKEFuaW1hdGlvbi50d2VlbmVyc1twcm9wXSB8fCBbXSkuY29uY2F0KEFuaW1hdGlvbi50d2VlbmVyc1tcIipcIl0pLFxuXHRcdCAgICBpbmRleCA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRcdGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0aWYgKHR3ZWVuID0gY29sbGVjdGlvbltpbmRleF0uY2FsbChhbmltYXRpb24sIHByb3AsIHZhbHVlKSkge1xuXG5cdFx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKGVsZW0sIHByb3BzLCBvcHRzKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICB0b2dnbGUsXG5cdFx0ICAgIGhvb2tzLFxuXHRcdCAgICBvbGRmaXJlLFxuXHRcdCAgICBwcm9wVHdlZW4sXG5cdFx0ICAgIHJlc3RvcmVEaXNwbGF5LFxuXHRcdCAgICBkaXNwbGF5LFxuXHRcdCAgICBpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdCAgICBhbmltID0gdGhpcyxcblx0XHQgICAgb3JpZyA9IHt9LFxuXHRcdCAgICBzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0ICAgIGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKGVsZW0pLFxuXHRcdCAgICBkYXRhU2hvdyA9IGRhdGFQcml2LmdldChlbGVtLCBcImZ4c2hvd1wiKTtcblxuXHRcdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRcdGlmICghb3B0cy5xdWV1ZSkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoZWxlbSwgXCJmeFwiKTtcblx0XHRcdGlmIChob29rcy51bnF1ZXVlZCA9PSBudWxsKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aWYgKCFob29rcy51bnF1ZXVlZCkge1xuXHRcdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0XHRpZiAoIWpRdWVyeS5xdWV1ZShlbGVtLCBcImZ4XCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRmb3IgKHByb3AgaW4gcHJvcHMpIHtcblx0XHRcdHZhbHVlID0gcHJvcHNbcHJvcF07XG5cdFx0XHRpZiAocmZ4dHlwZXMudGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0ZGVsZXRlIHByb3BzW3Byb3BdO1xuXHRcdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gKGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIpKSB7XG5cblx0XHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0XHRpZiAodmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93W3Byb3BdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdG9yaWdbcHJvcF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1twcm9wXSB8fCBqUXVlcnkuc3R5bGUoZWxlbSwgcHJvcCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0XHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QocHJvcHMpO1xuXHRcdGlmICghcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KG9yaWcpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdFx0aWYgKGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdFx0b3B0cy5vdmVyZmxvdyA9IFtzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1ldO1xuXG5cdFx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRcdGlmIChyZXN0b3JlRGlzcGxheSA9PSBudWxsKSB7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KGVsZW0sIFwiZGlzcGxheVwiKTtcblx0XHRcdH1cblx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKGVsZW0sIFwiZGlzcGxheVwiKTtcblx0XHRcdGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuXHRcdFx0XHRpZiAocmVzdG9yZURpc3BsYXkpIHtcblx0XHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdFx0c2hvd0hpZGUoW2VsZW1dLCB0cnVlKTtcblx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyhlbGVtLCBcImRpc3BsYXlcIik7XG5cdFx0XHRcdFx0c2hvd0hpZGUoW2VsZW1dKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRcdGlmIChkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmNzcyhlbGVtLCBcImZsb2F0XCIpID09PSBcIm5vbmVcIikge1xuXG5cdFx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0XHRpZiAoIXByb3BUd2Vlbikge1xuXHRcdFx0XHRcdFx0YW5pbS5kb25lKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRpZiAocmVzdG9yZURpc3BsYXkgPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChvcHRzLm92ZXJmbG93KSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1swXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sxXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1syXTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRcdGZvciAocHJvcCBpbiBvcmlnKSB7XG5cblx0XHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0XHRpZiAoIXByb3BUd2Vlbikge1xuXHRcdFx0XHRpZiAoZGF0YVNob3cpIHtcblx0XHRcdFx0XHRpZiAoXCJoaWRkZW5cIiBpbiBkYXRhU2hvdykge1xuXHRcdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyhlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRcdGlmICh0b2dnbGUpIHtcblx0XHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdFx0aWYgKGhpZGRlbikge1xuXHRcdFx0XHRcdHNob3dIaWRlKFtlbGVtXSwgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHRhbmltLmRvbmUoZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGlmICghaGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRzaG93SGlkZShbZWxlbV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZWxlbSwgXCJmeHNob3dcIik7XG5cdFx0XHRcdFx0Zm9yIChwcm9wIGluIG9yaWcpIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5zdHlsZShlbGVtLCBwcm9wLCBvcmlnW3Byb3BdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKGhpZGRlbiA/IGRhdGFTaG93W3Byb3BdIDogMCwgcHJvcCwgYW5pbSk7XG5cdFx0XHRpZiAoIShwcm9wIGluIGRhdGFTaG93KSkge1xuXHRcdFx0XHRkYXRhU2hvd1twcm9wXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKGhpZGRlbikge1xuXHRcdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHByb3BGaWx0ZXIocHJvcHMsIHNwZWNpYWxFYXNpbmcpIHtcblx0XHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdFx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdFx0Zm9yIChpbmRleCBpbiBwcm9wcykge1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoaW5kZXgpO1xuXHRcdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1tuYW1lXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbaW5kZXhdO1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdGVhc2luZyA9IHZhbHVlWzFdO1xuXHRcdFx0XHR2YWx1ZSA9IHByb3BzW2luZGV4XSA9IHZhbHVlWzBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaW5kZXggIT09IG5hbWUpIHtcblx0XHRcdFx0cHJvcHNbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdFx0ZGVsZXRlIHByb3BzW2luZGV4XTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbbmFtZV07XG5cdFx0XHRpZiAoaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcykge1xuXHRcdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCh2YWx1ZSk7XG5cdFx0XHRcdGRlbGV0ZSBwcm9wc1tuYW1lXTtcblxuXHRcdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdFx0Zm9yIChpbmRleCBpbiB2YWx1ZSkge1xuXHRcdFx0XHRcdGlmICghKGluZGV4IGluIHByb3BzKSkge1xuXHRcdFx0XHRcdFx0cHJvcHNbaW5kZXhdID0gdmFsdWVbaW5kZXhdO1xuXHRcdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1tpbmRleF0gPSBlYXNpbmc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nW25hbWVdID0gZWFzaW5nO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIEFuaW1hdGlvbihlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XG5cdFx0dmFyIHJlc3VsdCxcblx0XHQgICAgc3RvcHBlZCxcblx0XHQgICAgaW5kZXggPSAwLFxuXHRcdCAgICBsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ICAgIGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0pLFxuXHRcdCAgICB0aWNrID0gZnVuY3Rpb24gdGljaygpIHtcblx0XHRcdGlmIChzdG9wcGVkKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHQgICAgcmVtYWluaW5nID0gTWF0aC5tYXgoMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lKSxcblxuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHQgICAgcGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0ICAgIGluZGV4ID0gMCxcblx0XHRcdCAgICBsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbaW5kZXhdLnJ1bihwZXJjZW50KTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aChlbGVtLCBbYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmddKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKHBlcmNlbnQgPCAxICYmIGxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICghbGVuZ3RoKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoZWxlbSwgW2FuaW1hdGlvbiwgMSwgMF0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoZWxlbSwgW2FuaW1hdGlvbl0pO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0ICAgIGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2Uoe1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKHt9LCBwcm9wZXJ0aWVzKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQodHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiBjcmVhdGVUd2Vlbihwcm9wLCBlbmQpIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbcHJvcF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKHR3ZWVuKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uIHN0b3AoZ290b0VuZCkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cblx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoc3RvcHBlZCkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zW2luZGV4XS5ydW4oMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoZ290b0VuZCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoZWxlbSwgW2FuaW1hdGlvbiwgMSwgMF0pO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKGVsZW0sIFthbmltYXRpb24sIGdvdG9FbmRdKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKGVsZW0sIFthbmltYXRpb24sIGdvdG9FbmRdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9KSxcblx0XHQgICAgcHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0XHRwcm9wRmlsdGVyKHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nKTtcblxuXHRcdGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbaW5kZXhdLmNhbGwoYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMpO1xuXHRcdFx0aWYgKHJlc3VsdCkge1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ocmVzdWx0LnN0b3ApKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSkuc3RvcCA9IGpRdWVyeS5wcm94eShyZXN1bHQuc3RvcCwgcmVzdWx0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGpRdWVyeS5tYXAocHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24pO1xuXG5cdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGFuaW1hdGlvbi5vcHRzLnN0YXJ0KSkge1xuXHRcdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbChlbGVtLCBhbmltYXRpb24pO1xuXHRcdH1cblxuXHRcdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdFx0YW5pbWF0aW9uLnByb2dyZXNzKGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzKS5kb25lKGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlKS5mYWlsKGFuaW1hdGlvbi5vcHRzLmZhaWwpLmFsd2F5cyhhbmltYXRpb24ub3B0cy5hbHdheXMpO1xuXG5cdFx0alF1ZXJ5LmZ4LnRpbWVyKGpRdWVyeS5leHRlbmQodGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0pKTtcblxuXHRcdHJldHVybiBhbmltYXRpb247XG5cdH1cblxuXHRqUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZChBbmltYXRpb24sIHtcblxuXHRcdHR3ZWVuZXJzOiB7XG5cdFx0XHRcIipcIjogW2Z1bmN0aW9uIChwcm9wLCB2YWx1ZSkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKHByb3AsIHZhbHVlKTtcblx0XHRcdFx0YWRqdXN0Q1NTKHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyh2YWx1ZSksIHR3ZWVuKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fV1cblx0XHR9LFxuXG5cdFx0dHdlZW5lcjogZnVuY3Rpb24gdHdlZW5lcihwcm9wcywgY2FsbGJhY2spIHtcblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihwcm9wcykpIHtcblx0XHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdFx0cHJvcHMgPSBbXCIqXCJdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaChybm90aHRtbHdoaXRlKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHByb3AsXG5cdFx0XHQgICAgaW5kZXggPSAwLFxuXHRcdFx0ICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdFx0Zm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdHByb3AgPSBwcm9wc1tpbmRleF07XG5cdFx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1twcm9wXSA9IEFuaW1hdGlvbi50d2VlbmVyc1twcm9wXSB8fCBbXTtcblx0XHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzW3Byb3BdLnVuc2hpZnQoY2FsbGJhY2spO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRwcmVmaWx0ZXJzOiBbZGVmYXVsdFByZWZpbHRlcl0sXG5cblx0XHRwcmVmaWx0ZXI6IGZ1bmN0aW9uIHByZWZpbHRlcihjYWxsYmFjaywgcHJlcGVuZCkge1xuXHRcdFx0aWYgKHByZXBlbmQpIHtcblx0XHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdChjYWxsYmFjayk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uIChzcGVlZCwgZWFzaW5nLCBmbikge1xuXHRcdHZhciBvcHQgPSBzcGVlZCAmJiAodHlwZW9mIHNwZWVkID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yoc3BlZWQpKSA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoe30sIHNwZWVkKSA6IHtcblx0XHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8IGpRdWVyeS5pc0Z1bmN0aW9uKHNwZWVkKSAmJiBzcGVlZCxcblx0XHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oZWFzaW5nKSAmJiBlYXNpbmdcblx0XHR9O1xuXG5cdFx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdFx0aWYgKGpRdWVyeS5meC5vZmYpIHtcblx0XHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdGlmIChvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcykge1xuXHRcdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbb3B0LmR1cmF0aW9uXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdFx0aWYgKG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSkge1xuXHRcdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHRcdH1cblxuXHRcdC8vIFF1ZXVlaW5nXG5cdFx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRcdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihvcHQub2xkKSkge1xuXHRcdFx0XHRvcHQub2xkLmNhbGwodGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHQucXVldWUpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUodGhpcywgb3B0LnF1ZXVlKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIG9wdDtcblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRmYWRlVG86IGZ1bmN0aW9uIGZhZGVUbyhzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2spIHtcblxuXHRcdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoaXNIaWRkZW5XaXRoaW5UcmVlKS5jc3MoXCJvcGFjaXR5XCIsIDApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YW5pbWF0ZTogZnVuY3Rpb24gYW5pbWF0ZShwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QocHJvcCksXG5cdFx0XHQgICAgb3B0YWxsID0galF1ZXJ5LnNwZWVkKHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKSxcblx0XHRcdCAgICBkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uIGRvQW5pbWF0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKHRoaXMsIGpRdWVyeS5leHRlbmQoe30sIHByb3ApLCBvcHRhbGwpO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoZW1wdHkgfHwgZGF0YVByaXYuZ2V0KHRoaXMsIFwiZmluaXNoXCIpKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID8gdGhpcy5lYWNoKGRvQW5pbWF0aW9uKSA6IHRoaXMucXVldWUob3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbik7XG5cdFx0fSxcblx0XHRzdG9wOiBmdW5jdGlvbiBzdG9wKHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQpIHtcblx0XHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiBzdG9wUXVldWUoaG9va3MpIHtcblx0XHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdFx0c3RvcChnb3RvRW5kKTtcblx0XHRcdH07XG5cblx0XHRcdGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLnF1ZXVlKHR5cGUgfHwgXCJmeFwiLCBbXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdCAgICBpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdCAgICB0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHQgICAgZGF0YSA9IGRhdGFQcml2LmdldCh0aGlzKTtcblxuXHRcdFx0XHRpZiAoaW5kZXgpIHtcblx0XHRcdFx0XHRpZiAoZGF0YVtpbmRleF0gJiYgZGF0YVtpbmRleF0uc3RvcCkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKGRhdGFbaW5kZXhdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9yIChpbmRleCBpbiBkYXRhKSB7XG5cdFx0XHRcdFx0XHRpZiAoZGF0YVtpbmRleF0gJiYgZGF0YVtpbmRleF0uc3RvcCAmJiBycnVuLnRlc3QoaW5kZXgpKSB7XG5cdFx0XHRcdFx0XHRcdHN0b3BRdWV1ZShkYXRhW2luZGV4XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07KSB7XG5cdFx0XHRcdFx0aWYgKHRpbWVyc1tpbmRleF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1tpbmRleF0ucXVldWUgPT09IHR5cGUpKSB7XG5cblx0XHRcdFx0XHRcdHRpbWVyc1tpbmRleF0uYW5pbS5zdG9wKGdvdG9FbmQpO1xuXHRcdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dGltZXJzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRcdGlmIChkZXF1ZXVlIHx8ICFnb3RvRW5kKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUodGhpcywgdHlwZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0ZmluaXNoOiBmdW5jdGlvbiBmaW5pc2godHlwZSkge1xuXHRcdFx0aWYgKHR5cGUgIT09IGZhbHNlKSB7XG5cdFx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdCAgICBkYXRhID0gZGF0YVByaXYuZ2V0KHRoaXMpLFxuXHRcdFx0XHQgICAgcXVldWUgPSBkYXRhW3R5cGUgKyBcInF1ZXVlXCJdLFxuXHRcdFx0XHQgICAgaG9va3MgPSBkYXRhW3R5cGUgKyBcInF1ZXVlSG9va3NcIl0sXG5cdFx0XHRcdCAgICB0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHQgICAgbGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0XHRqUXVlcnkucXVldWUodGhpcywgdHlwZSwgW10pO1xuXG5cdFx0XHRcdGlmIChob29rcyAmJiBob29rcy5zdG9wKSB7XG5cdFx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKHRoaXMsIHRydWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdFx0Zm9yIChpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07KSB7XG5cdFx0XHRcdFx0aWYgKHRpbWVyc1tpbmRleF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbaW5kZXhdLnF1ZXVlID09PSB0eXBlKSB7XG5cdFx0XHRcdFx0XHR0aW1lcnNbaW5kZXhdLmFuaW0uc3RvcCh0cnVlKTtcblx0XHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRcdGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0XHRcdGlmIChxdWV1ZVtpbmRleF0gJiYgcXVldWVbaW5kZXhdLmZpbmlzaCkge1xuXHRcdFx0XHRcdFx0cXVldWVbaW5kZXhdLmZpbmlzaC5jYWxsKHRoaXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1widG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIl0sIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG5cdFx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuW25hbWVdO1xuXHRcdGpRdWVyeS5mbltuYW1lXSA9IGZ1bmN0aW9uIChzcGVlZCwgZWFzaW5nLCBjYWxsYmFjaykge1xuXHRcdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/IGNzc0ZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0aGlzLmFuaW1hdGUoZ2VuRngobmFtZSwgdHJ1ZSksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKTtcblx0XHR9O1xuXHR9KTtcblxuXHQvLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcblx0XHRzbGlkZVVwOiBnZW5GeChcImhpZGVcIiksXG5cdFx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuXHRcdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRcdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0XHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxuXHR9LCBmdW5jdGlvbiAobmFtZSwgcHJvcHMpIHtcblx0XHRqUXVlcnkuZm5bbmFtZV0gPSBmdW5jdGlvbiAoc3BlZWQsIGVhc2luZywgY2FsbGJhY2spIHtcblx0XHRcdHJldHVybiB0aGlzLmFuaW1hdGUocHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKTtcblx0XHR9O1xuXHR9KTtcblxuXHRqUXVlcnkudGltZXJzID0gW107XG5cdGpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciB0aW1lcixcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0XHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRcdGZvciAoOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aW1lciA9IHRpbWVyc1tpXTtcblxuXHRcdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdFx0aWYgKCF0aW1lcigpICYmIHRpbWVyc1tpXSA9PT0gdGltZXIpIHtcblx0XHRcdFx0dGltZXJzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdGltZXJzLmxlbmd0aCkge1xuXHRcdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0XHR9XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH07XG5cblx0alF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24gKHRpbWVyKSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wdXNoKHRpbWVyKTtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fTtcblxuXHRqUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblx0alF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChpblByb2dyZXNzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdFx0c2NoZWR1bGUoKTtcblx0fTtcblxuXHRqUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpblByb2dyZXNzID0gbnVsbDtcblx0fTtcblxuXHRqUXVlcnkuZnguc3BlZWRzID0ge1xuXHRcdHNsb3c6IDYwMCxcblx0XHRmYXN0OiAyMDAsXG5cblx0XHQvLyBEZWZhdWx0IHNwZWVkXG5cdFx0X2RlZmF1bHQ6IDQwMFxuXHR9O1xuXG5cdC8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cblx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cblx0alF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24gKHRpbWUsIHR5cGUpIHtcblx0XHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1t0aW1lXSB8fCB0aW1lIDogdGltZTtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSh0eXBlLCBmdW5jdGlvbiAobmV4dCwgaG9va3MpIHtcblx0XHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQobmV4dCwgdGltZSk7XG5cdFx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0fTtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcblx0XHQgICAgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxcblx0XHQgICAgb3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpO1xuXG5cdFx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHRcdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRcdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0XHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRcdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdFx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xuXHR9KSgpO1xuXG5cdHZhciBib29sSG9vayxcblx0ICAgIGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGF0dHI6IGZ1bmN0aW9uIGF0dHIobmFtZSwgdmFsdWUpIHtcblx0XHRcdHJldHVybiBhY2Nlc3ModGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZUF0dHI6IGZ1bmN0aW9uIHJlbW92ZUF0dHIobmFtZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKHRoaXMsIG5hbWUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZXh0ZW5kKHtcblx0XHRhdHRyOiBmdW5jdGlvbiBhdHRyKGVsZW0sIG5hbWUsIHZhbHVlKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0ICAgIGhvb2tzLFxuXHRcdFx0ICAgIG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdFx0aWYgKG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRcdGlmICh0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKGVsZW0sIG5hbWUsIHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdFx0aWYgKG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoZWxlbSkpIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgKGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdChuYW1lKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoZWxlbSwgbmFtZSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldChlbGVtLCB2YWx1ZSwgbmFtZSkpICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgKyBcIlwiKTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KGVsZW0sIG5hbWUpKSAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKGVsZW0sIG5hbWUpO1xuXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHRcdH0sXG5cblx0XHRhdHRySG9va3M6IHtcblx0XHRcdHR5cGU6IHtcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZWxlbSwgdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmIG5vZGVOYW1lKGVsZW0sIFwiaW5wdXRcIikpIHtcblx0XHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIHZhbHVlKTtcblx0XHRcdFx0XHRcdGlmICh2YWwpIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0cmVtb3ZlQXR0cjogZnVuY3Rpb24gcmVtb3ZlQXR0cihlbGVtLCB2YWx1ZSkge1xuXHRcdFx0dmFyIG5hbWUsXG5cdFx0XHQgICAgaSA9IDAsXG5cblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaChybm90aHRtbHdoaXRlKTtcblxuXHRcdFx0aWYgKGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdHdoaWxlIChuYW1lID0gYXR0ck5hbWVzW2krK10pIHtcblx0XHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuXHRib29sSG9vayA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uIHNldChlbGVtLCB2YWx1ZSwgbmFtZSkge1xuXHRcdFx0aWYgKHZhbHVlID09PSBmYWxzZSkge1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoZWxlbSwgbmFtZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShuYW1lLCBuYW1lKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZWFjaChqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSwgZnVuY3Rpb24gKGksIG5hbWUpIHtcblx0XHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVtuYW1lXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdFx0YXR0ckhhbmRsZVtuYW1lXSA9IGZ1bmN0aW9uIChlbGVtLCBuYW1lLCBpc1hNTCkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdCAgICBoYW5kbGUsXG5cdFx0XHQgICAgbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCFpc1hNTCkge1xuXG5cdFx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVtsb3dlcmNhc2VOYW1lXTtcblx0XHRcdFx0YXR0ckhhbmRsZVtsb3dlcmNhc2VOYW1lXSA9IHJldDtcblx0XHRcdFx0cmV0ID0gZ2V0dGVyKGVsZW0sIG5hbWUsIGlzWE1MKSAhPSBudWxsID8gbG93ZXJjYXNlTmFtZSA6IG51bGw7XG5cdFx0XHRcdGF0dHJIYW5kbGVbbG93ZXJjYXNlTmFtZV0gPSBoYW5kbGU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH07XG5cdH0pO1xuXG5cdHZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0ICAgIHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0cHJvcDogZnVuY3Rpb24gcHJvcChuYW1lLCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlUHJvcDogZnVuY3Rpb24gcmVtb3ZlUHJvcChuYW1lKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXNbalF1ZXJ5LnByb3BGaXhbbmFtZV0gfHwgbmFtZV07XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5leHRlbmQoe1xuXHRcdHByb3A6IGZ1bmN0aW9uIHByb3AoZWxlbSwgbmFtZSwgdmFsdWUpIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHQgICAgaG9va3MsXG5cdFx0XHQgICAgblR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0XHRpZiAoblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyhlbGVtKSkge1xuXG5cdFx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4W25hbWVdIHx8IG5hbWU7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1tuYW1lXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldChlbGVtLCB2YWx1ZSwgbmFtZSkpICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW1bbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldChlbGVtLCBuYW1lKSkgIT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW1bbmFtZV07XG5cdFx0fSxcblxuXHRcdHByb3BIb29rczoge1xuXHRcdFx0dGFiSW5kZXg6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0cihlbGVtLCBcInRhYmluZGV4XCIpO1xuXG5cdFx0XHRcdFx0aWYgKHRhYmluZGV4KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQodGFiaW5kZXgsIDEwKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAocmZvY3VzYWJsZS50ZXN0KGVsZW0ubm9kZU5hbWUpIHx8IHJjbGlja2FibGUudGVzdChlbGVtLm5vZGVOYW1lKSAmJiBlbGVtLmhyZWYpIHtcblx0XHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRwcm9wRml4OiB7XG5cdFx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHRcdH1cblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuXHQvLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG5cdC8vIG9uIHRoZSBvcHRpb25cblx0Ly8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcblx0Ly8gd2hlbiBpbiBhbiBvcHRncm91cFxuXHQvLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcblx0Ly8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5cdGlmICghc3VwcG9ydC5vcHRTZWxlY3RlZCkge1xuXHRcdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChlbGVtKSB7XG5cblx0XHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdGlmIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0pIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdFx0aWYgKHBhcmVudC5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRqUXVlcnkuZWFjaChbXCJ0YWJJbmRleFwiLCBcInJlYWRPbmx5XCIsIFwibWF4TGVuZ3RoXCIsIFwiY2VsbFNwYWNpbmdcIiwgXCJjZWxsUGFkZGluZ1wiLCBcInJvd1NwYW5cIiwgXCJjb2xTcGFuXCIsIFwidXNlTWFwXCIsIFwiZnJhbWVCb3JkZXJcIiwgXCJjb250ZW50RWRpdGFibGVcIl0sIGZ1bmN0aW9uICgpIHtcblx0XHRqUXVlcnkucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldID0gdGhpcztcblx0fSk7XG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UodmFsdWUpIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKFwiIFwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldENsYXNzKGVsZW0pIHtcblx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuXHR9XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0YWRkQ2xhc3M6IGZ1bmN0aW9uIGFkZENsYXNzKHZhbHVlKSB7XG5cdFx0XHR2YXIgY2xhc3Nlcyxcblx0XHRcdCAgICBlbGVtLFxuXHRcdFx0ICAgIGN1cixcblx0XHRcdCAgICBjdXJWYWx1ZSxcblx0XHRcdCAgICBjbGF6eixcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIGZpbmFsVmFsdWUsXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaikge1xuXHRcdFx0XHRcdGpRdWVyeSh0aGlzKS5hZGRDbGFzcyh2YWx1ZS5jYWxsKHRoaXMsIGosIGdldENsYXNzKHRoaXMpKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoZWxlbSA9IHRoaXNbaSsrXSkge1xuXHRcdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoZWxlbSk7XG5cdFx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoY3VyVmFsdWUpICsgXCIgXCI7XG5cblx0XHRcdFx0XHRpZiAoY3VyKSB7XG5cdFx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRcdHdoaWxlIChjbGF6eiA9IGNsYXNzZXNbaisrXSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoY3VyLmluZGV4T2YoXCIgXCIgKyBjbGF6eiArIFwiIFwiKSA8IDApIHtcblx0XHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoY3VyKTtcblx0XHRcdFx0XHRcdGlmIChjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGZpbmFsVmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKHZhbHVlKSB7XG5cdFx0XHR2YXIgY2xhc3Nlcyxcblx0XHRcdCAgICBlbGVtLFxuXHRcdFx0ICAgIGN1cixcblx0XHRcdCAgICBjdXJWYWx1ZSxcblx0XHRcdCAgICBjbGF6eixcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIGZpbmFsVmFsdWUsXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaikge1xuXHRcdFx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcyh2YWx1ZS5jYWxsKHRoaXMsIGosIGdldENsYXNzKHRoaXMpKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsIFwiXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoZWxlbSA9IHRoaXNbaSsrXSkge1xuXHRcdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoZWxlbSk7XG5cblx0XHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKGN1clZhbHVlKSArIFwiIFwiO1xuXG5cdFx0XHRcdFx0aWYgKGN1cikge1xuXHRcdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0XHR3aGlsZSAoY2xhenogPSBjbGFzc2VzW2orK10pIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHRcdHdoaWxlIChjdXIuaW5kZXhPZihcIiBcIiArIGNsYXp6ICsgXCIgXCIpID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZShcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoY3VyKTtcblx0XHRcdFx0XHRcdGlmIChjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGZpbmFsVmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKHZhbHVlLCBzdGF0ZVZhbCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih2YWx1ZSk7XG5cblx0XHRcdGlmICh0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyh2YWx1ZSkgOiB0aGlzLnJlbW92ZUNsYXNzKHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLnRvZ2dsZUNsYXNzKHZhbHVlLmNhbGwodGhpcywgaSwgZ2V0Q2xhc3ModGhpcyksIHN0YXRlVmFsKSwgc3RhdGVWYWwpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdFx0aWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcblxuXHRcdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0c2VsZiA9IGpRdWVyeSh0aGlzKTtcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cblx0XHRcdFx0XHR3aGlsZSAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1tpKytdKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdFx0aWYgKHNlbGYuaGFzQ2xhc3MoY2xhc3NOYW1lKSkge1xuXHRcdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKGNsYXNzTmFtZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3ModGhpcyk7XG5cdFx0XHRcdFx0aWYgKGNsYXNzTmFtZSkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRcdGlmICh0aGlzLnNldEF0dHJpYnV0ZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID8gXCJcIiA6IGRhdGFQcml2LmdldCh0aGlzLCBcIl9fY2xhc3NOYW1lX19cIikgfHwgXCJcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0aGFzQ2xhc3M6IGZ1bmN0aW9uIGhhc0NsYXNzKHNlbGVjdG9yKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLFxuXHRcdFx0ICAgIGVsZW0sXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHRcdHdoaWxlIChlbGVtID0gdGhpc1tpKytdKSB7XG5cdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxICYmIChcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoZ2V0Q2xhc3MoZWxlbSkpICsgXCIgXCIpLmluZGV4T2YoY2xhc3NOYW1lKSA+IC0xKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0dmFsOiBmdW5jdGlvbiB2YWwodmFsdWUpIHtcblx0XHRcdHZhciBob29rcyxcblx0XHRcdCAgICByZXQsXG5cdFx0XHQgICAgaXNGdW5jdGlvbixcblx0XHRcdCAgICBlbGVtID0gdGhpc1swXTtcblxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmIChlbGVtKSB7XG5cdFx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbZWxlbS50eXBlXSB8fCBqUXVlcnkudmFsSG9va3NbZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXTtcblxuXHRcdFx0XHRcdGlmIChob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoZWxlbSwgXCJ2YWx1ZVwiKSkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UocnJldHVybiwgXCJcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRcdGlmICh0aGlzLm5vZGVUeXBlICE9PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGlzRnVuY3Rpb24pIHtcblx0XHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKHRoaXMsIGksIGpRdWVyeSh0aGlzKS52YWwoKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRcdGlmICh2YWwgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHZhbCA9IFwiXCI7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdHZhbCArPSBcIlwiO1xuXHRcdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAodmFsLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzW3RoaXMudHlwZV0gfHwgalF1ZXJ5LnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV07XG5cblx0XHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdFx0aWYgKCFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCh0aGlzLCB2YWwsIFwidmFsdWVcIikgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cdFx0dmFsSG9va3M6IHtcblx0XHRcdG9wdGlvbjoge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChlbGVtKSB7XG5cblx0XHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0cihlbGVtLCBcInZhbHVlXCIpO1xuXHRcdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/IHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZShqUXVlcnkudGV4dChlbGVtKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRzZWxlY3Q6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZSxcblx0XHRcdFx0XHQgICAgb3B0aW9uLFxuXHRcdFx0XHRcdCAgICBpLFxuXHRcdFx0XHRcdCAgICBvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdCAgICBpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHQgICAgb25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHQgICAgdmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdCAgICBtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdFx0XHRcdGkgPSBtYXg7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRcdGZvciAoOyBpIDwgbWF4OyBpKyspIHtcblx0XHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbaV07XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRcdGlmICgob3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4KSAmJlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmICghb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHwgIW5vZGVOYW1lKG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIpKSkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkob3B0aW9uKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0XHRpZiAob25lKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdFx0dmFsdWVzLnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZWxlbSwgdmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgb3B0aW9uU2V0LFxuXHRcdFx0XHRcdCAgICBvcHRpb24sXG5cdFx0XHRcdFx0ICAgIG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0ICAgIHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkodmFsdWUpLFxuXHRcdFx0XHRcdCAgICBpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zW2ldO1xuXG5cdFx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0XHRpZiAob3B0aW9uLnNlbGVjdGVkID0galF1ZXJ5LmluQXJyYXkoalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQob3B0aW9uKSwgdmFsdWVzKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRcdGlmICghb3B0aW9uU2V0KSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcblx0alF1ZXJ5LmVhY2goW1wicmFkaW9cIiwgXCJjaGVja2JveFwiXSwgZnVuY3Rpb24gKCkge1xuXHRcdGpRdWVyeS52YWxIb29rc1t0aGlzXSA9IHtcblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0sIHZhbHVlKSB7XG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheShqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpZiAoIXN1cHBvcnQuY2hlY2tPbikge1xuXHRcdFx0alF1ZXJ5LnZhbEhvb2tzW3RoaXNdLmdldCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuXHR2YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cblx0alF1ZXJ5LmV4dGVuZChqUXVlcnkuZXZlbnQsIHtcblxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycykge1xuXG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBjdXIsXG5cdFx0XHQgICAgdG1wLFxuXHRcdFx0ICAgIGJ1YmJsZVR5cGUsXG5cdFx0XHQgICAgb250eXBlLFxuXHRcdFx0ICAgIGhhbmRsZSxcblx0XHRcdCAgICBzcGVjaWFsLFxuXHRcdFx0ICAgIGV2ZW50UGF0aCA9IFtlbGVtIHx8IGRvY3VtZW50XSxcblx0XHRcdCAgICB0eXBlID0gaGFzT3duLmNhbGwoZXZlbnQsIFwidHlwZVwiKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdCAgICBuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoZXZlbnQsIFwibmFtZXNwYWNlXCIpID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO1xuXG5cdFx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDgpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRcdGlmIChyZm9jdXNNb3JwaC50ZXN0KHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlLmluZGV4T2YoXCIuXCIpID4gLTEpIHtcblxuXHRcdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcblx0XHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRcdGV2ZW50ID0gZXZlbnRbalF1ZXJ5LmV4cGFuZG9dID8gZXZlbnQgOiBuZXcgalF1ZXJ5LkV2ZW50KHR5cGUsICh0eXBlb2YgZXZlbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihldmVudCkpID09PSBcIm9iamVjdFwiICYmIGV2ZW50KTtcblxuXHRcdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpO1xuXHRcdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/IG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIikgOiBudWxsO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRcdGlmICghZXZlbnQudGFyZ2V0KSB7XG5cdFx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRcdGRhdGEgPSBkYXRhID09IG51bGwgPyBbZXZlbnRdIDogalF1ZXJ5Lm1ha2VBcnJheShkYXRhLCBbZXZlbnRdKTtcblxuXHRcdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsW3R5cGVdIHx8IHt9O1xuXHRcdFx0aWYgKCFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseShlbGVtLCBkYXRhKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0XHRpZiAoIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cblx0XHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRcdGlmICghcmZvY3VzTW9ycGgudGVzdChidWJibGVUeXBlICsgdHlwZSkpIHtcblx0XHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdGV2ZW50UGF0aC5wdXNoKGN1cik7XG5cdFx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRcdGlmICh0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpKSB7XG5cdFx0XHRcdFx0ZXZlbnRQYXRoLnB1c2godG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0XHRpID0gMDtcblx0XHRcdHdoaWxlICgoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG5cblx0XHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID8gYnViYmxlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0XHRoYW5kbGUgPSAoZGF0YVByaXYuZ2V0KGN1ciwgXCJldmVudHNcIikgfHwge30pW2V2ZW50LnR5cGVdICYmIGRhdGFQcml2LmdldChjdXIsIFwiaGFuZGxlXCIpO1xuXHRcdFx0XHRpZiAoaGFuZGxlKSB7XG5cdFx0XHRcdFx0aGFuZGxlLmFwcGx5KGN1ciwgZGF0YSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyW29udHlwZV07XG5cdFx0XHRcdGlmIChoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoY3VyKSkge1xuXHRcdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseShjdXIsIGRhdGEpO1xuXHRcdFx0XHRcdGlmIChldmVudC5yZXN1bHQgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRcdGlmICghb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuXG5cdFx0XHRcdGlmICgoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseShldmVudFBhdGgucG9wKCksIGRhdGEpID09PSBmYWxzZSkgJiYgYWNjZXB0RGF0YShlbGVtKSkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdFx0aWYgKG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbihlbGVtW3R5cGVdKSAmJiAhalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHRcdHRtcCA9IGVsZW1bb250eXBlXTtcblxuXHRcdFx0XHRcdFx0aWYgKHRtcCkge1xuXHRcdFx0XHRcdFx0XHRlbGVtW29udHlwZV0gPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0XHRlbGVtW3R5cGVdKCk7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0XHRpZiAodG1wKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW1bb250eXBlXSA9IHRtcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0XHR9LFxuXG5cdFx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdFx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0XHRzaW11bGF0ZTogZnVuY3Rpb24gc2ltdWxhdGUodHlwZSwgZWxlbSwgZXZlbnQpIHtcblx0XHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChuZXcgalF1ZXJ5LkV2ZW50KCksIGV2ZW50LCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9KTtcblxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoZSwgbnVsbCwgZWxlbSk7XG5cdFx0fVxuXG5cdH0pO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcih0eXBlLCBkYXRhKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIodHlwZSwgZGF0YSwgdGhpcyk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiB0cmlnZ2VySGFuZGxlcih0eXBlLCBkYXRhKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbMF07XG5cdFx0XHRpZiAoZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIodHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZWFjaCgoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArIFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgKyBcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIikuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoaSwgbmFtZSkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bbmFtZV0gPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/IHRoaXMub24obmFtZSwgbnVsbCwgZGF0YSwgZm4pIDogdGhpcy50cmlnZ2VyKG5hbWUpO1xuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGhvdmVyOiBmdW5jdGlvbiBob3Zlcihmbk92ZXIsIGZuT3V0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGZuT3ZlcikubW91c2VsZWF2ZShmbk91dCB8fCBmbk92ZXIpO1xuXHRcdH1cblx0fSk7XG5cblx0c3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG5cdC8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcblx0Ly8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcblx0Ly9cblx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG5cdC8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuXHQvLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcblx0Ly8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcblx0aWYgKCFzdXBwb3J0LmZvY3VzaW4pIHtcblx0XHRqUXVlcnkuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uIChvcmlnLCBmaXgpIHtcblxuXHRcdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoZXZlbnQpKTtcblx0XHRcdH07XG5cblx0XHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsW2ZpeF0gPSB7XG5cdFx0XHRcdHNldHVwOiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0XHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0ICAgIGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKGRvYywgZml4KTtcblxuXHRcdFx0XHRcdGlmICghYXR0YWNoZXMpIHtcblx0XHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKG9yaWcsIGhhbmRsZXIsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoZG9jLCBmaXgsIChhdHRhY2hlcyB8fCAwKSArIDEpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24gdGVhcmRvd24oKSB7XG5cdFx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdCAgICBhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2Vzcyhkb2MsIGZpeCkgLSAxO1xuXG5cdFx0XHRcdFx0aWYgKCFhdHRhY2hlcykge1xuXHRcdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIob3JpZywgaGFuZGxlciwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZG9jLCBmaXgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoZG9jLCBmaXgsIGF0dGFjaGVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSk7XG5cdH1cblx0dmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG5cdHZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxuXHR2YXIgcnF1ZXJ5ID0gL1xcPy87XG5cblx0Ly8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xuXHRqUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdHZhciB4bWw7XG5cdFx0aWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHRcdHRyeSB7XG5cdFx0XHR4bWwgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhkYXRhLCBcInRleHQveG1sXCIpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGgpIHtcblx0XHRcdGpRdWVyeS5lcnJvcihcIkludmFsaWQgWE1MOiBcIiArIGRhdGEpO1xuXHRcdH1cblx0XHRyZXR1cm4geG1sO1xuXHR9O1xuXG5cdHZhciByYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ICAgIHJDUkxGID0gL1xccj9cXG4vZyxcblx0ICAgIHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0ICAgIHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuXHRmdW5jdGlvbiBidWlsZFBhcmFtcyhwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXG5cdFx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRcdGpRdWVyeS5lYWNoKG9iaiwgZnVuY3Rpb24gKGksIHYpIHtcblx0XHRcdFx0aWYgKHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QocHJlZml4KSkge1xuXG5cdFx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRcdGFkZChwcmVmaXgsIHYpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdFx0YnVpbGRQYXJhbXMocHJlZml4ICsgXCJbXCIgKyAoKHR5cGVvZiB2ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodikpID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiKSArIFwiXVwiLCB2LCB0cmFkaXRpb25hbCwgYWRkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmICghdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJvYmplY3RcIikge1xuXG5cdFx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0XHRmb3IgKG5hbWUgaW4gb2JqKSB7XG5cdFx0XHRcdGJ1aWxkUGFyYW1zKHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbbmFtZV0sIHRyYWRpdGlvbmFsLCBhZGQpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRcdGFkZChwcmVmaXgsIG9iaik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcblx0Ly8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5cdGpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uIChhLCB0cmFkaXRpb25hbCkge1xuXHRcdHZhciBwcmVmaXgsXG5cdFx0ICAgIHMgPSBbXSxcblx0XHQgICAgYWRkID0gZnVuY3Rpb24gYWRkKGtleSwgdmFsdWVPckZ1bmN0aW9uKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlT3JGdW5jdGlvbikgPyB2YWx1ZU9yRnVuY3Rpb24oKSA6IHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1tzLmxlbmd0aF0gPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUpO1xuXHRcdH07XG5cblx0XHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRcdGlmIChBcnJheS5pc0FycmF5KGEpIHx8IGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdChhKSkge1xuXG5cdFx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRcdGpRdWVyeS5lYWNoKGEsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0YWRkKHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0XHRmb3IgKHByZWZpeCBpbiBhKSB7XG5cdFx0XHRcdGJ1aWxkUGFyYW1zKHByZWZpeCwgYVtwcmVmaXhdLCB0cmFkaXRpb25hbCwgYWRkKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdFx0cmV0dXJuIHMuam9pbihcIiZcIik7XG5cdH07XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0c2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUoKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSk7XG5cdFx0fSxcblx0XHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24gc2VyaWFsaXplQXJyYXkoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AodGhpcywgXCJlbGVtZW50c1wiKTtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheShlbGVtZW50cykgOiB0aGlzO1xuXHRcdFx0fSkuZmlsdGVyKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSh0aGlzKS5pcyhcIjpkaXNhYmxlZFwiKSAmJiByc3VibWl0dGFibGUudGVzdCh0aGlzLm5vZGVOYW1lKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QodHlwZSkgJiYgKHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCh0eXBlKSk7XG5cdFx0XHR9KS5tYXAoZnVuY3Rpb24gKGksIGVsZW0pIHtcblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeSh0aGlzKS52YWwoKTtcblxuXHRcdFx0XHRpZiAodmFsID09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCh2YWwsIGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKHJDUkxGLCBcIlxcclxcblwiKSB9O1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UockNSTEYsIFwiXFxyXFxuXCIpIH07XG5cdFx0XHR9KS5nZXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdHZhciByMjAgPSAvJTIwL2csXG5cdCAgICByaGFzaCA9IC8jLiokLyxcblx0ICAgIHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdCAgICByaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0ICAgIHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHQgICAgcnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cblx0LyogUHJlZmlsdGVyc1xuICAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG4gICogMikgVGhlc2UgYXJlIGNhbGxlZDpcbiAgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG4gICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuICAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcbiAgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG4gICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcbiAgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuICAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcbiAgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG4gICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG4gICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoXCIqXCIpLFxuXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cblx0Ly8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuXHRmdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoc3RydWN0dXJlKSB7XG5cblx0XHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMpIHtcblxuXHRcdFx0aWYgKHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdCAgICBpID0gMCxcblx0XHRcdCAgICBkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXTtcblxuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGZ1bmMpKSB7XG5cblx0XHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0XHR3aGlsZSAoZGF0YVR5cGUgPSBkYXRhVHlwZXNbaSsrXSkge1xuXG5cdFx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0XHRpZiAoZGF0YVR5cGVbMF0gPT09IFwiK1wiKSB7XG5cdFx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKDEpIHx8IFwiKlwiO1xuXHRcdFx0XHRcdFx0KHN0cnVjdHVyZVtkYXRhVHlwZV0gPSBzdHJ1Y3R1cmVbZGF0YVR5cGVdIHx8IFtdKS51bnNoaWZ0KGZ1bmMpO1xuXG5cdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdChzdHJ1Y3R1cmVbZGF0YVR5cGVdID0gc3RydWN0dXJlW2RhdGFUeXBlXSB8fCBbXSkucHVzaChmdW5jKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5cdGZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUikge1xuXG5cdFx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdCAgICBzZWVraW5nVHJhbnNwb3J0ID0gc3RydWN0dXJlID09PSB0cmFuc3BvcnRzO1xuXG5cdFx0ZnVuY3Rpb24gaW5zcGVjdChkYXRhVHlwZSkge1xuXHRcdFx0dmFyIHNlbGVjdGVkO1xuXHRcdFx0aW5zcGVjdGVkW2RhdGFUeXBlXSA9IHRydWU7XG5cdFx0XHRqUXVlcnkuZWFjaChzdHJ1Y3R1cmVbZGF0YVR5cGVdIHx8IFtdLCBmdW5jdGlvbiAoXywgcHJlZmlsdGVyT3JGYWN0b3J5KSB7XG5cdFx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIpO1xuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiYgIXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFtkYXRhVHlwZU9yVHJhbnNwb3J0XSkge1xuXG5cdFx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdChkYXRhVHlwZU9yVHJhbnNwb3J0KTtcblx0XHRcdFx0XHRpbnNwZWN0KGRhdGFUeXBlT3JUcmFuc3BvcnQpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIGlmIChzZWVraW5nVHJhbnNwb3J0KSB7XG5cdFx0XHRcdFx0cmV0dXJuICEoc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluc3BlY3Qob3B0aW9ucy5kYXRhVHlwZXNbMF0pIHx8ICFpbnNwZWN0ZWRbXCIqXCJdICYmIGluc3BlY3QoXCIqXCIpO1xuXHR9XG5cblx0Ly8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG5cdC8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG5cdC8vIEZpeGVzICM5ODg3XG5cdGZ1bmN0aW9uIGFqYXhFeHRlbmQodGFyZ2V0LCBzcmMpIHtcblx0XHR2YXIga2V5LFxuXHRcdCAgICBkZWVwLFxuXHRcdCAgICBmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0XHRmb3IgKGtleSBpbiBzcmMpIHtcblx0XHRcdGlmIChzcmNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdChmbGF0T3B0aW9uc1trZXldID8gdGFyZ2V0IDogZGVlcCB8fCAoZGVlcCA9IHt9KSlba2V5XSA9IHNyY1trZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZGVlcCkge1xuXHRcdFx0alF1ZXJ5LmV4dGVuZCh0cnVlLCB0YXJnZXQsIGRlZXApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH1cblxuXHQvKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAgKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAgKi9cblx0ZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyhzLCBqcVhIUiwgcmVzcG9uc2VzKSB7XG5cblx0XHR2YXIgY3QsXG5cdFx0ICAgIHR5cGUsXG5cdFx0ICAgIGZpbmFsRGF0YVR5cGUsXG5cdFx0ICAgIGZpcnN0RGF0YVR5cGUsXG5cdFx0ICAgIGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHQgICAgZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0XHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHRcdHdoaWxlIChkYXRhVHlwZXNbMF0gPT09IFwiKlwiKSB7XG5cdFx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRcdGlmIChjdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0XHRpZiAoY3QpIHtcblx0XHRcdGZvciAodHlwZSBpbiBjb250ZW50cykge1xuXHRcdFx0XHRpZiAoY29udGVudHNbdHlwZV0gJiYgY29udGVudHNbdHlwZV0udGVzdChjdCkpIHtcblx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCh0eXBlKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRcdGlmIChkYXRhVHlwZXNbMF0gaW4gcmVzcG9uc2VzKSB7XG5cdFx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWzBdO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRcdGZvciAodHlwZSBpbiByZXNwb25zZXMpIHtcblx0XHRcdFx0aWYgKCFkYXRhVHlwZXNbMF0gfHwgcy5jb252ZXJ0ZXJzW3R5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXV0pIHtcblx0XHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWZpcnN0RGF0YVR5cGUpIHtcblx0XHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHRcdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdFx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRcdGlmIChmaW5hbERhdGFUeXBlKSB7XG5cdFx0XHRpZiAoZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWzBdKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KGZpbmFsRGF0YVR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlc1tmaW5hbERhdGFUeXBlXTtcblx0XHR9XG5cdH1cblxuXHQvKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gICovXG5cdGZ1bmN0aW9uIGFqYXhDb252ZXJ0KHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzKSB7XG5cdFx0dmFyIGNvbnYyLFxuXHRcdCAgICBjdXJyZW50LFxuXHRcdCAgICBjb252LFxuXHRcdCAgICB0bXAsXG5cdFx0ICAgIHByZXYsXG5cdFx0ICAgIGNvbnZlcnRlcnMgPSB7fSxcblxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0XHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0XHRpZiAoZGF0YVR5cGVzWzFdKSB7XG5cdFx0XHRmb3IgKGNvbnYgaW4gcy5jb252ZXJ0ZXJzKSB7XG5cdFx0XHRcdGNvbnZlcnRlcnNbY29udi50b0xvd2VyQ2FzZSgpXSA9IHMuY29udmVydGVyc1tjb252XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHRcdHdoaWxlIChjdXJyZW50KSB7XG5cblx0XHRcdGlmIChzLnJlc3BvbnNlRmllbGRzW2N1cnJlbnRdKSB7XG5cdFx0XHRcdGpxWEhSW3MucmVzcG9uc2VGaWVsZHNbY3VycmVudF1dID0gcmVzcG9uc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0XHRpZiAoIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlcikge1xuXHRcdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlcihyZXNwb25zZSwgcy5kYXRhVHlwZSk7XG5cdFx0XHR9XG5cblx0XHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0XHRpZiAoY3VycmVudCkge1xuXG5cdFx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdFx0aWYgKGN1cnJlbnQgPT09IFwiKlwiKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdFx0fSBlbHNlIGlmIChwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50KSB7XG5cblx0XHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzW3ByZXYgKyBcIiBcIiArIGN1cnJlbnRdIHx8IGNvbnZlcnRlcnNbXCIqIFwiICsgY3VycmVudF07XG5cblx0XHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRcdGlmICghY29udikge1xuXHRcdFx0XHRcdFx0Zm9yIChjb252MiBpbiBjb252ZXJ0ZXJzKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRcdFx0aWYgKHRtcFsxXSA9PT0gY3VycmVudCkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbcHJldiArIFwiIFwiICsgdG1wWzBdXSB8fCBjb252ZXJ0ZXJzW1wiKiBcIiArIHRtcFswXV07XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGNvbnYpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGNvbnYgPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbY29udjJdO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoY29udmVydGVyc1tjb252Ml0gIT09IHRydWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFswXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQodG1wWzFdKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRcdGlmIChjb252ICE9PSB0cnVlKSB7XG5cblx0XHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRcdGlmIChjb252ICYmIHMudGhyb3dzKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udihyZXNwb25zZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udihyZXNwb25zZSk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKHtcblxuXHRcdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRcdGFjdGl2ZTogMCxcblxuXHRcdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0XHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRcdGV0YWc6IHt9LFxuXG5cdFx0YWpheFNldHRpbmdzOiB7XG5cdFx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdChsb2NhdGlvbi5wcm90b2NvbCksXG5cdFx0XHRnbG9iYWw6IHRydWUsXG5cdFx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRcdGFzeW5jOiB0cnVlLFxuXHRcdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHRcdC8qXG4gICB0aW1lb3V0OiAwLFxuICAgZGF0YTogbnVsbCxcbiAgIGRhdGFUeXBlOiBudWxsLFxuICAgdXNlcm5hbWU6IG51bGwsXG4gICBwYXNzd29yZDogbnVsbCxcbiAgIGNhY2hlOiBudWxsLFxuICAgdGhyb3dzOiBmYWxzZSxcbiAgIHRyYWRpdGlvbmFsOiBmYWxzZSxcbiAgIGhlYWRlcnM6IHt9LFxuICAgKi9cblxuXHRcdFx0YWNjZXB0czoge1xuXHRcdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0XHR9LFxuXG5cdFx0XHRjb250ZW50czoge1xuXHRcdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdFx0fSxcblxuXHRcdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHRcdH0sXG5cblx0XHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdFx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHRcdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdFx0YWpheFNldHVwOiBmdW5jdGlvbiBhamF4U2V0dXAodGFyZ2V0LCBzZXR0aW5ncykge1xuXHRcdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoYWpheEV4dGVuZCh0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MpLCBzZXR0aW5ncykgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCk7XG5cdFx0fSxcblxuXHRcdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyhwcmVmaWx0ZXJzKSxcblx0XHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHModHJhbnNwb3J0cyksXG5cblx0XHQvLyBNYWluIG1ldGhvZFxuXHRcdGFqYXg6IGZ1bmN0aW9uIGFqYXgodXJsLCBvcHRpb25zKSB7XG5cblx0XHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0XHRpZiAoKHR5cGVvZiB1cmwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih1cmwpKSA9PT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdFx0dmFyIHRyYW5zcG9ydCxcblxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHQgICAgcmVzcG9uc2VIZWFkZXJzLFxuXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKHt9LCBvcHRpb25zKSxcblxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmIChjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSkgPyBqUXVlcnkoY2FsbGJhY2tDb250ZXh0KSA6IGpRdWVyeS5ldmVudCxcblxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHQgICAgY29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcblxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0X3N0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHQgICAgcmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uIGdldFJlc3BvbnNlSGVhZGVyKGtleSkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoY29tcGxldGVkKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXJlc3BvbnNlSGVhZGVycykge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKG1hdGNoID0gcmhlYWRlcnMuZXhlYyhyZXNwb25zZUhlYWRlcnNTdHJpbmcpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldID0gbWF0Y2hbMl07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uIGdldEFsbFJlc3BvbnNlSGVhZGVycygpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKGNvbXBsZXRlZCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1tuYW1lLnRvTG93ZXJDYXNlKCldID0gcmVxdWVzdEhlYWRlcnNOYW1lc1tuYW1lLnRvTG93ZXJDYXNlKCldIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1tuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiBvdmVycmlkZU1pbWVUeXBlKHR5cGUpIHtcblx0XHRcdFx0XHRpZiAoY29tcGxldGVkID09IG51bGwpIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiBzdGF0dXNDb2RlKG1hcCkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmIChtYXApIHtcblx0XHRcdFx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKG1hcFtqcVhIUi5zdGF0dXNdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yIChjb2RlIGluIG1hcCkge1xuXHRcdFx0XHRcdFx0XHRcdF9zdGF0dXNDb2RlW2NvZGVdID0gW19zdGF0dXNDb2RlW2NvZGVdLCBtYXBbY29kZV1dO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24gYWJvcnQoc3RhdHVzVGV4dCkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICh0cmFuc3BvcnQpIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydChmaW5hbFRleHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKDAsIGZpbmFsVGV4dCk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkLnByb21pc2UoanFYSFIpO1xuXG5cdFx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRcdHMudXJsID0gKCh1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZikgKyBcIlwiKS5yZXBsYWNlKHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIpO1xuXG5cdFx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRcdHMuZGF0YVR5cGVzID0gKHMuZGF0YVR5cGUgfHwgXCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW1wiXCJdO1xuXG5cdFx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRcdGlmIChzLmNyb3NzRG9tYWluID09IG51bGwpIHtcblx0XHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PSB1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdFx0aWYgKHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKHMuZGF0YSwgcy50cmFkaXRpb25hbCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSKTtcblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0XHRpZiAoZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdChzLnR5cGUpO1xuXG5cdFx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKHJoYXNoLCBcIlwiKTtcblxuXHRcdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRcdGlmICghcy5oYXNDb250ZW50KSB7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoY2FjaGVVUkwubGVuZ3RoKTtcblxuXHRcdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRcdGlmIChzLmRhdGEpIHtcblx0XHRcdFx0XHRjYWNoZVVSTCArPSAocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpID8gXCImXCIgOiBcIj9cIikgKyBzLmRhdGE7XG5cblx0XHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKHMuY2FjaGUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKHJhbnRpQ2FjaGUsIFwiJDFcIik7XG5cdFx0XHRcdFx0dW5jYWNoZWQgPSAocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpID8gXCImXCIgOiBcIj9cIikgKyBcIl89XCIgKyBub25jZSsrICsgdW5jYWNoZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdFx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHRcdH0gZWxzZSBpZiAocy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgKHMuY29udGVudFR5cGUgfHwgXCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSA9PT0gMCkge1xuXHRcdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZShyMjAsIFwiK1wiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdGlmIChzLmlmTW9kaWZpZWQpIHtcblx0XHRcdFx0aWYgKGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdKSB7XG5cdFx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoalF1ZXJ5LmV0YWdbY2FjaGVVUkxdKSB7XG5cdFx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbY2FjaGVVUkxdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRcdGlmIChzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUpIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBzLmRhdGFUeXBlc1swXSAmJiBzLmFjY2VwdHNbcy5kYXRhVHlwZXNbMF1dID8gcy5hY2NlcHRzW3MuZGF0YVR5cGVzWzBdXSArIChzLmRhdGFUeXBlc1swXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIpIDogcy5hY2NlcHRzW1wiKlwiXSk7XG5cblx0XHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdFx0Zm9yIChpIGluIHMuaGVhZGVycykge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKGksIHMuaGVhZGVyc1tpXSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRcdGlmIChzLmJlZm9yZVNlbmQgJiYgKHMuYmVmb3JlU2VuZC5jYWxsKGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMpID09PSBmYWxzZSB8fCBjb21wbGV0ZWQpKSB7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKHMuY29tcGxldGUpO1xuXHRcdFx0anFYSFIuZG9uZShzLnN1Y2Nlc3MpO1xuXHRcdFx0anFYSFIuZmFpbChzLmVycm9yKTtcblxuXHRcdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHModHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIpO1xuXG5cdFx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRcdGlmICghdHJhbnNwb3J0KSB7XG5cdFx0XHRcdGRvbmUoLTEsIFwiTm8gVHJhbnNwb3J0XCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdFx0aWYgKGZpcmVHbG9iYWxzKSB7XG5cdFx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoXCJhamF4U2VuZFwiLCBbanFYSFIsIHNdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRcdGlmIChzLmFzeW5jICYmIHMudGltZW91dCA+IDApIHtcblx0XHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRqcVhIUi5hYm9ydChcInRpbWVvdXRcIik7XG5cdFx0XHRcdFx0fSwgcy50aW1lb3V0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0dHJhbnNwb3J0LnNlbmQocmVxdWVzdEhlYWRlcnMsIGRvbmUpO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cblx0XHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0aWYgKGNvbXBsZXRlZCkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0XHRkb25lKC0xLCBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRcdGZ1bmN0aW9uIGRvbmUoc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMpIHtcblx0XHRcdFx0dmFyIGlzU3VjY2Vzcyxcblx0XHRcdFx0ICAgIHN1Y2Nlc3MsXG5cdFx0XHRcdCAgICBlcnJvcixcblx0XHRcdFx0ICAgIHJlc3BvbnNlLFxuXHRcdFx0XHQgICAgbW9kaWZpZWQsXG5cdFx0XHRcdCAgICBzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRcdGlmICh0aW1lb3V0VGltZXIpIHtcblx0XHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRUaW1lcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0XHRpZiAocmVzcG9uc2VzKSB7XG5cdFx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKHMsIGpxWEhSLCByZXNwb25zZXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzKTtcblxuXHRcdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0XHRpZiAoaXNTdWNjZXNzKSB7XG5cblx0XHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRcdGlmIChzLmlmTW9kaWZpZWQpIHtcblx0XHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKG1vZGlmaWVkKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKTtcblx0XHRcdFx0XHRcdGlmIChtb2RpZmllZCkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1tjYWNoZVVSTF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdFx0aWYgKHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIpIHtcblx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHN0YXR1cyA9PT0gMzA0KSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdFx0aWYgKHN0YXR1cyB8fCAhc3RhdHVzVGV4dCkge1xuXHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRcdGlmIChzdGF0dXMgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCkgKyBcIlwiO1xuXG5cdFx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdFx0aWYgKGlzU3VjY2Vzcykge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKGNhbGxiYWNrQ29udGV4dCwgW3N1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aChjYWxsYmFja0NvbnRleHQsIFtqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3JdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoX3N0YXR1c0NvZGUpO1xuXHRcdFx0XHRfc3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRpZiAoZmlyZUdsb2JhbHMpIHtcblx0XHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlcihpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLCBbanFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvcl0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aChjYWxsYmFja0NvbnRleHQsIFtqcVhIUiwgc3RhdHVzVGV4dF0pO1xuXG5cdFx0XHRcdGlmIChmaXJlR2xvYmFscykge1xuXHRcdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKFwiYWpheENvbXBsZXRlXCIsIFtqcVhIUiwgc10pO1xuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdFx0aWYgKCEgLS1qUXVlcnkuYWN0aXZlKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fSxcblxuXHRcdGdldEpTT046IGZ1bmN0aW9uIGdldEpTT04odXJsLCBkYXRhLCBjYWxsYmFjaykge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5nZXQodXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIpO1xuXHRcdH0sXG5cblx0XHRnZXRTY3JpcHQ6IGZ1bmN0aW9uIGdldFNjcmlwdCh1cmwsIGNhbGxiYWNrKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdldCh1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIpO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1wiZ2V0XCIsIFwicG9zdFwiXSwgZnVuY3Rpb24gKGksIG1ldGhvZCkge1xuXHRcdGpRdWVyeVttZXRob2RdID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUpIHtcblxuXHRcdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihkYXRhKSkge1xuXHRcdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRcdHJldHVybiBqUXVlcnkuYWpheChqUXVlcnkuZXh0ZW5kKHtcblx0XHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCh1cmwpICYmIHVybCkpO1xuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uICh1cmwpIHtcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdFx0dHlwZTogXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdFx0Y2FjaGU6IHRydWUsXG5cdFx0XHRhc3luYzogZmFsc2UsXG5cdFx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHRcdH0pO1xuXHR9O1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdHdyYXBBbGw6IGZ1bmN0aW9uIHdyYXBBbGwoaHRtbCkge1xuXHRcdFx0dmFyIHdyYXA7XG5cblx0XHRcdGlmICh0aGlzWzBdKSB7XG5cdFx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihodG1sKSkge1xuXHRcdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwodGhpc1swXSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0XHR3cmFwID0galF1ZXJ5KGh0bWwsIHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUodHJ1ZSk7XG5cblx0XHRcdFx0aWYgKHRoaXNbMF0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0d3JhcC5tYXAoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHRcdHdoaWxlIChlbGVtLmZpcnN0RWxlbWVudENoaWxkKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdFx0fSkuYXBwZW5kKHRoaXMpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0d3JhcElubmVyOiBmdW5jdGlvbiB3cmFwSW5uZXIoaHRtbCkge1xuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGh0bWwpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0XHRqUXVlcnkodGhpcykud3JhcElubmVyKGh0bWwuY2FsbCh0aGlzLCBpKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkodGhpcyksXG5cdFx0XHRcdCAgICBjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0XHRpZiAoY29udGVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0Y29udGVudHMud3JhcEFsbChodG1sKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmFwcGVuZChodG1sKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdHdyYXA6IGZ1bmN0aW9uIHdyYXAoaHRtbCkge1xuXHRcdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbihodG1sKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykud3JhcEFsbChpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0dW53cmFwOiBmdW5jdGlvbiB1bndyYXAoc2VsZWN0b3IpIHtcblx0XHRcdHRoaXMucGFyZW50KHNlbGVjdG9yKS5ub3QoXCJib2R5XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoZWxlbSk7XG5cdH07XG5cdGpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0cmV0dXJuICEhKGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCk7XG5cdH07XG5cblx0alF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fTtcblxuXHR2YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0ICAgIHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cblx0c3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQ7XG5cdHN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdFx0dmFyIF9jYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHRcdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0XHRpZiAoc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbikge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c2VuZDogZnVuY3Rpb24gc2VuZChoZWFkZXJzLCBjb21wbGV0ZSkge1xuXHRcdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdCAgICB4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdFx0eGhyLm9wZW4ob3B0aW9ucy50eXBlLCBvcHRpb25zLnVybCwgb3B0aW9ucy5hc3luYywgb3B0aW9ucy51c2VybmFtZSwgb3B0aW9ucy5wYXNzd29yZCk7XG5cblx0XHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMueGhyRmllbGRzKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGkgaW4gb3B0aW9ucy54aHJGaWVsZHMpIHtcblx0XHRcdFx0XHRcdFx0eGhyW2ldID0gb3B0aW9ucy54aHJGaWVsZHNbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShvcHRpb25zLm1pbWVUeXBlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0pIHtcblx0XHRcdFx0XHRcdGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdFx0Zm9yIChpIGluIGhlYWRlcnMpIHtcblx0XHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIGhlYWRlcnNbaV0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdFx0X2NhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sodHlwZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0aWYgKF9jYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdF9jYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGUgPT09IFwiYWJvcnRcIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSBcImVycm9yXCIpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKDAsIFwiZXJyb3JcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKHhoclN1Y2Nlc3NTdGF0dXNbeGhyLnN0YXR1c10gfHwgeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIpICE9PSBcInRleHRcIiB8fCB0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/IHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6IHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LCB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHRcdHhoci5vbmxvYWQgPSBfY2FsbGJhY2soKTtcblx0XHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBfY2FsbGJhY2soXCJlcnJvclwiKTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRcdGlmICh4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoX2NhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdFx0X2NhbGxiYWNrID0gX2NhbGxiYWNrKFwiYWJvcnRcIik7XG5cblx0XHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0XHR4aHIuc2VuZChvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblxuXHRcdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRcdGlmIChfY2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuXHRcdFx0XHRcdGlmIChfY2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdF9jYWxsYmFjaygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5cdGpRdWVyeS5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG5cdFx0aWYgKHMuY3Jvc3NEb21haW4pIHtcblx0XHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxuXHRqUXVlcnkuYWpheFNldHVwKHtcblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArIFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0XHR9LFxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHRcdH0sXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiB0ZXh0U2NyaXB0KHRleHQpIHtcblx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwodGV4dCk7XG5cdFx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxuXHRqUXVlcnkuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLCBmdW5jdGlvbiAocykge1xuXHRcdGlmIChzLmNhY2hlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKHMuY3Jvc3NEb21haW4pIHtcblx0XHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcblx0alF1ZXJ5LmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIiwgZnVuY3Rpb24gKHMpIHtcblxuXHRcdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0XHRpZiAocy5jcm9zc0RvbWFpbikge1xuXHRcdFx0dmFyIHNjcmlwdCwgX2NhbGxiYWNrMjtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHNlbmQ6IGZ1bmN0aW9uIHNlbmQoXywgY29tcGxldGUpIHtcblx0XHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoXCI8c2NyaXB0PlwiKS5wcm9wKHtcblx0XHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0XHR9KS5vbihcImxvYWQgZXJyb3JcIiwgX2NhbGxiYWNrMiA9IGZ1bmN0aW9uIGNhbGxiYWNrKGV2dCkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0X2NhbGxiYWNrMiA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoZXZ0KSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0WzBdKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuXHRcdFx0XHRcdGlmIChfY2FsbGJhY2syKSB7XG5cdFx0XHRcdFx0XHRfY2FsbGJhY2syKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHQgICAgcmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuXHQvLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5cdGpRdWVyeS5hamF4U2V0dXAoe1xuXHRcdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdFx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24ganNvbnBDYWxsYmFjaygpIHtcblx0XHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgbm9uY2UrKztcblx0XHRcdHRoaXNbY2FsbGJhY2tdID0gdHJ1ZTtcblx0XHRcdHJldHVybiBjYWxsYmFjaztcblx0XHR9XG5cdH0pO1xuXG5cdC8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xuXHRqUXVlcnkuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIiwgZnVuY3Rpb24gKHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSKSB7XG5cblx0XHR2YXIgY2FsbGJhY2tOYW1lLFxuXHRcdCAgICBvdmVyd3JpdHRlbixcblx0XHQgICAgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0ICAgIGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKHJqc29ucC50ZXN0KHMudXJsKSA/IFwidXJsXCIgOiB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmIChzLmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgPT09IDAgJiYgcmpzb25wLnRlc3Qocy5kYXRhKSAmJiBcImRhdGFcIik7XG5cblx0XHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdFx0aWYgKGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWzBdID09PSBcImpzb25wXCIpIHtcblxuXHRcdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24ocy5qc29ucENhbGxiYWNrKSA/IHMuanNvbnBDYWxsYmFjaygpIDogcy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0XHRpZiAoanNvblByb3ApIHtcblx0XHRcdFx0c1tqc29uUHJvcF0gPSBzW2pzb25Qcm9wXS5yZXBsYWNlKHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lKTtcblx0XHRcdH0gZWxzZSBpZiAocy5qc29ucCAhPT0gZmFsc2UpIHtcblx0XHRcdFx0cy51cmwgKz0gKHJxdWVyeS50ZXN0KHMudXJsKSA/IFwiJlwiIDogXCI/XCIpICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0XHRzLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKCFyZXNwb25zZUNvbnRhaW5lcikge1xuXHRcdFx0XHRcdGpRdWVyeS5lcnJvcihjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbMF07XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0XHRzLmRhdGFUeXBlc1swXSA9IFwianNvblwiO1xuXG5cdFx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1tjYWxsYmFja05hbWVdO1xuXHRcdFx0d2luZG93W2NhbGxiYWNrTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0XHRqcVhIUi5hbHdheXMoZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0XHRpZiAob3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGpRdWVyeSh3aW5kb3cpLnJlbW92ZVByb3AoY2FsbGJhY2tOYW1lKTtcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2luZG93W2NhbGxiYWNrTmFtZV0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRcdGlmIChzW2NhbGxiYWNrTmFtZV0pIHtcblxuXHRcdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaChjYWxsYmFja05hbWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRcdGlmIChyZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbihvdmVyd3JpdHRlbikpIHtcblx0XHRcdFx0XHRvdmVyd3JpdHRlbihyZXNwb25zZUNvbnRhaW5lclswXSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG5cdC8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcblx0Ly8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG5cdC8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cblx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuXHRzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5O1xuXHRcdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRcdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xuXHR9KCk7XG5cblx0Ly8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG5cdC8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcblx0Ly8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0Ly8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xuXHRqUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzKSB7XG5cdFx0aWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIpIHtcblx0XHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRcdGNvbnRleHQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdFx0aWYgKCFjb250ZXh0KSB7XG5cblx0XHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRcdGlmIChzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCkge1xuXHRcdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpO1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKTtcblx0XHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKGJhc2UpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyhkYXRhKTtcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdFx0Ly8gU2luZ2xlIHRhZ1xuXHRcdGlmIChwYXJzZWQpIHtcblx0XHRcdHJldHVybiBbY29udGV4dC5jcmVhdGVFbGVtZW50KHBhcnNlZFsxXSldO1xuXHRcdH1cblxuXHRcdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoW2RhdGFdLCBjb250ZXh0LCBzY3JpcHRzKTtcblxuXHRcdGlmIChzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHRqUXVlcnkoc2NyaXB0cykucmVtb3ZlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZShbXSwgcGFyc2VkLmNoaWxkTm9kZXMpO1xuXHR9O1xuXG5cdC8qKlxuICAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAgKi9cblx0alF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiAodXJsLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG5cdFx0dmFyIHNlbGVjdG9yLFxuXHRcdCAgICB0eXBlLFxuXHRcdCAgICByZXNwb25zZSxcblx0XHQgICAgc2VsZiA9IHRoaXMsXG5cdFx0ICAgIG9mZiA9IHVybC5pbmRleE9mKFwiIFwiKTtcblxuXHRcdGlmIChvZmYgPiAtMSkge1xuXHRcdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKHVybC5zbGljZShvZmYpKTtcblx0XHRcdHVybCA9IHVybC5zbGljZSgwLCBvZmYpO1xuXHRcdH1cblxuXHRcdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihwYXJhbXMpKSB7XG5cblx0XHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHRcdH0gZWxzZSBpZiAocGFyYW1zICYmICh0eXBlb2YgcGFyYW1zID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YocGFyYW1zKSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRcdGlmIChzZWxmLmxlbmd0aCA+IDApIHtcblx0XHRcdGpRdWVyeS5hamF4KHtcblx0XHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0XHR9KS5kb25lKGZ1bmN0aW9uIChyZXNwb25zZVRleHQpIHtcblxuXHRcdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0c2VsZi5odG1sKHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZChqUXVlcnkucGFyc2VIVE1MKHJlc3BvbnNlVGV4dCkpLmZpbmQoc2VsZWN0b3IpIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQpO1xuXG5cdFx0XHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdFx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0XHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHRcdH0pLmFsd2F5cyhjYWxsYmFjayAmJiBmdW5jdGlvbiAoanFYSFIsIHN0YXR1cykge1xuXHRcdFx0XHRzZWxmLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmFwcGx5KHRoaXMsIHJlc3BvbnNlIHx8IFtqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFJdKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xuXHRqUXVlcnkuZWFjaChbXCJhamF4U3RhcnRcIiwgXCJhamF4U3RvcFwiLCBcImFqYXhDb21wbGV0ZVwiLCBcImFqYXhFcnJvclwiLCBcImFqYXhTdWNjZXNzXCIsIFwiYWpheFNlbmRcIl0sIGZ1bmN0aW9uIChpLCB0eXBlKSB7XG5cdFx0alF1ZXJ5LmZuW3R5cGVdID0gZnVuY3Rpb24gKGZuKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbih0eXBlLCBmbik7XG5cdFx0fTtcblx0fSk7XG5cblx0alF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uIChmbikge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdFx0fSkubGVuZ3RoO1xuXHR9O1xuXG5cdGpRdWVyeS5vZmZzZXQgPSB7XG5cdFx0c2V0T2Zmc2V0OiBmdW5jdGlvbiBzZXRPZmZzZXQoZWxlbSwgb3B0aW9ucywgaSkge1xuXHRcdFx0dmFyIGN1clBvc2l0aW9uLFxuXHRcdFx0ICAgIGN1ckxlZnQsXG5cdFx0XHQgICAgY3VyQ1NTVG9wLFxuXHRcdFx0ICAgIGN1clRvcCxcblx0XHRcdCAgICBjdXJPZmZzZXQsXG5cdFx0XHQgICAgY3VyQ1NTTGVmdCxcblx0XHRcdCAgICBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdCAgICBwb3NpdGlvbiA9IGpRdWVyeS5jc3MoZWxlbSwgXCJwb3NpdGlvblwiKSxcblx0XHRcdCAgICBjdXJFbGVtID0galF1ZXJ5KGVsZW0pLFxuXHRcdFx0ICAgIHByb3BzID0ge307XG5cblx0XHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRcdGlmIChwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIikge1xuXHRcdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdFx0fVxuXG5cdFx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyhlbGVtLCBcInRvcFwiKTtcblx0XHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKGVsZW0sIFwibGVmdFwiKTtcblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIikgJiYgKGN1ckNTU1RvcCArIGN1ckNTU0xlZnQpLmluZGV4T2YoXCJhdXRvXCIpID4gLTE7XG5cblx0XHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRcdGlmIChjYWxjdWxhdGVQb3NpdGlvbikge1xuXHRcdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoY3VyQ1NTVG9wKSB8fCAwO1xuXHRcdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdChjdXJDU1NMZWZ0KSB8fCAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcblxuXHRcdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbChlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKHt9LCBjdXJPZmZzZXQpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdGlvbnMudG9wICE9IG51bGwpIHtcblx0XHRcdFx0cHJvcHMudG9wID0gb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICsgY3VyVG9wO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9wdGlvbnMubGVmdCAhPSBudWxsKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgPSBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCArIGN1ckxlZnQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChcInVzaW5nXCIgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoZWxlbSwgcHJvcHMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VyRWxlbS5jc3MocHJvcHMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChvcHRpb25zKSB7XG5cblx0XHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQodGhpcywgb3B0aW9ucywgaSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZG9jLFxuXHRcdFx0ICAgIGRvY0VsZW0sXG5cdFx0XHQgICAgcmVjdCxcblx0XHRcdCAgICB3aW4sXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF07XG5cblx0XHRcdGlmICghZWxlbSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRcdGlmICghZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHRcdH1cblxuXHRcdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2luID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0cG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuXHRcdFx0aWYgKCF0aGlzWzBdKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldFBhcmVudCxcblx0XHRcdCAgICBvZmZzZXQsXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF0sXG5cdFx0XHQgICAgcGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdFx0aWYgKGpRdWVyeS5jc3MoZWxlbSwgXCJwb3NpdGlvblwiKSA9PT0gXCJmaXhlZFwiKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0XHRpZiAoIW5vZGVOYW1lKG9mZnNldFBhcmVudFswXSwgXCJodG1sXCIpKSB7XG5cdFx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IHtcblx0XHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKG9mZnNldFBhcmVudFswXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlKSxcblx0XHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3Mob2Zmc2V0UGFyZW50WzBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlKVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyhlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlKSxcblx0XHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUpXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0XHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdFx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdFx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHRcdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0XHQvL1xuXHRcdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHRcdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHRcdC8vXG5cdFx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0XHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uIG9mZnNldFBhcmVudCgpIHtcblx0XHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0XHR3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3Mob2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIpID09PSBcInN0YXRpY1wiKSB7XG5cdFx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcblx0alF1ZXJ5LmVhY2goeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uIChtZXRob2QsIHByb3ApIHtcblx0XHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdFx0alF1ZXJ5LmZuW21ldGhvZF0gPSBmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRyZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uIChlbGVtLCBtZXRob2QsIHZhbCkge1xuXG5cdFx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0XHR2YXIgd2luO1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cdFx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdFx0fSBlbHNlIGlmIChlbGVtLm5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bcHJvcF0gOiBlbGVtW21ldGhvZF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAod2luKSB7XG5cdFx0XHRcdFx0d2luLnNjcm9sbFRvKCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsIHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbVttZXRob2RdID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCk7XG5cdFx0fTtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuXHQvLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuXHQvLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcblx0Ly8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcblx0Ly8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcblx0Ly8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcblx0alF1ZXJ5LmVhY2goW1widG9wXCIsIFwibGVmdFwiXSwgZnVuY3Rpb24gKGksIHByb3ApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbcHJvcF0gPSBhZGRHZXRIb29rSWYoc3VwcG9ydC5waXhlbFBvc2l0aW9uLCBmdW5jdGlvbiAoZWxlbSwgY29tcHV0ZWQpIHtcblx0XHRcdGlmIChjb21wdXRlZCkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyhlbGVtLCBwcm9wKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KGNvbXB1dGVkKSA/IGpRdWVyeShlbGVtKS5wb3NpdGlvbigpW3Byb3BdICsgXCJweFwiIDogY29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cdC8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xuXHRqUXVlcnkuZWFjaCh7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiAobmFtZSwgdHlwZSkge1xuXHRcdGpRdWVyeS5lYWNoKHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LCBmdW5jdGlvbiAoZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSkge1xuXG5cdFx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRcdGpRdWVyeS5mbltmdW5jTmFtZV0gPSBmdW5jdGlvbiAobWFyZ2luLCB2YWx1ZSkge1xuXHRcdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiKSxcblx0XHRcdFx0ICAgIGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8IChtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIik7XG5cblx0XHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBmdW5jdGlvbiAoZWxlbSwgdHlwZSwgdmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdFx0aWYgKGpRdWVyeS5pc1dpbmRvdyhlbGVtKSkge1xuXG5cdFx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoXCJvdXRlclwiKSA9PT0gMCA/IGVsZW1bXCJpbm5lclwiICsgbmFtZV0gOiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiICsgbmFtZV07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoZWxlbS5ib2R5W1wic2Nyb2xsXCIgKyBuYW1lXSwgZG9jW1wic2Nyb2xsXCIgKyBuYW1lXSwgZWxlbS5ib2R5W1wib2Zmc2V0XCIgKyBuYW1lXSwgZG9jW1wib2Zmc2V0XCIgKyBuYW1lXSwgZG9jW1wiY2xpZW50XCIgKyBuYW1lXSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoZWxlbSwgdHlwZSwgZXh0cmEpIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhKTtcblx0XHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUpO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cblx0XHRiaW5kOiBmdW5jdGlvbiBiaW5kKHR5cGVzLCBkYXRhLCBmbikge1xuXHRcdFx0cmV0dXJuIHRoaXMub24odHlwZXMsIG51bGwsIGRhdGEsIGZuKTtcblx0XHR9LFxuXHRcdHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKHR5cGVzLCBmbikge1xuXHRcdFx0cmV0dXJuIHRoaXMub2ZmKHR5cGVzLCBudWxsLCBmbik7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlOiBmdW5jdGlvbiBkZWxlZ2F0ZShzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbih0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuKTtcblx0XHR9LFxuXHRcdHVuZGVsZWdhdGU6IGZ1bmN0aW9uIHVuZGVsZWdhdGUoc2VsZWN0b3IsIHR5cGVzLCBmbikge1xuXG5cdFx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHRoaXMub2ZmKHNlbGVjdG9yLCBcIioqXCIpIDogdGhpcy5vZmYodHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4pO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uIChob2xkKSB7XG5cdFx0aWYgKGhvbGQpIHtcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnJlYWR5KHRydWUpO1xuXHRcdH1cblx0fTtcblx0alF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXHRqUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcblx0alF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cblx0Ly8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG5cdC8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcblx0Ly8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG5cdC8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcblx0Ly8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG5cdC8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuXHQvLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cblx0Ly8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcblx0Ly8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuXHQvLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cblx0aWYgKHRydWUpIHtcblx0XHQhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeTtcblx0XHR9KS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuXHR9XG5cblx0dmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxuXHRqUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uIChkZWVwKSB7XG5cdFx0aWYgKHdpbmRvdy4kID09PSBqUXVlcnkpIHtcblx0XHRcdHdpbmRvdy4kID0gXyQ7XG5cdFx0fVxuXG5cdFx0aWYgKGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5KSB7XG5cdFx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9O1xuXG5cdC8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG5cdC8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcblx0Ly8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuXHRpZiAoIW5vR2xvYmFsKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn0pO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oNykobW9kdWxlKSkpXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uICgpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7Il19
